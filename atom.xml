<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>IdiotSky</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://idiotsky.top/"/>
  <updated>2018-12-07T15:49:45.867Z</updated>
  <id>http://idiotsky.top/</id>
  
  <author>
    <name>ejunjsh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux内存管理</title>
    <link href="http://idiotsky.top/2018/12/07/linux-mm/"/>
    <id>http://idiotsky.top/2018/12/07/linux-mm/</id>
    <published>2018-12-07T15:49:22.000Z</published>
    <updated>2018-12-07T15:49:45.867Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
    
    </summary>
    
      <category term="linux" scheme="http://idiotsky.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://idiotsky.top/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>Go init函数详解</title>
    <link href="http://idiotsky.top/2018/12/05/go-init/"/>
    <id>http://idiotsky.top/2018/12/05/go-init/</id>
    <published>2018-12-05T13:24:32.000Z</published>
    <updated>2018-12-05T13:41:23.890Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>go 一天不用就忘了这个，mark一个以防万一👿</p>
</blockquote>
<p><code>init()</code>函数会在每个包完成初始化后自动执行，并且执行优先级比main函数高。init 函数通常被用来：</p>
<ul>
<li>对变量进行初始化</li>
<li>检查/修复程序的状态</li>
<li>注册</li>
<li>运行一次计算</li>
</ul>
<a id="more"></a>
<h1 id="包的初始化"><a href="#包的初始化" class="headerlink" title="包的初始化"></a>包的初始化</h1><p>为了使用导入的包，首先必须将其初始化。初始化总是以单线程执行，并且按照包的依赖关系顺序执行。这通过Golang的运行时系统控制，如下图所示：</p>
<ol>
<li>初始化导入的包（递归导入）</li>
<li>对包块中声明的变量进行计算和分配初始值</li>
<li>执行包中的init函数</li>
</ol>
<p><a href="http://idiotsky.top/images4/go-init.png"><img src="http://idiotsky.top/images4/go-init.png" alt=""></a></p>
<p><strong>initial.go</strong></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _ <span class="keyword">int64</span>=s()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"init function ---&gt;"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">s</span><span class="params">()</span> <span class="title">int64</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"function s() ---&gt;"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"main ---&gt;"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>执行结果</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function s() ---&gt;</span><br><span class="line">init function ---&gt;</span><br><span class="line">main ---&gt;</span><br></pre></td></tr></table></figure>
<p>即使包被导入多次，初始化只需要一次。</p>
<h1 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h1><p>init函数不需要传入参数，也不会返回任何值。与main相比而言，init没有被声明，因此也不能被引用。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"init"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    init()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在编译上面的函数时，会出错“undefined：init”。</p>
<p>每个源文件中可以包含多个init函数.</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"init 1"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"init2"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    fmt.Println(<span class="string">"main"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>执行结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">init1</span><br><span class="line">init2</span><br><span class="line">main</span><br></pre></td></tr></table></figure>
<p>init函数常用的一个例子就是用来设置初始表达式的值。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> precomputed=[<span class="number">20</span>]<span class="keyword">float64</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> current <span class="keyword">float64</span>=<span class="number">1</span></span><br><span class="line">    precomputed[<span class="number">0</span>]=current</span><br><span class="line">    <span class="keyword">for</span> i:=<span class="number">1</span>;i&lt;<span class="built_in">len</span>(precomputed);i++&#123;</span><br><span class="line">        precomputed[i]=precomputed[i<span class="number">-1</span>]*<span class="number">1.2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为上面代码中不可能用for循环来作为precomputed的值（这是一句声明），因此可以用init函数来解决这个问题。</p>
<h1 id="Go包导入规则的副作用"><a href="#Go包导入规则的副作用" class="headerlink" title="Go包导入规则的副作用"></a>Go包导入规则的副作用</h1><p>Go要求非常严格，不允许引用不使用的包。但是有时你引用包只是为了调用init函数去做一些初始化工作。此时空标识符（也就是下划线）的作用就是为了解决这个问题。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> _ <span class="string">"com/pkg"</span></span><br></pre></td></tr></table></figure>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/benben_2015/article/details/79486077" target="_blank" rel="noopener">https://blog.csdn.net/benben_2015/article/details/79486077</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;go 一天不用就忘了这个，mark一个以防万一👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;init()&lt;/code&gt;函数会在每个包完成初始化后自动执行，并且执行优先级比main函数高。init 函数通常被用来：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对变量进行初始化&lt;/li&gt;
&lt;li&gt;检查/修复程序的状态&lt;/li&gt;
&lt;li&gt;注册&lt;/li&gt;
&lt;li&gt;运行一次计算&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="go" scheme="http://idiotsky.top/categories/go/"/>
    
    
      <category term="go" scheme="http://idiotsky.top/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>深入Linux proc文件系统</title>
    <link href="http://idiotsky.top/2018/11/28/linux-proc/"/>
    <id>http://idiotsky.top/2018/11/28/linux-proc/</id>
    <published>2018-11-28T14:38:53.000Z</published>
    <updated>2018-12-02T13:48:20.315Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>继续深入学习Linux👿</p>
</blockquote>
<p>在Linux上，proc是一个伪文件系统，提供了访问内核数据的方法，一般挂载在“/proc”目录，其中的大部分内容是只读的，挂载（mount）信息可能为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)</span><br></pre></td></tr></table></figure>
<p>下面列举“/proc”文件系统下的文件和目录。</p>
<h1 id="pid目录"><a href="#pid目录" class="headerlink" title="pid目录"></a>pid目录</h1><p><code>/proc/[pid]</code>目录，pid为进程的数字ID，是个数值，每个运行着的进程都有这么一个目录。</p>
<h2 id="cmdline"><a href="#cmdline" class="headerlink" title="cmdline"></a>cmdline</h2><p><code>/proc/[pid]/cmdline</code>是一个只读文件，包含进程的完整命令行信息。如果这个进程是zombie进程，则这个文件没有任何内容。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># ps -ef | grep 2948</span><br><span class="line">root       2948      1  0 Nov05 ?        00:00:04 /usr/sbin/libvirtd --listen</span><br><span class="line"></span><br><span class="line"># cat /proc/2948/cmdline</span><br><span class="line">/usr/sbin/libvirtd--listen</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="comm"><a href="#comm" class="headerlink" title="comm"></a>comm</h2><p><code>/proc/[pid]/comm</code>包含进程的命令名。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/2948/comm</span><br><span class="line"></span><br><span class="line">libvirtd</span><br></pre></td></tr></table></figure>
<h2 id="cwd"><a href="#cwd" class="headerlink" title="cwd"></a>cwd</h2><p><code>/proc/[pid]/cwd</code>是进程当前工作目录的符号链接。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ls -lt /proc/2948/cwd</span><br><span class="line">lrwxrwxrwx 1 root root 0 Nov  9 12:14 /proc/2948/cwd -&gt; /</span><br></pre></td></tr></table></figure>
<h2 id="environ"><a href="#environ" class="headerlink" title="environ"></a>environ</h2><p><code>/proc/[pid]/environ</code>显示进程的环境变量。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># strings /proc/2948/environ</span><br><span class="line">LANG=POSIX</span><br><span class="line">LC_CTYPE=en_US.UTF-8</span><br><span class="line">PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line">NOTIFY_SOCKET=@/org/freedesktop/systemd1/notify</span><br><span class="line">LIBVIRTD_CONFIG=/etc/libvirt/libvirtd.conf</span><br><span class="line">LIBVIRTD_ARGS=--listen</span><br><span class="line">LIBVIRTD_NOFILES_LIMIT=2048</span><br></pre></td></tr></table></figure>
<h2 id="exe"><a href="#exe" class="headerlink" title="exe"></a>exe</h2><p><code>/proc/[pid]/exe</code>为实际运行程序的符号链接。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ls -lt /proc/2948/exe</span><br><span class="line">lrwxrwxrwx 1 root root 0 Nov  5 13:04 /proc/2948/exe -&gt; /usr/sbin/libvirtd</span><br></pre></td></tr></table></figure>
<h2 id="fd"><a href="#fd" class="headerlink" title="fd"></a>fd</h2><p><code>/proc/[pid]/fd</code>是一个目录，包含进程打开文件的情况。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># ls -lt /proc/3801/fd</span><br><span class="line">total 0</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 0 -&gt; socket:[37445]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 1 -&gt; socket:[37446]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 10 -&gt; socket:[31729]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 11 -&gt; socket:[34562]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 12 -&gt; socket:[39978]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 13 -&gt; socket:[34574]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 14 -&gt; socket:[39137]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 15 -&gt; socket:[39208]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 16 -&gt; socket:[39221]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 17 -&gt; socket:[41080]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 18 -&gt; socket:[40014]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 19 -&gt; socket:[34617]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 20 -&gt; socket:[34620]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 23 -&gt; socket:[42357]</span><br><span class="line">lr-x------. 1 root root 64 Apr 18 16:51 3 -&gt; /dev/urandom</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 4 -&gt; socket:[37468]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 5 -&gt; socket:[37471]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 6 -&gt; socket:[289532]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 7 -&gt; socket:[31728]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 8 -&gt; socket:[37450]</span><br><span class="line">lrwx------. 1 root root 64 Apr 18 16:51 9 -&gt; socket:[37451]</span><br><span class="line">l-wx------. 1 root root 64 Apr 13 16:35 2 -&gt; /root/.vnc/localhost.localdomain:1.log</span><br></pre></td></tr></table></figure>
<p>目录中的每一项都是一个符号链接，指向打开的文件，数字则代表文件描述符。</p>
<h2 id="limits"><a href="#limits" class="headerlink" title="limits"></a>limits</h2><p><code>/proc/[pid]/limits</code>显示当前进程的资源限制。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/2948/limits</span><br><span class="line">Limit                     Soft Limit           Hard Limit           Units</span><br><span class="line">Max cpu time              unlimited            unlimited            seconds</span><br><span class="line">Max file size             unlimited            unlimited            bytes</span><br><span class="line">Max data size             unlimited            unlimited            bytes</span><br><span class="line">Max stack size            8388608              unlimited            bytes</span><br><span class="line">Max core file size        0                    unlimited            bytes</span><br><span class="line">Max resident set          unlimited            unlimited            bytes</span><br><span class="line">Max processes             6409                 6409                 processes</span><br><span class="line">Max open files            1024                 4096                 files</span><br><span class="line">Max locked memory         65536                65536                bytes</span><br><span class="line">Max address space         unlimited            unlimited            bytes</span><br><span class="line">Max file locks            unlimited            unlimited            locks</span><br><span class="line">Max pending signals       6409                 6409                 signals</span><br><span class="line">Max msgqueue size         819200               819200               bytes</span><br><span class="line">Max nice priority         0                    0</span><br><span class="line">Max realtime priority     0                    0</span><br><span class="line">Max realtime timeout      unlimited            unlimited            us</span><br></pre></td></tr></table></figure>
<p>Soft Limit表示kernel设置给资源的值，Hard Limit表示Soft Limit的上限，而Units则为计量单元。</p>
<h2 id="maps"><a href="#maps" class="headerlink" title="maps"></a>maps</h2><p><code>/proc/[pid]/maps</code>显示进程的内存区域映射信息。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">address           perms offset  dev   inode        pathname</span><br><span class="line">00400000-00452000 r-xp 00000000 08:02 173521      /usr/bin/dbus-daemon</span><br><span class="line">00651000-00652000 r--p 00051000 08:02 173521      /usr/bin/dbus-daemon</span><br><span class="line">00652000-00655000 rw-p 00052000 08:02 173521      /usr/bin/dbus-daemon</span><br><span class="line">00e03000-00e24000 rw-p 00000000 00:00 0           [heap]</span><br><span class="line">00e24000-011f7000 rw-p 00000000 00:00 0           [heap]</span><br><span class="line">...</span><br><span class="line">35b1800000-35b1820000 r-xp 00000000 08:02 135522  /usr/lib64/ld-2.15.so</span><br><span class="line">35b1a1f000-35b1a20000 r--p 0001f000 08:02 135522  /usr/lib64/ld-2.15.so</span><br><span class="line">35b1a20000-35b1a21000 rw-p 00020000 08:02 135522  /usr/lib64/ld-2.15.so</span><br><span class="line">35b1a21000-35b1a22000 rw-p 00000000 00:00 0</span><br><span class="line">35b1c00000-35b1dac000 r-xp 00000000 08:02 135870  /usr/lib64/libc-2.15.so</span><br><span class="line">35b1dac000-35b1fac000 ---p 001ac000 08:02 135870  /usr/lib64/libc-2.15.so</span><br><span class="line">35b1fac000-35b1fb0000 r--p 001ac000 08:02 135870  /usr/lib64/libc-2.15.so</span><br><span class="line">35b1fb0000-35b1fb2000 rw-p 001b0000 08:02 135870  /usr/lib64/libc-2.15.so</span><br><span class="line">...</span><br><span class="line">f2c6ff8c000-7f2c7078c000 rw-p 00000000 00:00 0    [stack:986]</span><br><span class="line">...</span><br><span class="line">7fffb2c0d000-7fffb2c2e000 rw-p 00000000 00:00 0   [stack]</span><br><span class="line">7fffb2d48000-7fffb2d49000 r-xp 00000000 00:00 0   [vdso]</span><br></pre></td></tr></table></figure>
<ul>
<li>address字段表示进程中内存映射占据的地址空间，格式为十六进制的BeginAddress-EndAddress。 </li>
<li>perms字段表示权限，共四个字符，依次为rwxs或rwxp，其中r为read，w为write，x为execute，s为shared，p为private，对应位置没有权限时用一个短横线代替。 </li>
<li>offset字段表示内存映射地址在文件中的字节偏移量。 </li>
<li>dev字段表示device，格式为major:minor。 </li>
<li>inode字段表示对应device的inode，0表示内存映射区域没有关联的inode，如未初始化的BSS数据段就是这种情况。 </li>
<li>pathname字段用于内存映射的文件，对于ELF格式的文件来说，可以通过命令readelf -l查看ELF程序头部的Offset字段，与maps文件的offset字段作对比。pathname可能为空，表示匿名映射，这种情况下难以调试进程，如gdb、strace等命令。除了正常的文件路径之外，pathname还可能是下面的值：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[stack]    初始进程（主线程）的stack</span><br><span class="line">[stack:&lt;tid&gt;]    线程ID为tid的stack. 对应于/proc/[pid]/task/[tid]/路径</span><br><span class="line">[vdso]    Virtual Dynamically linked Shared Object</span><br><span class="line">[heap]    进程的heap</span><br></pre></td></tr></table></figure>
<h2 id="root"><a href="#root" class="headerlink" title="root"></a>root</h2><p><code>/proc/[pid]/root</code>是进程根目录的符号链接。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># ls -lt /proc/2948/root</span><br><span class="line">lrwxrwxrwx 1 root root 0 Nov  9 12:14 /proc/2948/root -&gt; /</span><br></pre></td></tr></table></figure>
<h2 id="stack"><a href="#stack" class="headerlink" title="stack"></a>stack</h2><p><code>/proc/[pid]/stack</code>显示当前进程的内核调用栈信息，只有内核编译时打开了CONFIG_STACKTRACE编译选项，才会生成这个文件。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/2948/stack</span><br><span class="line">[&lt;ffffffff80168375&gt;] poll_schedule_timeout+0x45/0x60</span><br><span class="line">[&lt;ffffffff8016994d&gt;] do_sys_poll+0x49d/0x550</span><br><span class="line">[&lt;ffffffff80169abd&gt;] SyS_poll+0x5d/0xf0</span><br><span class="line">[&lt;ffffffff804c16e7&gt;] system_call_fastpath+0x16/0x1b</span><br><span class="line">[&lt;00007f4a41ff2c1d&gt;] 0x7f4a41ff2c1d</span><br><span class="line">[&lt;ffffffffffffffff&gt;] 0xffffffffffffffff</span><br></pre></td></tr></table></figure>
<h2 id="statm"><a href="#statm" class="headerlink" title="statm"></a>statm</h2><p><code>/proc/[pid]/statm</code>显示进程所占用内存大小的统计信息，包含七个值，度量单位是page（page大小可通过getconf PAGESIZE得到）。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/2948/statm  </span><br><span class="line">72362 12945 4876 569 0 24665 0</span><br></pre></td></tr></table></figure>
<p>各个值含义：<br>a）进程占用的总的内存；<br>b）进程当前时刻占用的物理内存；<br>c）同其它进程共享的内存；<br>d）进程的代码段；<br>e）共享库（从2.6版本起，这个值为0）；<br>f）进程的堆栈；<br>g）dirty pages（从2.6版本起，这个值为0）。</p>
<h2 id="status"><a href="#status" class="headerlink" title="status"></a>status</h2><p>status文件内容的格式如下（查看当前shell命令所在进程的信息）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">$ cat /proc/$$/status</span><br><span class="line">Name:   bash</span><br><span class="line">State:  S (sleeping)</span><br><span class="line">Tgid:   3515</span><br><span class="line">Pid:    3515</span><br><span class="line">PPid:   3452</span><br><span class="line">TracerPid:      0</span><br><span class="line">Uid:    1000    1000    1000    1000</span><br><span class="line">Gid:    100     100     100     100</span><br><span class="line">FDSize: 256</span><br><span class="line">Groups: 16 33 100</span><br><span class="line">VmPeak:     9136 kB</span><br><span class="line">VmSize:     7896 kB</span><br><span class="line">VmLck:         0 kB</span><br><span class="line">VmPin:         0 kB</span><br><span class="line">VmHWM:      7572 kB</span><br><span class="line">VmRSS:      6316 kB</span><br><span class="line">VmData:     5224 kB</span><br><span class="line">VmStk:        88 kB</span><br><span class="line">VmExe:       572 kB</span><br><span class="line">VmLib:      1708 kB</span><br><span class="line">VmPMD:         4 kB</span><br><span class="line">VmPTE:        20 kB</span><br><span class="line">VmSwap:        0 kB</span><br><span class="line">Threads:        1</span><br><span class="line">SigQ:   0/3067</span><br><span class="line">SigPnd: 0000000000000000</span><br><span class="line">ShdPnd: 0000000000000000</span><br><span class="line">SigBlk: 0000000000010000</span><br><span class="line">SigIgn: 0000000000384004</span><br><span class="line">SigCgt: 000000004b813efb</span><br><span class="line">CapInh: 0000000000000000</span><br><span class="line">CapPrm: 0000000000000000</span><br><span class="line">CapEff: 0000000000000000</span><br><span class="line">CapBnd: ffffffffffffffff</span><br><span class="line">CapAmb:   0000000000000000</span><br><span class="line">Seccomp:        0</span><br><span class="line">Cpus_allowed:   00000001</span><br><span class="line">Cpus_allowed_list:      0</span><br><span class="line">Mems_allowed:   1</span><br><span class="line">Mems_allowed_list:      0</span><br><span class="line">voluntary_ctxt_switches:        150</span><br><span class="line">nonvoluntary_ctxt_switches:     545</span><br></pre></td></tr></table></figure>
<h2 id="syscall"><a href="#syscall" class="headerlink" title="syscall"></a>syscall</h2><p><code>/proc/[pid]/syscall</code>显示当前进程正在执行的系统调用。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/2948/syscall</span><br><span class="line">7 0x7f4a452cbe70 0xb 0x1388 0xffffffffffdff000 0x7f4a4274a750 0x0 0x7ffd1a8033f0 0x7f4a41ff2c1d</span><br></pre></td></tr></table></figure>
<p>第一个值是系统调用号（7代表poll），后面跟着6个系统调用的参数值（位于寄存器中），最后两个值依次是堆栈指针和指令计数器的值。如果当前进程虽然阻塞，但阻塞函数并不是系统调用，则系统调用号的值为-1，后面只有堆栈指针和指令计数器的值。如果进程没有阻塞，则这个文件只有一个“running”的字符串。</p>
<p>内核编译时打开了CONFIG_HAVE_ARCH_TRACEHOOK编译选项，才会生成这个文件。</p>
<h2 id="wchan"><a href="#wchan" class="headerlink" title="wchan"></a>wchan</h2><p><code>/proc/[pid]/wchan</code>显示当进程休眠时，内核当前运行的函数。举例如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># cat /proc/2948/wchan</span><br><span class="line">kauditd_</span><br></pre></td></tr></table></figure>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><code>/proc/[pid]/task</code>，目录，每个线程一个子目录，目录名为线程ID。<br><code>/proc/[pid]/stat</code>，文件，进程状态信息，用于ps命令。<br><code>/proc/[pid]/uid_map</code>，文件，用户ID映射信息，详见（man user_namespaces）。<br><code>/proc/[pid]/gid_map</code>，文件，组ID映射信息，详见（man user_namespaces）。<br><code>/proc/[pid]/mountinfo</code>，文件，挂载信息，格式为36 35 98:0 /mnt1 /mnt2 rw,noatime master:1 - ext3 /dev/root rw,errors=continue，以空格作为分隔符，从左到右各字段的意思分别是唯一挂载ID、父挂载ID、文件系统的设备主从号码、文件系统中挂载的根节点、相对于进程根节点的挂载点、挂载权限等挂载配置、可选配置、短横线表示前面可选配置的结束、文件系统类型、文件系统特有的挂载源或者为none、额外配置。<br><code>/proc/[pid]/mounts</code>，文件，挂载在当前进程的文件系统列表，格式参照（man fstab）。<br><code>/proc/[pid]/mountstats</code>，文件，挂载信息，格式形如device /dev/sda7 mounted on /home with fstype ext3 [statistics]。<br><code>/proc/[pid]/ns/</code>，目录，保存了每个名字空间的入口，详见（man namespaces）。 </p>
<h1 id="net目录"><a href="#net目录" class="headerlink" title="net目录"></a>net目录</h1><p>/proc/net，目录，网络伪文件系统相关。 </p>
<p>/proc/net/arp<br>/proc/net/dev<br>/proc/net/dev_mcast<br>/proc/net/igmp<br>/proc/net/rarp<br>/proc/net/raw<br>/proc/net/snmp<br>/proc/net/tcp<br>/proc/net/udp<br>/proc/net/unix<br>/proc/net/netfilter/nfnetlink_queue</p>
<h1 id="sys目录"><a href="#sys目录" class="headerlink" title="sys目录"></a>sys目录</h1><p>/proc/sys，目录，系统变量相关信息，详细如下。 </p>
<p>/proc/sys/abi<br>/proc/sys/debug<br>/proc/sys/dev<br>/proc/sys/fs<br>/proc/sys/fs/binfmt_misc<br>/proc/sys/fs/dentry-state<br>/proc/sys/fs/dir-notify-enable<br>/proc/sys/fs/dquot-max<br>/proc/sys/fs/dquot-nr<br>/proc/sys/fs/epoll<br>/proc/sys/fs/file-max<br>/proc/sys/fs/file-nr<br>/proc/sys/fs/inode-max<br>/proc/sys/fs/inode-nr<br>/proc/sys/fs/inode-state<br>/proc/sys/fs/inotify<br>/proc/sys/fs/lease-break-time<br>/proc/sys/fs/leases-enable<br>/proc/sys/fs/mqueue<br>/proc/sys/fs/nr_open<br>/proc/sys/fs/overflowgid<br>/proc/sys/fs/overflowuid<br>/proc/sys/fs/pipe-max-size<br>/proc/sys/fs/protected_hardlinks<br>/proc/sys/fs/protected_symlinks<br>/proc/sys/fs/suid_dumpable<br>/proc/sys/fs/super-max<br>/proc/sys/fs/super-nr<br>/proc/sys/kernel<br>/proc/sys/kernel/acct<br>/proc/sys/kernel/auto_msgmni<br>/proc/sys/kernel/cap_last_cap<br>/proc/sys/kernel/cap-bound<br>/proc/sys/kernel/core_pattern<br>/proc/sys/kernel/core_uses_pid<br>/proc/sys/kernel/ctrl-alt-del<br>/proc/sys/kernel/dmesg_restrict<br>/proc/sys/kernel/domainname<br>/proc/sys/kernel/hostname<br>/proc/sys/kernel/hotplug<br>/proc/sys/kernel/htab-reclaim<br>/proc/sys/kernel/kptr_restrict<br>/proc/sys/kernel/l2cr<br>/proc/sys/kernel/modprobe<br>/proc/sys/kernel/modules_disabled<br>/proc/sys/kernel/msgmax<br>/proc/sys/kernel/msgmni<br>/proc/sys/kernel/msgmnb<br>/proc/sys/kernel/ngroups_max<br>/proc/sys/kernel/ostype<br>/proc/sys/kernel/osrelease<br>/proc/sys/kernel/overflowgid<br>/proc/sys/kernel/overflowuid<br>/proc/sys/kernel/panic<br>/proc/sys/kernel/panic_on_oops<br>/proc/sys/kernel/pid_max<br>/proc/sys/kernel/powersave-nap<br>/proc/sys/kernel/printk<br>/proc/sys/kernel/pty<br>/proc/sys/kernel/pty/max<br>/proc/sys/kernel/pty/nr<br>/proc/sys/kernel/random<br>/proc/sys/kernel/random/uuid<br>/proc/sys/kernel/randomize_va_space<br>/proc/sys/kernel/real-root-dev<br>/proc/sys/kernel/reboot-cmd<br>/proc/sys/kernel/rtsig-max<br>/proc/sys/kernel/rtsig-nr<br>/proc/sys/kernel/sched_rr_timeslice_ms<br>/proc/sys/kernel/sched_rt_period_us<br>/proc/sys/kernel/sched_rt_period_us<br>/proc/sys/kernel/sem<br>/proc/sys/kernel/sg-big-buff<br>/proc/sys/kernel/shm_rmid_forced<br>/proc/sys/kernel/shmall<br>/proc/sys/kernel/shmmax<br>/proc/sys/kernel/shmmni<br>/proc/sys/kernel/sysctl_writes_strict<br>/proc/sys/kernel/sysrq<br>/proc/sys/kernel/version<br>/proc/sys/kernel/threads-max<br>/proc/sys/kernel/yama/ptrace_scope<br>/proc/sys/kernel/zero-paged<br>/proc/sys/net<br>/proc/sys/net/core/bpf_jit_enable<br>/proc/sys/net/core/somaxconn<br>/proc/sys/proc<br>/proc/sys/sunrpc<br>/proc/sys/vm<br>/proc/sys/vm/compact_memory<br>/proc/sys/vm/drop_caches<br>/proc/sys/vm/legacy_va_layout<br>/proc/sys/vm/memory_failure_early_kill<br>/proc/sys/vm/memory_failure_recovery<br>/proc/sys/vm/oom_dump_tasks<br>/proc/sys/vm/oom_kill_allocating_task<br>/proc/sys/vm/overcommit_kbytes<br>/proc/sys/vm/overcommit_memory<br>/proc/sys/vm/overcommit_ratio<br>/proc/sys/vm/panic_on_oom<br>/proc/sys/vm/swappiness</p>
<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><p>/proc/apm，文件，apm即Advanced Power Management，需要配置CONFIG_APM。<br>/proc/buddyinfo，文件，用于诊断内存碎片问题。<br>/proc/cmdline，文件，系统启动时传递给Linux内核的参数，如lilo、grub等boot管理模块。<br>/proc/config.gz，文件，内核编译配置选项，需要配置CONFIG_IKCONFIG_PROC。<br>/proc/crypto，文件，内核加密API提供的加密列表。<br>/proc/cpuinfo，文件，CPU和系统架构信息，lscpu命令使用这个文件。<br>/proc/devices，文件，设备相关信息。<br>/proc/diskstats，文件，磁盘状态。<br>/proc/dma，文件，dma即Direct Memory Access。<br>/proc/driver/rtc，文件，系统运行时配置。<br>/proc/execdomains，文件，执行域列表。<br>/proc/fb，文件，Frame Buffer信息，需要配置CONFIG_FB。<br>/proc/filesystems，文件，内核支持的文件系统类型（man filesystems）。<br>/proc/fs，目录，挂载的文件系统信息。<br>/proc/ide，目录，用于IDE接口。<br>/proc/interrupts，文件，每个CPU每个IO的中断信息。<br>/proc/iomem，文件，IO内存映射信息。<br>/proc/ioports，文件，IO端口信息。<br>/proc/kallsyms，文件，用于动态链接和和模块绑定的符号定义。<br>/proc/kcore，文件，系统中ELF格式的物理内存。<br>/proc/kmsg，文件，内核信息，dmsg命令使用这个文件。<br>/proc/kpagecount，文件，每个物理页帧映射的次数，需要配置CONFIG_PROC_PAGE_MONITOR。<br>/proc/kpageflags，文件，每个物理页帧的掩码，需要配置CONFIG_PROC_PAGE_MONITOR。<br>/proc/ksyms，文件，同kallsyms。<br>/proc/loadavg，文件，工作负荷。<br>/proc/locks，文件，当前文件锁的状态。<br>/proc/malloc，文件，需要配置CONFIG_DEBUG_MALLOC。<br>/proc/meminfo，文件，系统内存使用统计，free命令使用了这个文件。<br>/proc/modules，文件，系统加载的模块信息，相关命令为lsmod。<br>/proc/mounts，文件，链接到了/self/mounts。<br>/proc/mtrr，文件，Memory Type Range Registers。<br>/proc/partitions，文件，分区信息。<br>/proc/pci，文件，PCI接口设备。<br>/proc/profile，文件，用于readprofile命令作性能分析。<br>/proc/scsi，目录，SCSI接口设备。<br>/proc/scsi/scsi<br>/proc/scsi/[drivername]<br>/proc/self，目录，链接到了当前进程所在的目录。<br>/proc/slabinfo，文件，内核缓存信息，需要配置CONFIG_SLAB。<br>/proc/stat，文件，系统信息统计。<br>/proc/swaps，文件，使用的交换空间。<br>/proc/sysrq-trigger，文件，可写，触发系统调用。<br>/proc/sysvipc，目录，包括msg、sem、shm三个文件，为System V IPC对象。<br>/proc/thread-self，文件，链接到了当前进程下的task目录中的线程文件。<br>/proc/timer_list，文件，还在运行着的定时器列表。<br>/proc/timer_stats，文件，定时器状态。<br>/proc/tty，目录，tty设备相关。<br>/proc/uptime，文件，系统更新时间和进程空闲时间。<br>/proc/version，文件，内核版本信息。<br>/proc/vmstat，文件，内存统计信息，以键值对形式显示。<br>/proc/zoneinfo，文件，内存区块信息，用于分析虚拟内存的行为。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/ieearth/article/details/72849990" target="_blank" rel="noopener">https://blog.csdn.net/ieearth/article/details/72849990</a></p>
<p><a href="https://www.cnblogs.com/likui360/p/6181927.html" target="_blank" rel="noopener">https://www.cnblogs.com/likui360/p/6181927.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;继续深入学习Linux👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在Linux上，proc是一个伪文件系统，提供了访问内核数据的方法，一般挂载在“/proc”目录，其中的大部分内容是只读的，挂载（mount）信息可能为：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面列举“/proc”文件系统下的文件和目录。&lt;/p&gt;
&lt;h1 id=&quot;pid目录&quot;&gt;&lt;a href=&quot;#pid目录&quot; class=&quot;headerlink&quot; title=&quot;pid目录&quot;&gt;&lt;/a&gt;pid目录&lt;/h1&gt;&lt;p&gt;&lt;code&gt;/proc/[pid]&lt;/code&gt;目录，pid为进程的数字ID，是个数值，每个运行着的进程都有这么一个目录。&lt;/p&gt;
&lt;h2 id=&quot;cmdline&quot;&gt;&lt;a href=&quot;#cmdline&quot; class=&quot;headerlink&quot; title=&quot;cmdline&quot;&gt;&lt;/a&gt;cmdline&lt;/h2&gt;&lt;p&gt;&lt;code&gt;/proc/[pid]/cmdline&lt;/code&gt;是一个只读文件，包含进程的完整命令行信息。如果这个进程是zombie进程，则这个文件没有任何内容。举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;# ps -ef | grep 2948&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;root       2948      1  0 Nov05 ?        00:00:04 /usr/sbin/libvirtd --listen&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# cat /proc/2948/cmdline&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/usr/sbin/libvirtd--listen&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux" scheme="http://idiotsky.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://idiotsky.top/tags/linux/"/>
    
      <category term="proc" scheme="http://idiotsky.top/tags/proc/"/>
    
  </entry>
  
  <entry>
    <title>说说c的volatile</title>
    <link href="http://idiotsky.top/2018/11/27/c-volatile/"/>
    <id>http://idiotsky.top/2018/11/27/c-volatile/</id>
    <published>2018-11-27T13:07:59.000Z</published>
    <updated>2018-11-27T13:55:00.218Z</updated>
    
    <content type="html"><![CDATA[<h1 id="volatile-介绍"><a href="#volatile-介绍" class="headerlink" title="volatile 介绍"></a>volatile 介绍</h1><p>表示一个变量也许会被后台程序改变，关键字 volatile 是与 const 绝对对立的。它指示一个变量也许会被某种方式修改，这种方式按照正常程序流程分析是无法预知的（例如，一个变量也许会被一个中断服务程序所修改）。</p>
<p>变量如果加了 volatile 修饰，则会从内存重新装载内容，而不是直接从寄存器拷贝内容。 </p>
<a id="more"></a>
<h1 id="为什么使用-volatile"><a href="#为什么使用-volatile" class="headerlink" title="为什么使用 volatile"></a>为什么使用 volatile</h1><p>volatile 的作用 是作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值。</p>
<p>现在考虑一个问题，编译器如何对代码进行优化的？</p>
<p>我们看一个例子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例一</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> a = i; <span class="comment">//优化</span></span><br><span class="line">	<span class="keyword">int</span> b = i;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">"i = %d\n"</span>, b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">//编译优化、查看汇编</span><br><span class="line">gcc -O2 -S test.c </span><br><span class="line">cat test.s </span><br><span class="line"> </span><br><span class="line">	.file	&quot;test.c&quot;</span><br><span class="line">	.section	.rodata.str1.1,&quot;aMS&quot;,@progbits,1</span><br><span class="line">.LC0:</span><br><span class="line">	.string	&quot;i = %d\n&quot;</span><br><span class="line">	.section	.text.startup,&quot;ax&quot;,@progbits</span><br><span class="line">	.p2align 4,,15</span><br><span class="line">	.globl	main</span><br><span class="line">	.type	main, @function</span><br><span class="line">main:</span><br><span class="line">.LFB22:</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	pushl	%ebp</span><br><span class="line">	.cfi_def_cfa_offset 8</span><br><span class="line">	.cfi_offset 5, -8</span><br><span class="line">	movl	%esp, %ebp</span><br><span class="line">	.cfi_def_cfa_register 5</span><br><span class="line">	andl	$-16, %esp</span><br><span class="line">	subl	$16, %esp</span><br><span class="line">	movl	$10, 8(%esp)</span><br><span class="line">	movl	$.LC0, 4(%esp)</span><br><span class="line">	movl	$1, (%esp)</span><br><span class="line">	call	__printf_chk</span><br><span class="line">	xorl	%eax, %eax</span><br><span class="line">	leave</span><br><span class="line">	.cfi_restore 5</span><br><span class="line">	.cfi_def_cfa 4, 4</span><br><span class="line">	ret</span><br><span class="line">	.cfi_endproc</span><br><span class="line">.LFE22:</span><br><span class="line">	.size	main, .-main</span><br><span class="line">	.ident	&quot;GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3&quot;</span><br><span class="line">	.section	.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//示例二</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span> <span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">volatile</span> <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">int</span> a = i; <span class="comment">//未优化</span></span><br><span class="line">	<span class="keyword">int</span> b = i;</span><br><span class="line"> </span><br><span class="line">	<span class="built_in">printf</span> (<span class="string">"i = %d\n"</span>, b);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">//编译优化、查看汇编</span><br><span class="line">gcc -O2 -S test.c </span><br><span class="line">cat test.s </span><br><span class="line"> </span><br><span class="line">	.file	&quot;test.c&quot;</span><br><span class="line">	.section	.rodata.str1.1,&quot;aMS&quot;,@progbits,1</span><br><span class="line">.LC0:</span><br><span class="line">	.string	&quot;i = %d\n&quot;</span><br><span class="line">	.section	.text.startup,&quot;ax&quot;,@progbits</span><br><span class="line">	.p2align 4,,15</span><br><span class="line">	.globl	main</span><br><span class="line">	.type	main, @function</span><br><span class="line">main:</span><br><span class="line">.LFB22:</span><br><span class="line">	.cfi_startproc</span><br><span class="line">	pushl	%ebp</span><br><span class="line">	.cfi_def_cfa_offset 8</span><br><span class="line">	.cfi_offset 5, -8</span><br><span class="line">	movl	%esp, %ebp</span><br><span class="line">	.cfi_def_cfa_register 5</span><br><span class="line">	andl	$-16, %esp</span><br><span class="line">	subl	$32, %esp</span><br><span class="line">	movl	$10, 28(%esp)</span><br><span class="line">	movl	28(%esp), %eax</span><br><span class="line">	movl	28(%esp), %eax</span><br><span class="line">	movl	$.LC0, 4(%esp)</span><br><span class="line">	movl	$1, (%esp)</span><br><span class="line">	movl	%eax, 8(%esp)</span><br><span class="line">	call	__printf_chk</span><br><span class="line">	xorl	%eax, %eax</span><br><span class="line">	leave</span><br><span class="line">	.cfi_restore 5</span><br><span class="line">	.cfi_def_cfa 4, 4</span><br><span class="line">	ret</span><br><span class="line">	.cfi_endproc</span><br><span class="line">.LFE22:</span><br><span class="line">	.size	main, .-main</span><br><span class="line">	.ident	&quot;GCC: (Ubuntu/Linaro 4.6.3-1ubuntu5) 4.6.3&quot;</span><br><span class="line">	.section	.note.GNU-stack,&quot;&quot;,@progbits</span><br></pre></td></tr></table></figure>
<p>比较：</p>
<p><a href="http://idiotsky.top/images3/c-volatile-1.png"><img src="http://idiotsky.top/images3/c-volatile-1.png" alt=""></a></p>
<p>可以清楚的看到：使用 volatile 的代码编译未优化。</p>
<p>volatile 指出 i 是随时可能发生变化的，每次使用它的时候必须从 i的地址中读取，因而编译器生成的汇编代码会重新从i的地址读取数据放在 b 中。而优化做法是，由于编译器发现两次从 i读数据的代码之间的代码没有对 i 进行过操作，它会自动把上次读的数据放在 b 中。而不是重新从 i 里面读。</p>
<p>上面例子还没有看到影响，下面这个例子可以说明volatile的作用</p>
<p>一个中断服务子程序中会访问到的非自动变量（Non-automatic variables)</p>
<p>由于访问寄存器的速度要快过RAM，所以编译器一般都会作减少存取外部RAM的优化，例如：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">0</span>; <span class="comment">//i 为非自动变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     ...</span><br><span class="line">     <span class="keyword">while</span> (<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span> (i) dosomething();</span><br><span class="line">&#125;</span><br><span class="line">｝</span><br><span class="line"><span class="comment">/* Interrupt service routine. */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ISR_2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">      i=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>程序的本意是希望 ISR_2 中断产生时，在main函数中调用 dosomething 函数，但是，由于编译器判断在 main 函数里面没有修改过 i，因此可能只执行一次对从i到某寄存器的读操作，然后每次if判断都只使用这个寄存器里面的“i副本”，导致 dosomething 永远也不会被调用。如果将变量加上 volatile 修饰，则编译器保证对此变量的读写操作都不会被优化（肯定执行）。此例中i也应该如此说明。</p>
<p>接下来看看多线程的场景</p>
<p>多线程应用中被几个任务共享的变量</p>
<p>当两个线程都要用到某一个变量且该变量的值会被改变时，应该用 volatile 声明，该关键字的作用是防止优化编译器把变量从内存装入CPU寄存器中。如果变量被装入寄存器，那么两个线程有可能一个使用内存中的变量，一个使用寄存器中的变量，这会造成程序的错误执行。volatile的意思是让编译器每次操作该变量时一定要从内存中真正取出，而不是使用已经存在寄存器中的值，如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span>  BOOL  bStop  =  FALSE;  <span class="comment">//bStop  为共享全局变量</span></span><br><span class="line"><span class="comment">//在一个线程中：  </span></span><br><span class="line">  <span class="keyword">while</span>(  !bStop  )  &#123;  ...  &#125;  </span><br><span class="line">  bStop  =  FALSE;  </span><br><span class="line">  <span class="keyword">return</span>;    </span><br><span class="line"> </span><br><span class="line"><span class="comment">//在另外一个线程中，要终止上面的线程循环：  </span></span><br><span class="line">  bStop  =  TRUE;  </span><br><span class="line">  <span class="keyword">while</span>(  bStop  );</span><br></pre></td></tr></table></figure>
<p>等待上面的线程终止，如果bStop不使用volatile申明，那么这个循环将是一个死循环，因为bStop已经读取到了寄存器中，寄存器中bStop的值永远不会变成FALSE，加上volatile，程序在执行时，每次均从内存中读出bStop的值，就不会死循环了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>volatile 关键字是一种类型修饰符，用它声明的类型变量表示可以被某些编译器未知的因素更改。volatile 提醒编译器它后面所定义的变量随时都有可能改变，因此编译后的程序每次需要存储或读取这个变量的时候，都会直接从变量地址中读取数据。如果没有 volatile 关键字，则编译器可能优化读取和存储，可能暂时使用寄存器中的值，如果这个变量由别的程序更新了的话，将出现不一致的现象。所以遇到这个关键字声明的变量，编译器对访问该变量的代码就不再进行优化，从而可以提供对特殊地址的稳定访问。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_29350001/article/details/54024070" target="_blank" rel="noopener">https://blog.csdn.net/qq_29350001/article/details/54024070</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;volatile-介绍&quot;&gt;&lt;a href=&quot;#volatile-介绍&quot; class=&quot;headerlink&quot; title=&quot;volatile 介绍&quot;&gt;&lt;/a&gt;volatile 介绍&lt;/h1&gt;&lt;p&gt;表示一个变量也许会被后台程序改变，关键字 volatile 是与 const 绝对对立的。它指示一个变量也许会被某种方式修改，这种方式按照正常程序流程分析是无法预知的（例如，一个变量也许会被一个中断服务程序所修改）。&lt;/p&gt;
&lt;p&gt;变量如果加了 volatile 修饰，则会从内存重新装载内容，而不是直接从寄存器拷贝内容。 &lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="http://idiotsky.top/categories/c/"/>
    
    
      <category term="c" scheme="http://idiotsky.top/tags/c/"/>
    
      <category term="volatile" scheme="http://idiotsky.top/tags/volatile/"/>
    
  </entry>
  
  <entry>
    <title>使用iostat分析IO性能</title>
    <link href="http://idiotsky.top/2018/11/25/linux-iostat/"/>
    <id>http://idiotsky.top/2018/11/25/linux-iostat/</id>
    <published>2018-11-25T09:39:20.000Z</published>
    <updated>2018-11-25T12:31:35.258Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>iostat用于输出CPU和磁盘I/O相关的统计信息.👿</p>
</blockquote>
<h1 id="不加选项执行iostat"><a href="#不加选项执行iostat" class="headerlink" title="不加选项执行iostat"></a>不加选项执行iostat</h1><p>单独执行iostat，显示的结果为从系统开机到当前执行时刻的统计信息。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ iostat</span><br><span class="line">Linux 2.6.32-279.19.3.el6.ucloud.x86_64 (vm1)   06/11/2017  _x86_64_    (8 CPU)</span><br><span class="line"></span><br><span class="line">avg-cpu:  %user   %nice %system %iowait  %steal   %idle</span><br><span class="line">           0.08    0.00    0.06    0.00    0.00   99.86</span><br><span class="line"></span><br><span class="line">Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn</span><br><span class="line">vda               0.45         0.29         8.10    6634946  183036680</span><br><span class="line">vdb               0.12         3.11        30.55   70342034  689955328</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>以上输出中，包含三部分：</p>
<ul>
<li>第一行:最上面指示系统版本、主机名和当前日期</li>
<li>avg-cpu:总体cpu使用情况统计信息，对于多核cpu，这里为所有cpu的平均值</li>
<li>Device:各磁盘设备的IO统计信息</li>
</ul>
<p>avg-cpu中各列参数含义如下：</p>
<ul>
<li>%user:CPU在用户态执行进程的时间百分比。</li>
<li>%nice:CPU在用户态模式下，用于nice操作，所占用CPU总时间的百分比</li>
<li>%system:CPU处在内核态执行进程的时间百分比</li>
<li>%iowait:CPU用于等待I/O操作占用CPU总时间的百分比</li>
<li>%steal:管理程序(hypervisor)为另一个虚拟进程提供服务而等待虚拟CPU的百分比</li>
<li>%idle:CPU空闲时间百分比</li>
</ul>
<ol>
<li>若 %iowait 的值过高，表示硬盘存在I/O瓶颈 </li>
<li>若 %idle 的值高但系统响应慢时，有可能是CPU等待分配内存，此时应加大内存容量 </li>
<li>若 %idle 的值持续低于1，则系统的CPU处理能力相对较低，表明系统中最需要解决的资源是 CPU</li>
</ol>
<p>Device中各列参数含义如下：</p>
<ul>
<li>Device:设备名称</li>
<li>tps:每秒向磁盘设备请求数据的次数，包括读、写请求，为rtps与wtps的和。出于效率考虑，每一次IO下发后并不是立即处理请求，而是将请求合并(merge)，这里tps指请求合并后的请求计数。</li>
<li>Blk_read/s:Indicate the amount of data read from the device expressed in a number of blocks per second. Blocks are equivalent to sectors with kernels 2.4 and later and therefore have a size of 512 bytes. With older kernels, a block is of indeterminate size.</li>
<li>Blk_wrtn/s    Indicate the amount of data written to the device expressed in a number of blocks per second.</li>
<li>Blk_read:取样时间间隔内读扇区总数量</li>
<li>Blk_wrtn:取样时间间隔内写扇区总数量</li>
</ul>
<p>我们可以使用-c选项单独显示avg-cpu部分的结果，使用-d选项单独显示Device部分的信息。</p>
<h1 id="指定采样时间间隔与采样次数"><a href="#指定采样时间间隔与采样次数" class="headerlink" title="指定采样时间间隔与采样次数"></a>指定采样时间间隔与采样次数</h1><p>以”iostat interval [count] ”形式指定iostat命令的采样间隔和采样次数：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ iostat -d 2 3</span><br><span class="line">Linux 2.6.32-279.19.3.el6.ucloud.x86_64 (vm1)   06/12/2017  _x86_64_    (8 CPU)</span><br><span class="line"></span><br><span class="line">Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn</span><br><span class="line">vda               0.45         0.29         8.10    6634946  183051408</span><br><span class="line">vdb               0.12         3.11        30.55   70342034  689955328</span><br><span class="line"></span><br><span class="line">Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn</span><br><span class="line">vda               0.00         0.00         0.00          0          0</span><br><span class="line">vdb               0.00         0.00         0.00          0          0</span><br><span class="line"></span><br><span class="line">Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn</span><br><span class="line">vda               1.50         0.00        12.00          0         24</span><br><span class="line">vdb               0.00         0.00         0.00          0          0</span><br></pre></td></tr></table></figure>
<p>以上命令输出Device的信息，采样时间为1秒，采样2次，若不指定采样次数，则iostat会一直输出采样信息，直到按”ctrl+c”退出命令。注意，第1次采样信息与单独执行iostat的效果一样，为从系统开机到当前执行时刻的统计信息。</p>
<h1 id="以kB为单位显示读写信息-k选项-以mB为单位显示读写信息-m选项"><a href="#以kB为单位显示读写信息-k选项-以mB为单位显示读写信息-m选项" class="headerlink" title="以kB为单位显示读写信息(-k选项)/以mB为单位显示读写信息(-m选项)"></a>以kB为单位显示读写信息(-k选项)/以mB为单位显示读写信息(-m选项)</h1><p>我们可以使用-k选项，指定iostat的部分输出结果以kB为单位，而不是以块数为单位：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ iostat -d -k</span><br><span class="line">Linux 2.6.32-279.19.3.el6.ucloud.x86_64 (vm1)   06/12/2017  _x86_64_    (8 CPU)</span><br><span class="line"></span><br><span class="line">Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtn</span><br><span class="line">vda               0.45         0.15         4.05    3317473   91525980</span><br><span class="line">vdb               0.12         1.56        15.27   35171017  344977664</span><br></pre></td></tr></table></figure>
<p>以上输出中，kB_read/s、kB_wrtn/s、kB_read和kB_wrtn的值均以kB为单位，相比以块数为单位，这里的值为原值的一半(1kB=512bytes*2)</p>
<h1 id="更详细的io统计信息-x选项"><a href="#更详细的io统计信息-x选项" class="headerlink" title="更详细的io统计信息(-x选项)"></a>更详细的io统计信息(-x选项)</h1><p>为显示更详细的io设备统计信息，我们可以使用-x选项，在分析io瓶颈时，一般都会开启-x选项：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ iostat -x -k -d 1</span><br><span class="line">Linux 2.6.32-279.19.16.el6.ucloud.x86_64 (yg-uhost724)  06/12/2017  _x86_64_    (24 CPU)</span><br><span class="line"></span><br><span class="line">Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await  svctm  %util</span><br><span class="line">sda               0.00  9915.00    1.00   90.00     4.00 34360.00   755.25    11.79  120.57   6.33  57.60</span><br></pre></td></tr></table></figure>
<p>以上各列的含义如下：</p>
<ul>
<li>rrqm/s:每秒对该设备的读请求被合并次数，文件系统会对读取同块(block)的请求进行合并</li>
<li>wrqm/s:每秒对该设备的写请求被合并次数</li>
<li>r/s:每秒完成的读次数</li>
<li>w/s:每秒完成的写次数</li>
<li>rkB/s:每秒读数据量(kB为单位)</li>
<li>wkB/s:每秒写数据量(kB为单位)</li>
<li>avgrq-sz:平均每次IO操作的数据量(扇区数为单位)</li>
<li>avgqu-sz:平均等待处理的IO请求队列长度</li>
<li>await:平均每次IO请求等待时间(包括等待时间和处理时间，毫秒为单位)</li>
<li>svctm:平均每次IO请求的处理时间(毫秒为单位)</li>
<li>%util:采用周期内用于IO操作的时间比率，即IO队列非空的时间比率</li>
</ul>
<p>对于以上示例输出，我们可以获取到以下信息： </p>
<ul>
<li>每秒向磁盘上写30M左右数据(wkB/s值) </li>
<li>每秒有91次IO操作(r/s+w/s)，其中以写操作为主体 </li>
<li>平均每次IO请求等待时间为120.57毫秒，处理时间为6.33毫秒 </li>
<li>等待处理的IO请求队列中，平均有11.79个请求驻留</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;iostat用于输出CPU和磁盘I/O相关的统计信息.👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;不加选项执行iostat&quot;&gt;&lt;a href=&quot;#不加选项执行iostat&quot; class=&quot;headerlink&quot; title=&quot;不加选项执行iostat&quot;&gt;&lt;/a&gt;不加选项执行iostat&lt;/h1&gt;&lt;p&gt;单独执行iostat，显示的结果为从系统开机到当前执行时刻的统计信息。&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ iostat&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Linux 2.6.32-279.19.3.el6.ucloud.x86_64 (vm1)   06/11/2017  _x86_64_    (8 CPU)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;avg-cpu:  %user   %nice %system %iowait  %steal   %idle&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           0.08    0.00    0.06    0.00    0.00   99.86&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Device:            tps   Blk_read/s   Blk_wrtn/s   Blk_read   Blk_wrtn&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vda               0.45         0.29         8.10    6634946  183036680&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;vdb               0.12         3.11        30.55   70342034  689955328&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="linux命令" scheme="http://idiotsky.top/categories/linux%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="linux" scheme="http://idiotsky.top/tags/linux/"/>
    
      <category term="iostat" scheme="http://idiotsky.top/tags/iostat/"/>
    
  </entry>
  
  <entry>
    <title>硬盘基本知识</title>
    <link href="http://idiotsky.top/2018/11/23/harddisk-knowledge/"/>
    <id>http://idiotsky.top/2018/11/23/harddisk-knowledge/</id>
    <published>2018-11-23T15:21:31.000Z</published>
    <updated>2018-11-23T15:35:22.722Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>mark吧，没什么可写了👿</p>
</blockquote>
<h1 id="盘片-片面-和-磁头"><a href="#盘片-片面-和-磁头" class="headerlink" title="盘片 片面 和 磁头"></a>盘片 片面 和 磁头</h1><p>硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个读/写磁头。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。</p>
<p>如下图：</p>
<p><a href="http://idiotsky.top/images3/harddisk-1.png"><img src="http://idiotsky.top/images3/harddisk-1.png" alt=""></a></p>
<a id="more"></a>
<h1 id="扇区-和-磁道"><a href="#扇区-和-磁道" class="headerlink" title="扇区 和 磁道"></a>扇区 和 磁道</h1><p>下图显示的是一个盘面，盘面中一圈圈灰色同心圆为一条条磁道，从圆心向外画直线，可以将磁道划分为若干个弧段，每个磁道上一个弧段被称之为一个扇区（图践绿色部分）。扇区是磁盘的最小组成单元，通常是512字节。（由于不断提高磁盘的大小，部分厂商设定每个扇区的大小是4096字节）</p>
<p><a href="http://idiotsky.top/images3/harddisk-2.png"><img src="http://idiotsky.top/images3/harddisk-2.png" alt=""></a></p>
<h1 id="磁头-和-柱面"><a href="#磁头-和-柱面" class="headerlink" title="磁头 和 柱面"></a>磁头 和 柱面</h1><p>硬盘通常由重叠的一组盘片构成，每个盘面都被划分为数目相等的磁道，并从外缘的“0”开始编号，具有相同编号的磁道形成一个圆柱，称之为磁盘的柱面。磁盘的柱面数与一个盘面上的磁道数是相等的。由于每个盘面都有自己的磁头，因此，盘面数等于总的磁头数。 如下图</p>
<p><a href="http://idiotsky.top/images3/harddisk-3.png"><img src="http://idiotsky.top/images3/harddisk-3.png" alt=""></a></p>
<h1 id="磁盘容量计算"><a href="#磁盘容量计算" class="headerlink" title="磁盘容量计算"></a>磁盘容量计算</h1><p>存储容量 ＝ 磁头数 × 磁道(柱面)数 × 每道扇区数 × 每扇区字节数</p>
<p>图3中磁盘是一个 3个圆盘6个磁头，7个柱面（每个盘片7个磁道） 的磁盘，图3中每条磁道有12个扇区，所以此磁盘的容量为：</p>
<p>存储容量 6 <em> 7 </em> 12 * 512 = 258048</p>
<blockquote>
<p>每个磁道的扇区数一样是说的老的硬盘，外圈的密度小，内圈的密度大，每圈可存储的数据量是一样的。新的硬盘数据的密度都一致，这样磁道的周长越长，扇区就越多，存储的数据量就越大。</p>
</blockquote>
<h1 id="磁盘读取响应时间"><a href="#磁盘读取响应时间" class="headerlink" title="磁盘读取响应时间"></a>磁盘读取响应时间</h1><ol>
<li>寻道时间：磁头从开始移动到数据所在磁道所需要的时间，寻道时间越短，I/O操作越快，目前磁盘的平均寻道时间一般在3－15ms，一般都在10ms左右。</li>
<li>旋转延迟：盘片旋转将请求数据所在扇区移至读写磁头下方所需要的时间，旋转延迟取决于磁盘转速。普通硬盘一般都是7200rpm，慢的5400rpm。</li>
<li>数据传输时间：完成传输所请求的数据所需要的时间。</li>
</ol>
<p>小结一下：从上面的指标来看、其实最重要的、或者说、我们最关心的应该只有两个：寻道时间；旋转延迟。</p>
<blockquote>
<p>读写一次磁盘信息所需的时间可分解为：寻道时间、延迟时间、传输时间。为提高磁盘传输效率，软件应着重考虑减少寻道时间和延迟时间。</p>
</blockquote>
<h1 id="块-簇"><a href="#块-簇" class="headerlink" title="块/簇"></a>块/簇</h1><p>概述</p>
<p>磁盘块/簇（虚拟出来的）。 块是操作系统中最小的逻辑存储单位。操作系统与磁盘打交道的最小单位是磁盘块。<br>通俗的来讲，在Windows下如NTFS等文件系统中叫做簇；在Linux下如Ext4等文件系统中叫做块（block）。每个簇或者块可以包括2、4、8、16、32、64…2的n次方个扇区。</p>
<p>为什么存在磁盘块？</p>
<p>读取方便：由于扇区的数量比较小，数目众多在寻址时比较困难，所以操作系统就将相邻的扇区组合在一起，形成一个块，再对块进行整体的操作。</p>
<p>分离对底层的依赖：操作系统忽略对底层物理存储结构的设计。通过虚拟出来磁盘块的概念，在系统中认为块是最小的单位。</p>
<h1 id="page"><a href="#page" class="headerlink" title="page"></a>page</h1><p>操作系统经常与内存和硬盘这两种存储设备进行通信，类似于“块”的概念，都需要一种虚拟的基本单位。所以，与内存操作，是虚拟一个页的概念来作为最小单位。与硬盘打交道，就是以块为最小单位。</p>
<p>#扇区、块/簇、page的关系</p>
<p>扇区： 硬盘的最小读写单元<br>块/簇： 是操作系统针对硬盘读写的最小单元<br>page： 是内存与操作系统之间操作的最小单元。</p>
<p>扇区 &lt;= 块/簇 &lt;= page</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.jianshu.com/p/9aa66f634ed6" target="_blank" rel="noopener">https://www.jianshu.com/p/9aa66f634ed6</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;mark吧，没什么可写了👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;盘片-片面-和-磁头&quot;&gt;&lt;a href=&quot;#盘片-片面-和-磁头&quot; class=&quot;headerlink&quot; title=&quot;盘片 片面 和 磁头&quot;&gt;&lt;/a&gt;盘片 片面 和 磁头&lt;/h1&gt;&lt;p&gt;硬盘中一般会有多个盘片组成，每个盘片包含两个面，每个盘面都对应地有一个读/写磁头。受到硬盘整体体积和生产成本的限制，盘片数量都受到限制，一般都在5片以内。盘片的编号自下向上从0开始，如最下边的盘片有0面和1面，再上一个盘片就编号为2面和3面。&lt;/p&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://idiotsky.top/images3/harddisk-1.png&quot;&gt;&lt;img src=&quot;http://idiotsky.top/images3/harddisk-1.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="linux" scheme="http://idiotsky.top/categories/linux/"/>
    
    
      <category term="linux" scheme="http://idiotsky.top/tags/linux/"/>
    
      <category term="硬盘" scheme="http://idiotsky.top/tags/%E7%A1%AC%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>熔断器概念</title>
    <link href="http://idiotsky.top/2018/11/06/CircuitBreaker/"/>
    <id>http://idiotsky.top/2018/11/06/CircuitBreaker/</id>
    <published>2018-11-06T14:41:21.000Z</published>
    <updated>2018-11-25T12:42:22.648Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>分布式系统中经常会出现某个基础服务不可用造成整个系统不可用的情况, 这种现象被称为服务雪崩效应. 为了应对服务雪崩, 一种常见的做法是手动服务降级. 而Hystrix的出现,给我们提供了另一种选择.</p>
<h1 id="服务雪崩效应的定义"><a href="#服务雪崩效应的定义" class="headerlink" title="服务雪崩效应的定义"></a>服务雪崩效应的定义</h1><p>服务雪崩效应是一种因 服务提供者 的不可用导致 服务调用者 的不可用,并将不可用 逐渐放大 的过程.如果所示:</p>
<p><a href="http://idiotsky.top/images3/CircuitBreaker-1.png"><img src="http://idiotsky.top/images3/CircuitBreaker-1.png" alt=""></a></p>
<p>上图中, A为服务提供者, B为A的服务调用者, C和D是B的服务调用者. 当A的不可用,引起B的不可用,并将不可用逐渐放大C和D时, 服务雪崩就形成了.</p>
<a id="more"></a>
<h1 id="服务雪崩效应形成的原因"><a href="#服务雪崩效应形成的原因" class="headerlink" title="服务雪崩效应形成的原因"></a>服务雪崩效应形成的原因</h1><p>我把服务雪崩的参与者简化为 服务提供者 和 服务调用者, 并将服务雪崩产生的过程分为以下三个阶段来分析形成的原因:</p>
<ol>
<li>服务提供者不可用</li>
<li>重试加大流量</li>
<li>服务调用者不可用</li>
</ol>
<p><a href="http://idiotsky.top/images3/CircuitBreaker-2.png"><img src="http://idiotsky.top/images3/CircuitBreaker-2.png" alt=""></a></p>
<p>服务雪崩的每个阶段都可能由不同的原因造成, 比如造成<strong>服务不可用</strong>的原因有:</p>
<ul>
<li>硬件故障</li>
<li>程序Bug</li>
<li>缓存击穿</li>
<li>用户大量请求</li>
</ul>
<p>硬件故障可能为硬件损坏造成的服务器主机宕机, 网络硬件故障造成的服务提供者的不可访问.<br>缓存击穿一般发生在缓存应用重启, 所有缓存被清空时,以及短时间内大量缓存失效时. 大量的缓存不命中, 使请求直击后端,造成服务提供者超负荷运行,引起服务不可用.<br>在秒杀和大促开始前,如果准备不充分,用户发起大量请求也会造成服务提供者的不可用.</p>
<p>而形成<strong>重试加大流量</strong>的原因有:</p>
<ul>
<li>用户重试</li>
<li>代码逻辑重试</li>
</ul>
<p>在服务提供者不可用后, 用户由于忍受不了界面上长时间的等待,而不断刷新页面甚至提交表单.<br>服务调用端的会存在大量服务异常后的重试逻辑.<br>这些重试都会进一步加大请求流量.</p>
<p>最后, <strong>服务调用者不可用</strong>产生的主要原因是:</p>
<ul>
<li>同步等待造成的资源耗尽</li>
</ul>
<p>当服务调用者使用<strong>同步调用</strong>时, 会产生大量的等待线程占用系统资源. 一旦线程资源被耗尽,服务调用者提供的服务也将处于不可用状态, 于是服务雪崩效应产生了.</p>
<h1 id="服务雪崩的应对策略"><a href="#服务雪崩的应对策略" class="headerlink" title="服务雪崩的应对策略"></a>服务雪崩的应对策略</h1><p>针对造成服务雪崩的不同原因, 可以使用不同的应对策略:</p>
<ol>
<li>流量控制</li>
<li>改进缓存模式</li>
<li>服务自动扩容</li>
<li>服务调用者降级服务</li>
</ol>
<p><strong>流量控制</strong>的具体措施包括:</p>
<ul>
<li>网关限流</li>
<li>用户交互限流</li>
<li>关闭重试</li>
</ul>
<p>因为Nginx的高性能, 目前一线互联网公司大量采用Nginx+Lua的网关进行流量控制, 由此而来的OpenResty也越来越热门.</p>
<p>用户交互限流的具体措施有: 1. 采用加载动画,提高用户的忍耐等待时间. 2. 提交按钮添加强制等待时间机制.</p>
<p><strong>改进缓存模式</strong>的措施包括:</p>
<ul>
<li>缓存预加载</li>
<li>同步改为异步刷新</li>
</ul>
<p><strong>服务自动扩容</strong>的措施主要有:</p>
<ul>
<li>AWS的auto scaling</li>
</ul>
<p><strong>服务调用者降级服务</strong>的措施包括:</p>
<ul>
<li>资源隔离</li>
<li>对依赖服务进行分类</li>
<li>不可用服务的调用快速失败</li>
</ul>
<p>资源隔离主要是对调用服务的线程池进行隔离.</p>
<p>我们根据具体业务,将依赖服务分为: 强依赖和若依赖. 强依赖服务不可用会导致当前业务中止,而弱依赖服务的不可用不会导致当前业务的中止.</p>
<p>不可用服务的调用快速失败一般通过<strong>超时机制</strong>, <strong>熔断器</strong>和熔断后的<strong>降级方法</strong>来实现.</p>
<h1 id="使用Hystrix预防服务雪崩"><a href="#使用Hystrix预防服务雪崩" class="headerlink" title="使用Hystrix预防服务雪崩"></a>使用Hystrix预防服务雪崩</h1><h2 id="熔断器模式"><a href="#熔断器模式" class="headerlink" title="熔断器模式"></a>熔断器模式</h2><p>熔断器模式定义了熔断器开关相互转换的逻辑:</p>
<p><a href="http://idiotsky.top/images3/CircuitBreaker-3.png"><img src="http://idiotsky.top/images3/CircuitBreaker-3.png" alt=""></a></p>
<p>服务的健康状况 = 请求失败数 / 请求总数.<br>熔断器开关由关闭到打开的状态转换是通过当前服务健康状况和设定阈值比较决定的.</p>
<ol>
<li>当熔断器开关关闭时, 请求被允许通过熔断器. 如果当前健康状况高于设定阈值, 开关继续保持关闭. 如果当前健康状况低于设定阈值, 开关则切换为打开状态.</li>
<li>当熔断器开关打开时, 请求被禁止通过.</li>
<li>当熔断器开关处于打开状态, 经过一段时间后, 熔断器会自动进入半开状态, 这时熔断器只允许一个请求通过. 当该请求调用成功时, 熔断器恢复到关闭状态. 若该请求失败, 熔断器继续保持打开状态, 接下来的请求被禁止通过.</li>
</ol>
<p>熔断器的开关能保证服务调用者在调用异常服务时, 快速返回结果, 避免大量的同步等待. 并且熔断器能在一段时间后继续侦测请求执行结果, 提供恢复服务调用的可能.</p>
<blockquote>
<p>to be continue…</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://segmentfault.com/a/1190000005988895" target="_blank" rel="noopener">https://segmentfault.com/a/1190000005988895</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;分布式系统中经常会出现某个基础服务不可用造成整个系统不可用的情况, 这种现象被称为服务雪崩效应. 为了应对服务雪崩, 一种常见的做法是手动服务降级. 而Hystrix的出现,给我们提供了另一种选择.&lt;/p&gt;
&lt;h1 id=&quot;服务雪崩效应的定义&quot;&gt;&lt;a href=&quot;#服务雪崩效应的定义&quot; class=&quot;headerlink&quot; title=&quot;服务雪崩效应的定义&quot;&gt;&lt;/a&gt;服务雪崩效应的定义&lt;/h1&gt;&lt;p&gt;服务雪崩效应是一种因 服务提供者 的不可用导致 服务调用者 的不可用,并将不可用 逐渐放大 的过程.如果所示:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://idiotsky.top/images3/CircuitBreaker-1.png&quot;&gt;&lt;img src=&quot;http://idiotsky.top/images3/CircuitBreaker-1.png&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上图中, A为服务提供者, B为A的服务调用者, C和D是B的服务调用者. 当A的不可用,引起B的不可用,并将不可用逐渐放大C和D时, 服务雪崩就形成了.&lt;/p&gt;
    
    </summary>
    
      <category term="高可用" scheme="http://idiotsky.top/categories/%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
    
    
      <category term="熔断器" scheme="http://idiotsky.top/tags/%E7%86%94%E6%96%AD%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>docker总结</title>
    <link href="http://idiotsky.top/2018/10/24/docker-summary/"/>
    <id>http://idiotsky.top/2018/10/24/docker-summary/</id>
    <published>2018-10-24T14:50:22.000Z</published>
    <updated>2018-11-10T04:34:41.277Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>不想分几章了，所以很长很长👿</p>
</blockquote>
<h1 id="docker-容器的状态机"><a href="#docker-容器的状态机" class="headerlink" title="docker 容器的状态机"></a>docker 容器的状态机</h1><p><a href="http://idiotsky.top/images3/docker-summary-1.jpg"><img src="http://idiotsky.top/images3/docker-summary-1.jpg" alt=""></a></p>
<p>一个容器在某个时刻可能处于以下几种状态之一：</p>
<ul>
<li>created：已经被创建 （使用 docker ps -a 命令可以列出）但是还没有被启动 （使用 docker ps 命令还无法列出）</li>
<li>running：运行中</li>
<li>paused：容器的进程被暂停了</li>
<li>restarting：容器的进程正在重启过程中</li>
<li>exited：上图中的 stopped 状态，表示容器之前运行过但是现在处于停止状态（要区别于 created 状态，它是指一个新创出的尚未运行过的容器）。可以通过 start 命令使其重新进入 running 状态</li>
<li>destroyed：容器被删除了，再也不存在了</li>
</ul>
<a id="more"></a>
<h1 id="Docker-命令概述"><a href="#Docker-命令概述" class="headerlink" title="Docker 命令概述"></a>Docker 命令概述</h1><p>我们可以把Docker 的命令大概地分类如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">镜像操作：</span><br><span class="line">    build     Build an image from a Dockerfile</span><br><span class="line">    commit    Create a new image from a container&apos;s changes</span><br><span class="line">    images    List images</span><br><span class="line">    load      Load an image from a tar archive or STDIN</span><br><span class="line">    pull      Pull an image or a repository from a registry</span><br><span class="line">    push      Push an image or a repository to a registry</span><br><span class="line">    rmi       Remove one or more images</span><br><span class="line">    search    Search the Docker Hub for images</span><br><span class="line">    tag       Tag an image into a repository</span><br><span class="line">    save      Save one or more images to a tar archive (streamed to STDOUT by default)</span><br><span class="line">    history   显示某镜像的历史</span><br><span class="line">    inspect   获取镜像的详细信息</span><br><span class="line"></span><br><span class="line">    容器及其中应用的生命周期操作：</span><br><span class="line">    create    Create a new container （创建一个容器）        </span><br><span class="line">    kill      Kill one or more running containers</span><br><span class="line">    inspect   Return low-level information on a container, image or task</span><br><span class="line">    pause     Pause all processes within one or more containers</span><br><span class="line">    ps        List containers</span><br><span class="line">    rm        Remove one or more containers （删除一个或者多个容器）</span><br><span class="line">    rename    Rename a container</span><br><span class="line">    restart   Restart a container</span><br><span class="line">    run       Run a command in a new container （创建并启动一个容器）</span><br><span class="line">    start     Start one or more stopped containers （启动一个处于停止状态的容器）</span><br><span class="line">    stats     Display a live stream of container(s) resource usage statistics （显示容器实时的资源消耗信息）</span><br><span class="line">    stop      Stop one or more running containers （停止一个处于运行状态的容器）</span><br><span class="line">    top       Display the running processes of a container</span><br><span class="line">    unpause   Unpause all processes within one or more containers</span><br><span class="line">    update    Update configuration of one or more containers</span><br><span class="line">    wait      Block until a container stops, then print its exit code</span><br><span class="line">    attach    Attach to a running container</span><br><span class="line">    exec      Run a command in a running container</span><br><span class="line">    port      List port mappings or a specific mapping for the container</span><br><span class="line">    logs      获取容器的日志    </span><br><span class="line">    </span><br><span class="line">    容器文件系统操作：</span><br><span class="line">    cp        Copy files/folders between a container and the local filesystem</span><br><span class="line">    diff      Inspect changes on a container&apos;s filesystem</span><br><span class="line">    export    Export a container&apos;s filesystem as a tar archive</span><br><span class="line">    import    Import the contents from a tarball to create a filesystem image</span><br><span class="line">    </span><br><span class="line">    Docker registry 操作：</span><br><span class="line">    login     Log in to a Docker registry.</span><br><span class="line">    logout    Log out from a Docker registry.</span><br><span class="line">    </span><br><span class="line">    Volume 操作</span><br><span class="line">    volume    Manage Docker volumes</span><br><span class="line">    </span><br><span class="line">    网络操作</span><br><span class="line">    network   Manage Docker networks</span><br><span class="line">    </span><br><span class="line">    Swarm 相关操作</span><br><span class="line">    swarm     Manage Docker Swarm</span><br><span class="line">    service   Manage Docker services</span><br><span class="line">    node      Manage Docker Swarm nodes       </span><br><span class="line">    </span><br><span class="line">    系统操作：    </span><br><span class="line">    version   Show the Docker version information</span><br><span class="line">    events    Get real time events from the server  (持续返回docker 事件)</span><br><span class="line">    info      Display system-wide information （显示Docker 主机系统范围内的信息）</span><br></pre></td></tr></table></figure>
<h1 id="Doker-平台的基本构成"><a href="#Doker-平台的基本构成" class="headerlink" title="Doker 平台的基本构成"></a>Doker 平台的基本构成</h1><p><a href="http://idiotsky.top/images3/docker-summary-2.jpg"><img src="http://idiotsky.top/images3/docker-summary-2.jpg" alt=""></a></p>
<p>Docker 平台基本上由三部分组成：</p>
<ul>
<li>客户端：用户使用 Docker 提供的工具（CLI 以及 API 等）来构建，上传镜像并发布命令来创建和启动容器</li>
<li>Docker 主机：从 Docker registry 上下载镜像并启动容器</li>
<li>Docker registry：Docker 镜像仓库，用于保存镜像，并提供镜像上传和下载</li>
</ul>
<h1 id="Host-OS-VS-Guest-OS-VS-Base-image"><a href="#Host-OS-VS-Guest-OS-VS-Base-image" class="headerlink" title="Host OS VS Guest OS VS Base image"></a>Host OS VS Guest OS VS Base image</h1><p>比如，一台主机安装的是 Centos 操作系统，现在在上面跑一个 Ubuntu 容器。此时，Host OS 是 Centos，Guest OS 是 Ubuntu。Guest OS 也被成为容器的 Base Image。</p>
<p><a href="http://idiotsky.top/images3/docker-summary-9.png"><img src="http://idiotsky.top/images3/docker-summary-9.png" alt=""></a></p>
<p>一些说明：</p>
<ul>
<li>关于 linux 内核和版本：所有 Linux 发行版都采用相同的 Linux 内核（kernel），然后所有发行版对内核都有轻微改动。这些改动都会上传回 linux 社区，并被合并。</li>
<li>关于Linux 容器环境：因为所有Linux发行版都包含同一个linux 内核（有轻微修改），以及不同的自己的软件，因此，会很容易地将某个 userland 软件安装在linux 内核上，来模拟不同的发行版环境。比如说，在 Ubuntu 上运行 Centos 容器，这意味着从 Centos 获取 userland 软件，运行在 Ubuntu 内核上。因此，这就像在同一个操作系统（linux 内核）上运行不同的 userland 软件（发行版的）。这就是为什么Docker 不支持在 Linux 主机上运行 FreeBSD 或者windows 容器。</li>
</ul>
<p>可见，容器的 base image 并不真的是 base OS。Base image 会远远比 base OS 更轻量。它只安装发行版特殊的部分（userland 软件）。</p>
<p><a href="http://idiotsky.top/images3/docker-summary-10.png"><img src="http://idiotsky.top/images3/docker-summary-10.png" alt=""></a></p>
<p>那为什么还需要 base image 呢？这是因为，docker 容器文件系统与 host OS 是隔离的。容器镜像中的应用软件无法看到主机文件系统，除非将主机文件系统挂载为容器的卷。因此，可以想像一下，你容器中的应用依赖于各种操作系统库，因此我们不得不将这些库打包到镜像之中。另外，base image 会让我们使用到各个发行版的包管理系统，比如 yum 和 apt-get。而且，各个linux 发行版的 base image 也不是普通的发行版，而是一个简化了的版本。而且，base image 并不带有 linux 内核，因为容器会使用主机的内核。</p>
<p>因此，需要注重理解 image 和 OS 这两个概念。之所以成为 base image，而不是 base OS，是因为 base image 中并不包括完整的 OS。而这一点，是容器与虚拟机之前的本质区别之一。那就是，容器并没有虚拟化，而是共享主机上的linux 内核。</p>
<h1 id="Docker-镜像分层-COW-和-镜像大小（size）"><a href="#Docker-镜像分层-COW-和-镜像大小（size）" class="headerlink" title="Docker 镜像分层,COW 和 镜像大小（size）"></a>Docker 镜像分层,COW 和 镜像大小（size）</h1><h2 id="镜像分层和容器层"><a href="#镜像分层和容器层" class="headerlink" title="镜像分层和容器层"></a>镜像分层和容器层</h2><p>一个 Docker 镜像是基于基础镜像的多层叠加，最终构成和容器的 rootfs （根文件系统）。当 Docker 创建一个容器时，它会在基础镜像的容器层之上添加一层新的薄薄的可写容器层。接下来，所有对容器的变化，比如写新的文件，修改已有文件和删除文件，都只会作用在这个容器层之中。因此，通过不拷贝完整的 rootfs，Docker 减少了容器所占用的空间，以及减少了容器启动所需时间。</p>
<p><a href="http://idiotsky.top/images3/docker-summary-3.jpg"><img src="http://idiotsky.top/images3/docker-summary-3.jpg" alt=""></a></p>
<h2 id="COW-和镜像大小"><a href="#COW-和镜像大小" class="headerlink" title="COW 和镜像大小"></a>COW 和镜像大小</h2><p>COW，copy-on-write 技术，一方面带来了容器启动的快捷，另一方也造成了容器镜像大小的增加。每一次 RUN 命令都会在镜像上增加一层，每一层都会占用磁盘空间。举个例子，在 Ubuntu 14.04 基础镜像中运行 RUN apt-get upgrade 会在保留基础层的同时再创建一个新层来放所有新的文件，而不是修改老的文件，因此，新的镜像大小会超过直接在老的文件系统上做更新时的文件大小。因此，为了减少镜像大小起见，所有文件相关的操作，比如删除，释放和移动等，都需要尽可能地放在一个 RUN 指令中进行。</p>
<h2 id="使用容器需要避免的一些做法"><a href="#使用容器需要避免的一些做法" class="headerlink" title="使用容器需要避免的一些做法"></a>使用容器需要避免的一些做法</h2><p>这篇文章 <a href="http://developers.redhat.com/blog/2016/02/24/10-things-to-avoid-in-docker-containers/" target="_blank" rel="noopener">10 things to avoid in docker containers</a> 列举了一些在使用容器时需要避免的做法，包括：</p>
<ul>
<li>不要在容器中保存数据（Don’t store data in containers）</li>
<li>将应用打包到镜像再部署而不是更新到已有容器（Don’t ship your application in two pieces）</li>
<li>不要产生过大的镜像 （Don’t create large images）</li>
<li>不要使用单层镜像 （Don’t use a single layer image）</li>
<li>不要从运行着的容器上产生镜像 （Don’t create images from running containers ）</li>
<li>不要只是使用 “latest”标签 （Don’t use only the “latest” tag）</li>
<li>不要在容器内运行超过一个的进程 （Don’t run more than one process in a single container ）</li>
<li>不要在容器内保存 credentials，而是要从外面通过环境变量传入 （ Don’t store credentials in the image. Use environment variables）</li>
<li>不要使用 root 用户跑容器进程（Don’t run processes as a root user ）</li>
<li>不要依赖于IP地址，而是要从外面通过环境变量传入 （Don’t rely on IP addresses ）</li>
</ul>
<h1 id="Linux-namespace-的概念"><a href="#Linux-namespace-的概念" class="headerlink" title="Linux namespace 的概念"></a>Linux namespace 的概念</h1><p>Linux 内核从版本 2.4.19 开始陆续引入了 namespace 的概念。其目的是将某个特定的全局系统资源（global system resource）通过抽象方法使得namespace 中的进程看起来拥有它们自己的隔离的全局系统资源实例（The purpose of each namespace is to wrap a particular global system resource in an abstraction that makes it appear to the processes within the namespace that they have their own isolated instance of the global resource. ）。Linux 内核中实现了六种 namespace，按照引入的先后顺序，列表如下：</p>
<table>
<thead>
<tr>
<th>namespace</th>
<th>引入的相关内核版本</th>
<th>被隔离的全局系统资源</th>
<th>在容器语境下的隔离效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>Mount namespaces</td>
<td>Linux 2.4.19</td>
<td>文件系统挂接点</td>
<td>每个容器能看到不同的文件系统层次结构</td>
</tr>
<tr>
<td>UTS namespaces</td>
<td>Linux 2.6.19</td>
<td>nodename 和 domainname</td>
<td>每个容器可以有自己的 hostname 和 domainame</td>
</tr>
<tr>
<td>IPC namespaces</td>
<td>Linux 2.6.19</td>
<td>特定的进程间通信资源，包括System V IPC 和  POSIX message queues</td>
<td>每个容器有其自己的 System V IPC 和 POSIX 消息队列文件系统，因此，只有在同一个 IPC namespace 的进程之间才能互相通信</td>
</tr>
<tr>
<td>PID namespaces</td>
<td>Linux 2.6.24</td>
<td>进程 ID 数字空间 （process ID number space）</td>
<td>每个 PID namespace 中的进程可以有其独立的 PID； 每个容器可以有其 PID 为 1 的root 进程；也使得容器可以在不同的 host 之间迁移，因为 namespace 中的进程 ID 和 host 无关了。这也使得容器中的每个进程有两个PID：容器中的 PID 和 host 上的 PID。</td>
</tr>
<tr>
<td>Network namespaces</td>
<td>始于Linux 2.6.24 完成于 Linux 2.6.29</td>
<td>网络相关的系统资源</td>
<td>每个容器用有其独立的网络设备，IP 地址，IP 路由表，/proc/net 目录，端口号等等。这也使得一个 host 上多个容器内的同一个应用都绑定到各自容器的 80 端口上。</td>
</tr>
<tr>
<td>User namespaces</td>
<td>始于 Linux 2.6.23 完成于 Linux 3.8)</td>
<td>用户和组 ID 空间</td>
<td>在 user namespace 中的进程的用户和组 ID 可以和在 host 上不同； 每个 container 可以有不同的 user 和 group id；一个 host 上的非特权用户可以成为 user namespace 中的特权用户；</td>
</tr>
</tbody>
</table>
<p>Linux namespace 的概念说简单也简单说复杂也复杂。简单来说，我们只要知道，处于某个 namespace 中的进程，能看到独立的它自己的隔离的某些特定系统资源；复杂来说，可以去看看 Linux 内核中实现 namespace 的原理，网络上也有大量的文档供参考，这里不再赘述。</p>
<h1 id="Docker-容器使用-linux-namespace-做运行环境隔离"><a href="#Docker-容器使用-linux-namespace-做运行环境隔离" class="headerlink" title="Docker 容器使用 linux namespace 做运行环境隔离"></a>Docker 容器使用 linux namespace 做运行环境隔离</h1><p>当 Docker 创建一个容器时，它会创建新的以上六种 namespace 的实例，然后把容器中的所有进程放到这些 namespace 之中，使得Docker 容器中的进程只能看到隔离的系统资源。 </p>
<h2 id="Mount-Namespace"><a href="#Mount-Namespace" class="headerlink" title="Mount Namespace"></a>Mount Namespace</h2><p>Mount namespace用来隔离文件系统的挂载点, 使得不同的mount namespace拥有自己独立的挂载点信息，不同的namespace之间不会相互影响，这对于构建用户或者容器自己的文件系统目录非常有用。</p>
<p>当前进程所在mount namespace里的所有挂载信息可以在/proc/[pid]/mounts、/proc/[pid]/mountinfo和/proc/[pid]/mountstats里面找到。</p>
<p>Mount namespaces是第一个被加入Linux的namespace，由于当时没想到还会引入其它的namespace，所以取名为CLONE_NEWNS，而没有叫CLONE_NEWMOUNT。</p>
<p>每个mount namespace都拥有一份自己的挂载点列表，当用clone或者unshare函数创建新的mount namespace时，新创建的namespace将拷贝一份老namespace里的挂载点列表，但从这之后，他们就没有关系了，通过mount和umount增加和删除各自namespace里面的挂载点都不会相互影响。</p>
<h2 id="PID-namespace"><a href="#PID-namespace" class="headerlink" title="PID namespace"></a>PID namespace</h2><p>我们能看到同一个进程，在容器内外的 PID 是不同的：</p>
<ul>
<li>在容器内 PID 是 1，PPID 是 0。</li>
<li>在容器外 PID 是 2198， PPID 是 2179 即 docker-containerd-shim 进程.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# ps -ef | grep python</span><br><span class="line">root 2198 2179 0 00:06 ? 00:00:00 python app.py</span><br><span class="line"></span><br><span class="line">root@devstack:/home/sammy# ps -ef | grep 2179</span><br><span class="line">root 2179 765 0 00:06 ? 00:00:00 docker-containerd-shim 8b7dd09fbcae00373207f01e2acde45740871c9e3b98286b5458b4ea09f41b3e /var/run/docker/libcontainerd/8b7dd09fbcae00373207f01e2acde45740871c9e3b98286b5458b4ea09f41b3e docker-runc</span><br><span class="line">root 2198 2179 0 00:06 ? 00:00:00 python app.py</span><br><span class="line">root 2249 1692 0 00:06 pts/0 00:00:00 grep --color=auto 2179</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">root@devstack:/home/sammy# docker exec -it web31 ps -ef</span><br><span class="line">UID PID PPID C STIME TTY TIME CMD</span><br><span class="line">root 1 0 0 16:06 ? 00:00:00 python app.py</span><br></pre></td></tr></table></figure>
<p>关于 containerd，containerd-shim 和 container 的关系，<a href="https://github.com/crosbymichael/dockercon-2016/blob/master/Creating%20Containerd.pdf" target="_blank" rel="noopener">文章</a> 中的下图可以说明：</p>
<p><a href="http://idiotsky.top/images3/docker-summary-3.jpg"><img src="http://idiotsky.top/images3/docker-summary-3.jpg" alt=""></a></p>
<ul>
<li>Docker 引擎管理着镜像，然后移交给 containerd 运行，containerd 再使用 runC 运行容器。</li>
<li>Containerd 是一个简单的守护进程，它可以使用 runC 管理容器，使用 gRPC 暴露容器的其他功能。它管理容器的开始，停止，暂停和销毁。由于容器运行时是孤立的引擎，引擎最终能够启动和升级而无需重新启动容器。</li>
<li>runC是一个轻量级的工具，它是用来运行容器的，只用来做这一件事，并且这一件事要做好。runC基本上是一个小命令行工具且它可以不用通过Docker引擎，直接就可以使用容器。</li>
</ul>
<p>因此，容器中的主应用在 host 上的父进程是 containerd-shim，是它通过工具 runC 来启动这些进程的。</p>
<p>这也能看出来，pid namespace 通过将 host 上 PID 映射为容器内的 PID， 使得容器内的进程看起来有个独立的 PID 空间。</p>
<h2 id="UTS-namespace"><a href="#UTS-namespace" class="headerlink" title="UTS namespace"></a>UTS namespace</h2><p>类似地，容器可以有自己的 hostname 和 domainname：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# hostname</span><br><span class="line">devstack</span><br><span class="line">root@devstack:/home/sammy# docker exec -it web31 hostname</span><br><span class="line">8b7dd09fbcae</span><br></pre></td></tr></table></figure>
<h2 id="IPC-Namespace"><a href="#IPC-Namespace" class="headerlink" title="IPC Namespace"></a>IPC Namespace</h2><p>IPC全称 Inter-Process Communication，是Unix/Linux下进程间通信的一种方式，IPC有共享内存、信号量、消息队列等方法。所以，为了隔离，我们也需要把IPC给隔离开来，这样，只有在同一个Namespace下的进程才能相互通信。如果你熟悉IPC的原理的话，你会知道，IPC需要有一个全局的ID，即然是全局的，那么就意味着我们的Namespace需要对这个ID隔离，不能让别的Namespace的进程看到。</p>
<h2 id="user-namespace"><a href="#user-namespace" class="headerlink" title="user namespace"></a>user namespace</h2><p>在 Docker 1.10 版本之前，Docker 是不支持 user namespace。也就是说，默认地，容器内的进程的运行用户就是 host 上的 root 用户，这样的话，当 host 上的文件或者目录作为 volume 被映射到容器以后，容器内的进程其实是有 root 的几乎所有权限去修改这些 host 上的目录的，这会有很大的安全问题。</p>
<p>举例：</p>
<ul>
<li>启动一个容器： docker run -d -v /bin:/host/bin –name web34 training/webapp python app.py</li>
<li>此时进程的用户在容器内和外都是root，它在容器内可以对 host 上的 /bin 目录做任意修改</li>
</ul>
<p>而 Docker 1.10 中引入的 user namespace 就可以让容器有一个 “假”的  root 用户，它在容器内是 root，在容器外是一个非 root 用户。也就是说，user namespace 实现了 host users 和 container users 之间的映射。</p>
<p>启用步骤：</p>
<ol>
<li>修改 /etc/default/docker 文件，添加行  DOCKER_OPTS=”–userns-remap=default”</li>
<li>重启 docker 服务，此时 dockerd 进程为 /usr/bin/dockerd –userns-remap=default –raw-logs</li>
<li>然后创建一个容器：docker run -d -v /bin:/host/bin –name web35 training/webapp python app.py</li>
<li>查看进程在容器内外的用户：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# ps -ef | grep python</span><br><span class="line">231072    1726  1686  0 01:44 ?        00:00:00 python app.py</span><br><span class="line"></span><br><span class="line">root@devstack:/home/sammy# docker exec web35 ps -ef</span><br><span class="line">UID        PID  PPID  C STIME TTY          TIME CMD</span><br><span class="line">root         1     0  0 17:44 ?        00:00:00 python app.py</span><br></pre></td></tr></table></figure>
<p>查看文件/etc/subuid 和 /etc/subgid，可以看到 dockermap 用户在host 上的 uid 和 gid 都是 231072：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# cat /etc/subuid</span><br><span class="line">sammy:100000:65536</span><br><span class="line">stack:165536:65536</span><br><span class="line">dockremap:231072:65536</span><br><span class="line">root@devstack:/home/sammy# cat /etc/subgid</span><br><span class="line">sammy:100000:65536</span><br><span class="line">stack:165536:65536</span><br><span class="line">dockremap:231072:65536</span><br></pre></td></tr></table></figure>
<p>再看文件/proc/1726/uid_map，它表示了容器内外用户的映射关系，即将host 上的 231072 用户映射为容器内的 0 （即root）用户。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# cat /proc/1726/uid_map</span><br><span class="line">         0     231072      65536</span><br></pre></td></tr></table></figure>
<p>现在，我们试图在容器内修改 host 上的 /bin 文件夹，就会提示权限不足了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@80993d821f7b:/host/bin# touch test2</span><br><span class="line">touch: cannot touch &apos;test2&apos;: Permission denied</span><br></pre></td></tr></table></figure>
<p>这说明通过使用 user namespace，我们就成功地限制了容器内进程的权限。</p>
<h2 id="network-namespace"><a href="#network-namespace" class="headerlink" title="network namespace"></a>network namespace</h2><p>默认情况下，当 docker 实例被创建出来后，使用 ip netns  命令无法看到容器实例对应的 network namespace。这是因为 ip netns 命令是从 /var/run/netns 文件夹中读取内容的。</p>
<p>步骤：</p>
<ol>
<li><p>找到容器的主进程 ID</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# docker inspect --format &apos;&#123;&#123;.State.Pid&#125;&#125;&apos; web5</span><br><span class="line">2704</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建  /var/run/netns 目录以及符号连接</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# mkdir /var/run/netns</span><br><span class="line">root@devstack:/home/sammy# ln -s /proc/2704/ns/net /var/run/netns/web5</span><br></pre></td></tr></table></figure>
</li>
<li><p>此时可以使用 ip netns 命令了</p>
 <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# ip netns</span><br><span class="line">web5</span><br><span class="line">root@devstack:/home/sammy# ip netns exec web5 ip addr</span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default</span><br><span class="line">link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">inet 127.0.0.1/8 scope host lo</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">inet6 ::1/128 scope host</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">15: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default</span><br><span class="line">link/ether 02:42:ac:11:00:03 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">inet 172.17.0.3/16 scope global eth0</span><br><span class="line">valid_lft forever preferred_lft forever</span><br><span class="line">inet6 fe80::42:acff:fe11:3/64 scope link</span><br><span class="line">valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="Linux-control-groups"><a href="#Linux-control-groups" class="headerlink" title="Linux control groups"></a>Linux control groups</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Linux Cgroup 可​​​让​​​您​​​为​​​系​​​统​​​中​​​所​​​运​​​行​​​任​​​务​​​（进​​​程​​​）的​​​用​​​户​​​定​​​义​​​组​​​群​​​分​​​配​​​资​​​源​​​ — 比​​​如​​​ CPU 时​​​间​​​、​​​系​​​统​​​内​​​存​​​、​​​网​​​络​​​带​​​宽​​​或​​​者​​​这​​​些​​​资​​​源​​​的​​​组​​​合​​​。​​​您​​​可​​​以​​​监​​​控​​​您​​​配​​​置​​​的​​​ cgroup，拒​​​绝cgroup 访​​​问​​​某​​​些​​​资​​​源​​​，甚​​​至​​​在​​​运​​​行​​​的​​​系​​​统​​​中​​​动​​​态​​​配​​​置​​​您​​​的​​​ cgroup。所以，可以将 controll groups 理解为 controller （system resource） （for） （process）groups，也就是是说它以一组进程为目标进行系统资源分配和控制。</p>
<p>它主要提供了如下功能： </p>
<ul>
<li>Resource limitation: 限制资源使用，比如内存使用上限以及文件系统的缓存限制。</li>
<li>Prioritization: 优先级控制，比如：CPU利用和磁盘IO吞吐。</li>
<li>Accounting: 一些审计或一些统计，主要目的是为了计费。</li>
<li>Control: 挂起进程，恢复执行进程。</li>
</ul>
<p>使​​​用​​​ cgroup，系​​​统​​​管​​​理​​​员​​​可​​​更​​​具​​​体​​​地​​​控​​​制​​​对​​​系​​​统​​​资​​​源​​​的​​​分​​​配​​​、​​​优​​​先​​​顺​​​序​​​、​​​拒​​​绝​​​、​​​管​​​理​​​和​​​监​​​控​​​。​​​可​​​更​​​好​​​地​​​根​​​据​​​任​​​务​​​和​​​用​​​户​​​分​​​配​​​硬​​​件​​​资​​​源​​​，提​​​高​​​总​​​体​​​效​​​率​​​。</p>
<p>在实践中，系统管理员一般会利用CGroup做下面这些事（有点像为某个虚拟机分配资源似的）：</p>
<ul>
<li>隔离一个进程集合（比如：nginx的所有进程），并限制他们所消费的资源，比如绑定CPU的核。</li>
<li>为这组进程分配其足够使用的内存</li>
<li>为这组进程分配相应的网络带宽和磁盘存储限制</li>
<li>限制访问某些设备（通过设置设备的白名单）</li>
</ul>
<p>Linux 系统中，一切皆文件。Linux 也将 cgroups 实现成了文件系统，方便用户使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# mount -t cgroup</span><br><span class="line">cgroup on /sys/fs/cgroup/cpuset type cgroup (rw,relatime,cpuset)</span><br><span class="line">cgroup on /sys/fs/cgroup/cpu type cgroup (rw,relatime,cpu)</span><br><span class="line">systemd on /sys/fs/cgroup/systemd type cgroup (rw,noexec,nosuid,nodev,none,name=systemd)</span><br><span class="line"></span><br><span class="line">root@devstack:/home/sammy# lssubsys -m</span><br><span class="line">cpuset /sys/fs/cgroup/cpuset</span><br><span class="line">cpu /sys/fs/cgroup/cpu</span><br><span class="line">cpuacct /sys/fs/cgroup/cpuacct</span><br><span class="line">memory /sys/fs/cgroup/memory</span><br><span class="line">devices /sys/fs/cgroup/devices</span><br><span class="line">freezer /sys/fs/cgroup/freezer</span><br><span class="line">blkio /sys/fs/cgroup/blkio</span><br><span class="line">perf_event /sys/fs/cgroup/perf_event</span><br><span class="line">hugetlb /sys/fs/cgroup/hugetlb</span><br><span class="line"></span><br><span class="line">root@devstack:/home/sammy# ls /sys/fs/cgroup/ -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 blkio</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 cpu</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 cpuacct</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 cpuset</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 devices</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 freezer</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 hugetlb</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 memory</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 perf_event</span><br><span class="line">drwxr-xr-x 3 root root 0 Sep 18 21:46 systemd</span><br></pre></td></tr></table></figure>
<p>我们看到 /sys/fs/cgroup 目录中有若干个子目录，我们可以认为这些都是受 cgroups 控制的资源以及这些资源的信息。</p>
<ul>
<li>blkio — 这​​​个​​​子​​​系​​​统​​​为​​​块​​​设​​​备​​​设​​​定​​​输​​​入​​​/输​​​出​​​限​​​制​​​，比​​​如​​​物​​​理​​​设​​​备​​​（磁​​​盘​​​，固​​​态​​​硬​​​盘​​​，USB 等​​​等​​​）。</li>
<li>cpu — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​调​​​度​​​程​​​序​​​提​​​供​​​对​​​ CPU 的​​​ cgroup 任​​​务​​​访​​​问​​​。​​​</li>
<li>cpuacct — 这​​​个​​​子​​​系​​​统​​​自​​​动​​​生​​​成​​​ cgroup 中​​​任​​​务​​​所​​​使​​​用​​​的​​​ CPU 报​​​告​​​。​​​</li>
<li>cpuset — 这​​​个​​​子​​​系​​​统​​​为​​​ cgroup 中​​​的​​​任​​​务​​​分​​​配​​​独​​​立​​​ CPU（在​​​多​​​核​​​系​​​统​​​）和​​​内​​​存​​​节​​​点。</li>
<li>devices — 这​​​个​​​子​​​系​​​统​​​可​​​允​​​许​​​或​​​者​​​拒​​​绝​​​ cgroup 中​​​的​​​任​​​务​​​访​​​问​​​设​​​备​​​。​​​</li>
<li>freezer — 这​​​个​​​子​​​系​​​统​​​挂​​​起​​​或​​​者​​​恢​​​复​​​ cgroup 中​​​的​​​任​​​务​​​。​​​</li>
<li>memory — 这​​​个​​​子​​​系​​​统​​​设​​​定​​​ cgroup 中​​​任​​​务​​​使​​​用​​​的​​​内​​​存​​​限​​​制​​​，并​​​自​​​动​​​生​​​成​​​​​内​​​存​​​资​源使用​​​报​​​告​​​。​​​</li>
<li>net_cls — 这​​​个​​​子​​​系​​​统​​​使​​​用​​​等​​​级​​​识​​​别​​​符​​​（classid）标​​​记​​​网​​​络​​​数​​​据​​​包​​​，可​​​允​​​许​​​ Linux 流量​​​控​​​制​​​程​​​序​​​（tc）识​​​别​​​从​​​具​​​体​​​ cgroup 中​​​生​​​成​​​的​​​数​​​据​​​包​​​。​​​</li>
<li>net_prio — 这个子系统用来设计网络流量的优先级</li>
<li>hugetlb — 这个子系统主要针对于HugeTLB系统进行限制，这是一个大页文件系统。</li>
</ul>
<p>默认的话，在 Ubuntu 系统中，你可能看不到 net_cls 和 net_prio 目录，它们需要你手工做 mount：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/sys/fs/cgroup# modprobe cls_cgroup</span><br><span class="line">root@devstack:/sys/fs/cgroup# mkdir net_cls</span><br><span class="line">root@devstack:/sys/fs/cgroup# mount -t cgroup -o net_cls none net_cls</span><br><span class="line"></span><br><span class="line">root@devstack:/sys/fs/cgroup# modprobe netprio_cgroup</span><br><span class="line">root@devstack:/sys/fs/cgroup# mkdir net_prio</span><br><span class="line">root@devstack:/sys/fs/cgroup# mount -t cgroup -o net_prio none net_prio</span><br><span class="line"></span><br><span class="line">root@devstack:/sys/fs/cgroup# ls net_prio/cgroup.clone_children  cgroup.procs          net_prio.ifpriomap  notify_on_release  tasks</span><br><span class="line">cgroup.event_control   cgroup.sane_behavior  net_prio.prioidx    release_agent</span><br><span class="line">root@devstack:/sys/fs/cgroup# ls net_cls/</span><br><span class="line">cgroup.clone_children  cgroup.event_control  cgroup.procs  cgroup.sane_behavior  net_cls.classid  notify_on_release  release_agent  tasks</span><br></pre></td></tr></table></figure>
<h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><h3 id="通过-cgroups-限制进程的-CPU"><a href="#通过-cgroups-限制进程的-CPU" class="headerlink" title="通过 cgroups 限制进程的 CPU"></a>通过 cgroups 限制进程的 CPU</h3><p>写一段最简单的 C 程序：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(;;) i++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译，运行，发现它占用的 CPU 几乎到了 100%：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class="line">2204 root      20   0    4188    356    276 R 99.6  0.0   0:46.03 hello</span><br></pre></td></tr></table></figure>
<p>接下来我们做如下操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy/c# mkdir /sys/fs/cgroup/cpu/hello</span><br><span class="line">root@devstack:/home/sammy/c# cd /sys/fs/cgroup/cpu/hello</span><br><span class="line">root@devstack:/sys/fs/cgroup/cpu/hello# ls</span><br><span class="line">cgroup.clone_children  cgroup.procs       cpu.cfs_quota_us  cpu.stat           tasks</span><br><span class="line">cgroup.event_control   cpu.cfs_period_us  cpu.shares        notify_on_release</span><br><span class="line">root@devstack:/sys/fs/cgroup/cpu/hello# cat cpu.cfs_quota_us</span><br><span class="line">-1</span><br><span class="line">root@devstack:/sys/fs/cgroup/cpu/hello# echo 20000 &gt; cpu.cfs_quota_us</span><br><span class="line">root@devstack:/sys/fs/cgroup/cpu/hello# cat cpu.cfs_quota_us</span><br><span class="line">20000</span><br><span class="line">root@devstack:/sys/fs/cgroup/cpu/hello# echo 2428 &gt; tasks</span><br></pre></td></tr></table></figure>
<p>然后再来看看这个进程的 CPU 占用情况：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class="line">2428 root      20   0    4188    356    276 R 19.9  0.0   0:46.03 hello</span><br></pre></td></tr></table></figure>
<p>它占用的 CPU 几乎就是 20%，也就是我们预设的阈值。这说明我们通过上面的步骤，成功地将这个进程运行所占用的 CPU 资源限制在某个阈值之内了。</p>
<p>如果此时再启动另一个 hello 进程并将其 id 加入 tasks 文件，则两个进程会共享设定的 CPU 限制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND</span><br><span class="line"> 2428 root      20   0    4188    356    276 R 10.0  0.0 285:39.54 hello</span><br><span class="line">12526 root      20   0    4188    356    276 R 10.0  0.0   0:25.09 hello</span><br></pre></td></tr></table></figure>
<h3 id="通过-cgroups-限制进程的-Memory"><a href="#通过-cgroups-限制进程的-Memory" class="headerlink" title="通过 cgroups 限制进程的 Memory"></a>通过 cgroups 限制进程的 Memory</h3><p>同样地，我们针对它占用的内存做如下操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/sys/fs/cgroup/memory# mkdir hello</span><br><span class="line">root@devstack:/sys/fs/cgroup/memory# cd hello/</span><br><span class="line">root@devstack:/sys/fs/cgroup/memory/hello# cat memory.limit_in_bytes</span><br><span class="line">18446744073709551615</span><br><span class="line">root@devstack:/sys/fs/cgroup/memory/hello# echo 64k &gt; memory.limit_in_bytes</span><br><span class="line">root@devstack:/sys/fs/cgroup/memory/hello# echo 2428 &gt; tasks</span><br><span class="line">root@devstack:/sys/fs/cgroup/memory/hello#</span><br></pre></td></tr></table></figure>
<p>上面的步骤会把进程 2428 说占用的内存阈值设置为 64K。超过的话，它会被杀掉。</p>
<h3 id="限制进程的-I-O"><a href="#限制进程的-I-O" class="headerlink" title="限制进程的 I/O"></a>限制进程的 I/O</h3><p>运行命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dd if=/dev/sda1 of=/dev/null</span><br></pre></td></tr></table></figure>
<p>通过 iotop 命令看 IO （此时磁盘在快速转动），此时其写速度为 242M/s：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line">2555 be/4 root      242.60 M/s    0.00 B/s  0.00 % 61.66 % dd if=/dev/sda1 of=/dev/null</span><br></pre></td></tr></table></figure>
<p>接着做下面的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/home/sammy# mkdir /sys/fs/cgroup/blkio/io</span><br><span class="line">root@devstack:/home/sammy# cd /sys/fs/cgroup/blkio/io</span><br><span class="line">root@devstack:/sys/fs/cgroup/blkio/io# ls -l /dev/sda1</span><br><span class="line">brw-rw---- 1 root disk 8, 1 Sep 18 21:46 /dev/sda1</span><br><span class="line">root@devstack:/sys/fs/cgroup/blkio/io# echo &apos;8:0 1048576&apos;  &gt; /sys/fs/cgroup/blkio/io/blkio.throttle.read_bps_device</span><br><span class="line">root@devstack:/sys/fs/cgroup/blkio/io# echo 2725 &gt; /sys/fs/cgroup/blkio/io/tasks</span><br></pre></td></tr></table></figure>
<p>结果，这个进程的IO 速度就被限制在 1Mb/s 之内了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TID  PRIO  USER     DISK READ  DISK WRITE  SWAPIN     IO&gt;    COMMAND</span><br><span class="line">2555 be/4 root      990.44 K/s    0.00 B/s  0.00 % 96.29 % dd if=/dev/sda1 of=/dev/null</span><br></pre></td></tr></table></figure>
<h2 id="术语"><a href="#术语" class="headerlink" title="术语"></a>术语</h2><p>cgroups 的术语包括：</p>
<ul>
<li>任务（Tasks）：就是系统的一个进程。</li>
<li>控制组（Control Group）：一组按照某种标准划分的进程，比如官方文档中的Professor和Student，或是WWW和System之类的，其表示了某进程组。Cgroups中的资源控制都是以控制组为单位实现。一个进程可以加入到某个控制组。而资源的限制是定义在这个组上，就像上面示例中我用的 hello 一样。简单点说，cgroup的呈现就是一个目录带一系列的可配置文件。</li>
<li>层级（Hierarchy）：控制组可以组织成hierarchical的形式，既一颗控制组的树（目录结构）。控制组树上的子节点继承父结点的属性。简单点说，hierarchy就是在一个或多个子系统上的cgroups目录树。</li>
<li>子系统（Subsystem）：一个子系统就是一个资源控制器，比如CPU子系统就是控制CPU时间分配的一个控制器。子系统必须附加到一个层级上才能起作用，一个子系统附加到某个层级以后，这个层级上的所有控制族群都受到这个子系统的控制。Cgroup的子系统可以有很多，也在不断增加中。</li>
</ul>
<h1 id="Docker-对-cgroups-的使用"><a href="#Docker-对-cgroups-的使用" class="headerlink" title="Docker 对 cgroups 的使用"></a>Docker 对 cgroups 的使用</h1><h2 id="默认情况"><a href="#默认情况" class="headerlink" title="默认情况"></a>默认情况</h2><p>默认情况下，Docker 启动一个容器后，会在 /sys/fs/cgroup 目录下的各个资源目录下生成以容器 ID 为名字的目录（group），比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/sys/fs/cgroup/cpu/docker/03dd196f415276375f754d51ce29b418b170bd92d88c5e420d6901c32f93dc14</span><br></pre></td></tr></table></figure>
<p>此时 cpu.cfs_quota_us 的内容为 -1，表示默认情况下并没有限制容器的 CPU 使用。在容器被 stopped 后，该目录被删除。</p>
<p>运行命令 docker run -d –name web41 –cpu-quota 25000 –cpu-period 100 –cpu-shares 30 training/webapp python app.py 启动一个新的容器，结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/sys/fs/cgroup/cpu/docker/06bd180cd340f8288c18e8f0e01ade66d066058dd053ef46161eb682ab69ec24# cat cpu.cfs_quota_us</span><br><span class="line">25000</span><br><span class="line">root@devstack:/sys/fs/cgroup/cpu/docker/06bd180cd340f8288c18e8f0e01ade66d066058dd053ef46161eb682ab69ec24# cat tasks</span><br><span class="line">3704</span><br><span class="line">root@devstack:/sys/fs/cgroup/cpu/docker/06bd180cd340f8288c18e8f0e01ade66d066058dd053ef46161eb682ab69ec24# cat cpu.cfs_period_us</span><br><span class="line">2000</span><br></pre></td></tr></table></figure>
<p>Docker 会将容器中的进程的 ID 加入到各个资源对应的 tasks 文件中。表示 Docker 也是以上面的机制来使用 cgroups 对容器的 CPU 使用进行限制。</p>
<p>相似地，可以通过 docker run 中 mem 相关的参数对容器的内存使用进行限制：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">    --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)</span><br><span class="line">    --kernel-memory string        Kernel memory limit</span><br><span class="line">-m, --memory string               Memory limit</span><br><span class="line">    --memory-reservation string   Memory soft limit</span><br><span class="line">    --memory-swap string          Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap</span><br><span class="line">    --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)</span><br></pre></td></tr></table></figure>
<p>比如  docker run -d –name web42 –blkio-weight 100 –memory 10M –cpu-quota 25000 –cpu-period 2000 –cpu-shares 30 training/webapp python app.py：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/sys/fs/cgroup/memory/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410# cat memory.limit_in_bytes</span><br><span class="line">10485760</span><br><span class="line">  root@devstack:/sys/fs/cgroup/blkio/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410# cat blkio.weight</span><br><span class="line">  100</span><br></pre></td></tr></table></figure>
<p>目前 docker 已经几乎支持了所有的 cgroups 资源，可以限制容器对包括 network，device，cpu 和 memory 在内的资源的使用，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">root@devstack:/sys/fs/cgroup# find -iname ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./net_prio/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./net_cls/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./systemd/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./hugetlb/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./perf_event/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./blkio/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./freezer/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./devices/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./memory/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./cpuacct/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./cpu/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br><span class="line">./cpuset/docker/ec8d850ebbabaf24df572cb5acd89a6e7a953fe5aa5d3c6a69c4532f92b57410</span><br></pre></td></tr></table></figure>
<h1 id="Docker-run-命令中-cgroups-相关命令"><a href="#Docker-run-命令中-cgroups-相关命令" class="headerlink" title="Docker run 命令中 cgroups 相关命令"></a>Docker run 命令中 cgroups 相关命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">block IO:</span><br><span class="line">      --blkio-weight value          Block IO (relative weight), between 10 and 1000</span><br><span class="line">      --blkio-weight-device value   Block IO weight (relative device weight) (default [])</span><br><span class="line">      --cgroup-parent string        Optional parent cgroup for the container</span><br><span class="line">CPU:</span><br><span class="line">      --cpu-percent int             CPU percent (Windows only)</span><br><span class="line">      --cpu-period int              Limit CPU CFS (Completely Fair Scheduler) period</span><br><span class="line">      --cpu-quota int               Limit CPU CFS (Completely Fair Scheduler) quota</span><br><span class="line">  -c, --cpu-shares int              CPU shares (relative weight)</span><br><span class="line">      --cpuset-cpus string          CPUs in which to allow execution (0-3, 0,1)</span><br><span class="line">      --cpuset-mems string          MEMs in which to allow execution (0-3, 0,1)</span><br><span class="line">Device:    </span><br><span class="line">      --device value                Add a host device to the container (default [])</span><br><span class="line">      --device-read-bps value       Limit read rate (bytes per second) from a device (default [])</span><br><span class="line">      --device-read-iops value      Limit read rate (IO per second) from a device (default [])</span><br><span class="line">      --device-write-bps value      Limit write rate (bytes per second) to a device (default [])</span><br><span class="line">      --device-write-iops value     Limit write rate (IO per second) to a device (default [])</span><br><span class="line">Memory:      </span><br><span class="line">      --kernel-memory string        Kernel memory limit</span><br><span class="line">  -m, --memory string               Memory limit</span><br><span class="line">      --memory-reservation string   Memory soft limit</span><br><span class="line">      --memory-swap string          Swap limit equal to memory plus swap: &apos;-1&apos; to enable unlimited swap</span><br><span class="line">      --memory-swappiness int       Tune container memory swappiness (0 to 100) (default -1)</span><br></pre></td></tr></table></figure>
<p>一些说明：</p>
<ol>
<li>cgroup 只能限制 CPU 的使用，而不能保证CPU的使用。也就是说， 使用 cpuset-cpus，可以让容器在指定的CPU或者核上运行，但是不能确保它独占这些CPU；cpu-shares 是个相对值，只有在CPU不够用的时候才其作用。也就是说，当CPU够用的时候，每个容器会分到足够的CPU；不够用的时候，会按照指定的比重在多个容器之间分配CPU。</li>
<li>对内存来说，cgroups 可以限制容器最多使用的内存。使用 -m 参数可以设置最多可以使用的内存。</li>
</ol>
<h1 id="Docker-网络概况"><a href="#Docker-网络概况" class="headerlink" title="Docker 网络概况"></a>Docker 网络概况</h1><p>用一张图来说明 Docker 网络的基本概况：</p>
<p><a href="http://idiotsky.top/images3/docker-summary-5.jpg"><img src="http://idiotsky.top/images3/docker-summary-5.jpg" alt=""></a></p>
<h1 id="四种单节点网络模式"><a href="#四种单节点网络模式" class="headerlink" title="四种单节点网络模式"></a>四种单节点网络模式</h1><h2 id="bridge-模式"><a href="#bridge-模式" class="headerlink" title="bridge 模式"></a>bridge 模式</h2><p>Docker 容器默认使用 bridge 模式的网络。其特点如下：</p>
<ul>
<li>使用一个 linux bridge，默认为 docker0</li>
<li>使用 veth 对，一头在容器的网络 namespace 中，一头在 docker0 上</li>
<li>该模式下Docker Container不具有一个公有IP，因为宿主机的IP地址与veth pair的 IP地址不在同一个网段内</li>
<li>Docker采用 NAT 方式，将容器内部的服务监听的端口与宿主机的某一个端口port 进行“绑定”，使得宿主机以外的世界可以主动将网络报文发送至容器内部</li>
<li>外界访问容器内的服务时，需要访问宿主机的 IP 以及宿主机的端口 port</li>
<li>NAT 模式由于是在三层网络上的实现手段，故肯定会影响网络的传输效率。</li>
<li>容器拥有独立、隔离的网络栈；让容器和宿主机以外的世界通过NAT建立通信</li>
</ul>
<p>iptables 的 SNTA 规则，使得从容器离开去外界的网络包的源 IP 地址被转换为 Docker 主机的IP地址：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Chain POSTROUTING (policy ACCEPT)</span><br><span class="line">target     prot opt source               destination</span><br><span class="line">MASQUERADE  all  --  172.17.0.0/16        0.0.0.0/0</span><br><span class="line">MASQUERADE  all  --  172.18.0.0/16        0.0.0.0/0</span><br></pre></td></tr></table></figure>
<p>示意图：</p>
<p><a href="http://idiotsky.top/images3/docker-summary-6.jpg"><img src="http://idiotsky.top/images3/docker-summary-6.jpg" alt=""></a></p>
<h2 id="Host-模式"><a href="#Host-模式" class="headerlink" title="Host 模式"></a>Host 模式</h2><p>定义：</p>
<p>Host 模式并没有为容器创建一个隔离的网络环境。而之所以称之为host模式，是因为该模式下的 Docker 容器会和 host 宿主机共享同一个网络 namespace，故 Docker Container可以和宿主机一样，使用宿主机的eth0，实现和外界的通信。换言之，Docker Container的 IP 地址即为宿主机 eth0 的 IP 地址。其特点包括：</p>
<ul>
<li>这种模式下的容器没有隔离的 network namespace</li>
<li>容器的 IP 地址同 Docker host 的 IP 地址</li>
<li>需要注意容器中服务的端口号不能与 Docker host 上已经使用的端口号相冲突</li>
<li>host 模式能够和其它模式共存</li>
</ul>
<p>示意图：</p>
<p><a href="http://idiotsky.top/images3/docker-summary-7.jpg"><img src="http://idiotsky.top/images3/docker-summary-7.jpg" alt=""></a></p>
<h2 id="container-模式"><a href="#container-模式" class="headerlink" title="container 模式"></a>container 模式</h2><p>定义：</p>
<p>Container 网络模式是 Docker 中一种较为特别的网络的模式。处于这个模式下的 Docker 容器会共享其他容器的网络环境，因此，至少这两个容器之间不存在网络隔离，而这两个容器又与宿主机以及除此之外其他的容器存在网络隔离。  </p>
<p>示意图：</p>
<p><a href="http://idiotsky.top/images3/docker-summary-8.jpg"><img src="http://idiotsky.top/images3/docker-summary-8.jpg" alt=""></a></p>
<h2 id="none-模式"><a href="#none-模式" class="headerlink" title="none 模式"></a>none 模式</h2><p>定义：</p>
<p>网络模式为 none，即不为 Docker 容器构造任何网络环境。一旦Docker 容器采用了none 网络模式，那么容器内部就只能使用loopback网络设备，不会再有其他的网络资源。Docker Container的none网络模式意味着不给该容器创建任何网络环境，容器只能使用127.0.0.1的本机网络。</p>
<blockquote>
<p>to be continue …</p>
</blockquote>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.cnblogs.com/sammyliu/p/5875470.html" target="_blank" rel="noopener">http://www.cnblogs.com/sammyliu/p/5875470.html</a></p>
<p><a href="http://www.cnblogs.com/sammyliu/p/5878973.html" target="_blank" rel="noopener">http://www.cnblogs.com/sammyliu/p/5878973.html</a></p>
<p><a href="http://www.cnblogs.com/sammyliu/p/5886833.html" target="_blank" rel="noopener">http://www.cnblogs.com/sammyliu/p/5886833.html</a></p>
<p><a href="https://segmentfault.com/a/1190000006912742" target="_blank" rel="noopener">https://segmentfault.com/a/1190000006912742</a></p>
<p><a href="https://coolshell.cn/articles/17010.html" target="_blank" rel="noopener">https://coolshell.cn/articles/17010.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;不想分几章了，所以很长很长👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;docker-容器的状态机&quot;&gt;&lt;a href=&quot;#docker-容器的状态机&quot; class=&quot;headerlink&quot; title=&quot;docker 容器的状态机&quot;&gt;&lt;/a&gt;docker 容器的状态机&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://idiotsky.top/images3/docker-summary-1.jpg&quot;&gt;&lt;img src=&quot;http://idiotsky.top/images3/docker-summary-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;一个容器在某个时刻可能处于以下几种状态之一：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;created：已经被创建 （使用 docker ps -a 命令可以列出）但是还没有被启动 （使用 docker ps 命令还无法列出）&lt;/li&gt;
&lt;li&gt;running：运行中&lt;/li&gt;
&lt;li&gt;paused：容器的进程被暂停了&lt;/li&gt;
&lt;li&gt;restarting：容器的进程正在重启过程中&lt;/li&gt;
&lt;li&gt;exited：上图中的 stopped 状态，表示容器之前运行过但是现在处于停止状态（要区别于 created 状态，它是指一个新创出的尚未运行过的容器）。可以通过 start 命令使其重新进入 running 状态&lt;/li&gt;
&lt;li&gt;destroyed：容器被删除了，再也不存在了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="docker" scheme="http://idiotsky.top/categories/docker/"/>
    
    
      <category term="docker" scheme="http://idiotsky.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>TCMalloc：Thread-Caching(线程缓存)Malloc</title>
    <link href="http://idiotsky.top/2018/09/17/tcmalloc/"/>
    <id>http://idiotsky.top/2018/09/17/tcmalloc/</id>
    <published>2018-09-17T14:56:41.000Z</published>
    <updated>2018-09-25T14:02:35.895Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动机"><a href="#动机" class="headerlink" title="动机"></a>动机</h1><p>TCMalloc比glibc 2.3 malloc（作为一个名为ptmalloc2的独立库提供）和我测试的其他malloc更快。ptmalloc2在2.8 GHz P4上执行malloc/free操作对（对于小对象）需要大约300纳秒。对于相同的操作对，TCMalloc实现大约需要50纳秒。速度对于malloc实现很重要，因为如果malloc不够快，应用程序编写者倾向于在malloc之上编写自己的自定义空闲列表。这可能导致额外的复杂性和更多的内存使用，除非应用程序编写者非常小心地适当调整空闲列表的大小并从空闲列表中清除空闲对象</p>
<p>TCMalloc还减少了多线程程序的锁争用。对于小型对象，几乎没有争用。对于大型对象，TCMalloc尝试使用细粒度和高效的自旋锁。ptmalloc2还通过使用每线程arena来减少锁争用，但是ptmalloc2使用每线程arena存在很大问题。在ptmalloc2中，内存永远不会从一个arena转移到另一个arena。这可能导致大量浪费的空间。例如，在一个Google应用程序中，第一阶段将为其数据结构分配大约300MB的内存。当第一阶段结束时，第二阶段将在同一地址空间中开始。如果第二阶段被指定为与第一阶段使用的arena不同的arena，此阶段不会重用第一阶段之后剩余的任何内存，并会向地址空间添加另外300MB。在其他应用中也注意到类似的内存爆炸问题。<br><a id="more"></a><br>TCMalloc的另一个好处是小对象都能节省更多空间。例如，分配N个8字节对象，才使用大约8N * 1.01字节的空间。即，一个百分之一的空间开销。而ptmalloc2为每个对象使用一个四字节的头，并且（我认为）将大小四舍五入为8个字节的倍数，最后使用16N字节。</p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>要使用TCmalloc，只需通过“-ltcmalloc”链接器标志将tcmalloc链接到您的应用程序。</p>
<p>您可以使用LD_PRELOAD在自己没有编译的应用程序中使用tcmalloc：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ LD_PRELOAD =“/ usr / lib / libtcmalloc.so</span><br></pre></td></tr></table></figure>
<p>LD_PRELOAD很棘手，我们不一定推荐这种使用模式。</p>
<p>TCMalloc还包括<a href="http://goog-perftools.sourceforge.net/doc/heap_checker.html" target="_blank" rel="noopener">检查器</a> 和<a href="http://goog-perftools.sourceforge.net/doc/heap_profiler.html" target="_blank" rel="noopener">堆分析器</a>。</p>
<p>如果您更喜欢链接不包含堆分析器和检查器的TCMalloc版本（可能减少静态二进制文件的二进制大小），则可以链接libtcmalloc_minimal 。</p>
<h1 id="概观"><a href="#概观" class="headerlink" title="概观"></a>概观</h1><p>TCMalloc为每个线程分配线程本地缓存。线程本地缓存满足小内存的分配。根据需要将对象从central数据结构移动到线程本地缓存中，并使用周期性垃圾收集将内存从线程本地缓存迁移回central数据结构。</p>
<p><a href="http://idiotsky.top/images3/tcmalloc-1.gif"><img src="http://idiotsky.top/images3/tcmalloc-1.gif" alt=""></a></p>
<p>TCMalloc以不同于较大对象的方式处理大小&lt;= 32K（“小”对象）的对象。使用页级分配器直接从central堆分配大对象（页是4K对齐的内存区域）。即，大对象总是页对齐并占据整数页。</p>
<p>可以将一系列页划分为一系列小对象，每个小对象的大小相同。例如，一页（4K）可以被分成32个大小为128字节的对象。</p>
<h1 id="小对象分配"><a href="#小对象分配" class="headerlink" title="小对象分配"></a>小对象分配</h1><p>每个小对象大小映射到大约170个可分配size-class中的一个。例如，961到1024字节范围内的所有分配都向上舍入到1024.size-class间隔开，以便小的大小分隔8个字节，较大的大小分隔16个字节，甚至更大的大小分隔32个字节，依此类推。最大间距（对于大小&gt; = ~2K）是256个字节。<br>线程缓存包含每个size-class的单​​独的空闲对象链表。</p>
<p><a href="http://idiotsky.top/images3/tcmalloc-2.gif"><img src="http://idiotsky.top/images3/tcmalloc-2.gif" alt=""></a></p>
<p>分配小对象时：（1）我们将其大小映射到相应的size-class。（2）查找当前线程的线程缓存中的相应空闲列表。（3）如果空闲列表不为空，我们从列表中删除第一个对象并将其返回。遵循此快速路径时，TCMalloc根本不会获取任何锁。这有助于显着加速分配，因为加锁/解锁对在2.8 GHz Xeon上大约需要100纳秒。</p>
<p>如果空闲列表为空：（1）我们从这个size-class的central空闲列表中获取一堆对象（所有线程共享central空闲列表）。（2）将它们放在线程本地空闲列表中。（3）将一个新获取的对象返回给应用程序。</p>
<p>如果central空闲列表也是空的：（1）我们从central页分配器分配一系列页。（2）将一系列页分成这个size-class的一组对象。（3）将新对象放在central空闲列表中。（4）和以前一样，将其中一些对象移动到线程本地空闲列表中。</p>
<h1 id="大对象分配"><a href="#大对象分配" class="headerlink" title="大对象分配"></a>大对象分配</h1><p>大对象大小（&gt; 32K）向上舍入到页大小（4K）并由central页堆处理。central页堆也是一个空闲列表数组。对于i &lt; 256，第k个数组元素是一个空闲列表，列表元素由k个页组成。所以第256个数组元素的空闲列表元素是由&gt;= 256个页组成：</p>
<p><a href="http://idiotsky.top/images3/tcmalloc-3.gif"><img src="http://idiotsky.top/images3/tcmalloc-3.gif" alt=""></a></p>
<p>分配一个k个页的内存首先要到第k个空闲列表看看是否满足。如果该空闲列表为空，我们将查看下一个空闲列表，依此类推。最后，如有必要，我们会查看最后一个空闲列表。如果失败，我们从系统中获取内存（使用sbrk，mmap或在/dev/mem映射部分内存）。</p>
<p>如果满足k个页内存分配的是页大小&gt;k，则将分配后剩余部分重新插入页堆中的相应空闲列表中。</p>
<h1 id="Spans（跨度）"><a href="#Spans（跨度）" class="headerlink" title="Spans（跨度）"></a>Spans（跨度）</h1><p>由TCMalloc管理的堆由一组页组成。一系列连续页面由Span对象表示。Span可以分配，也可以是空闲的。如果空闲，则span是页堆链接列表中的条目之一。如果已分配，则它是已传递给应用程序的大对象，或者已分割为一系列小对象的一组页。如果拆分为小对象，则会在Span中记录对象的size-class。</p>
<p>可以使用由页码索引的central数组来查找页面所属的Span。例如，Span a占用2页，Span b占1页，Span c占5页，Span d占3页。</p>
<p><a href="http://idiotsky.top/images3/tcmalloc-4.gif"><img src="http://idiotsky.top/images3/tcmalloc-4.gif" alt=""></a></p>
<p>32位地址空间可以容纳2 ^ 20个4K页面，因此这个中央阵列占用4MB空间，这似乎是可以接受的。在64位计算机上，我们使用3层基数树(radix tree)而不是数组来从页码映射到相应的Span指针。</p>
<h1 id="释放"><a href="#释放" class="headerlink" title="释放"></a>释放</h1><p>当一个对象被释放时，我们计算其页码并在central数组中查找它以找到相应的span对象。span告诉我们对象是否很小，如果对象很小，span告诉我们对象的size-class。如果对象很小，我们将它插入当前线程的线程缓存中的相应空闲列表中。如果线程缓存现在超过预定大小（默认为2MB），我们运行垃圾收集器，将未使用的对象从线程缓存移动到central空闲列表中。</p>
<p>如果对象很大，则span告诉我们对象覆盖的页范围。假设这个范围是[p,q]。我们还为span查找页p-1和页q+1。如果这些相邻span中的任何一个是空闲的，我们将它们与[p,q]的span合并 。生成的span将插入页堆中的相应空闲列表中。</p>
<h1 id="小对象的central空闲列表"><a href="#小对象的central空闲列表" class="headerlink" title="小对象的central空闲列表"></a>小对象的central空闲列表</h1><p>如前所述，我们为每个size-class保留一个central空闲列表。每个central空闲列表都被组织为一个两级数据结构：一组span，以及每个span的空闲对象的链表。</p>
<p>从central空闲列表分配对象,是通过从某个span的链表中删除第一个条目。（如果所有span都有空链表，则首先从central页堆分配适当大小的span。）</p>
<p>将对象返回到central空闲列表，是通过将对象添加到其包含span的链表。如果链表长度现在等于span中的小对象总数，则此span现在完全空闲并返回到页堆。</p>
<h1 id="线程缓存的垃圾回收"><a href="#线程缓存的垃圾回收" class="headerlink" title="线程缓存的垃圾回收"></a>线程缓存的垃圾回收</h1><p>当缓存中所有对象的组合大小超过2MB时，将对线程缓存进行垃圾收集。随着线程数量的增加，垃圾收集阈值会自动降低，这样我们就不会在具有大量线程的程序中浪费过多的内存。</p>
<p>我们遍历缓存中的所有空闲列表，并将一些对象从空闲列表移动到相应的central列表。</p>
<p>从空闲列表移动的对象数量是使用每个列表的低水位标记L决定的。 L记录自上次垃圾回收以来列表的最小长度。请注意，我们可以通过L最后一个垃圾收集中的对象缩短列表，而无需对central表进行任何额外访问。我们使用此历史记录作为将来访问的预测器，并将L/2对象从线程缓存空闲列表移动到相应的central空闲列表。该算法具有良好的属性，如果线程停止使用特定大小，则该大小的所有对象将快速从线程高速缓存移动到central空闲列表，其他线程可以使用它们。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p>翻译 <a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" target="_blank" rel="noopener">http://goog-perftools.sourceforge.net/doc/tcmalloc.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;动机&quot;&gt;&lt;a href=&quot;#动机&quot; class=&quot;headerlink&quot; title=&quot;动机&quot;&gt;&lt;/a&gt;动机&lt;/h1&gt;&lt;p&gt;TCMalloc比glibc 2.3 malloc（作为一个名为ptmalloc2的独立库提供）和我测试的其他malloc更快。ptmalloc2在2.8 GHz P4上执行malloc/free操作对（对于小对象）需要大约300纳秒。对于相同的操作对，TCMalloc实现大约需要50纳秒。速度对于malloc实现很重要，因为如果malloc不够快，应用程序编写者倾向于在malloc之上编写自己的自定义空闲列表。这可能导致额外的复杂性和更多的内存使用，除非应用程序编写者非常小心地适当调整空闲列表的大小并从空闲列表中清除空闲对象&lt;/p&gt;
&lt;p&gt;TCMalloc还减少了多线程程序的锁争用。对于小型对象，几乎没有争用。对于大型对象，TCMalloc尝试使用细粒度和高效的自旋锁。ptmalloc2还通过使用每线程arena来减少锁争用，但是ptmalloc2使用每线程arena存在很大问题。在ptmalloc2中，内存永远不会从一个arena转移到另一个arena。这可能导致大量浪费的空间。例如，在一个Google应用程序中，第一阶段将为其数据结构分配大约300MB的内存。当第一阶段结束时，第二阶段将在同一地址空间中开始。如果第二阶段被指定为与第一阶段使用的arena不同的arena，此阶段不会重用第一阶段之后剩余的任何内存，并会向地址空间添加另外300MB。在其他应用中也注意到类似的内存爆炸问题。&lt;br&gt;
    
    </summary>
    
      <category term="c" scheme="http://idiotsky.top/categories/c/"/>
    
    
      <category term="tcmalloc" scheme="http://idiotsky.top/tags/tcmalloc/"/>
    
      <category term="malloc" scheme="http://idiotsky.top/tags/malloc/"/>
    
  </entry>
  
  <entry>
    <title>MySql中的锁机制</title>
    <link href="http://idiotsky.top/2018/09/10/mysql-lock/"/>
    <id>http://idiotsky.top/2018/09/10/mysql-lock/</id>
    <published>2018-09-10T09:51:52.000Z</published>
    <updated>2018-09-11T15:26:07.796Z</updated>
    
    <content type="html"><![CDATA[<h1 id="乐观锁与悲观锁"><a href="#乐观锁与悲观锁" class="headerlink" title="乐观锁与悲观锁"></a>乐观锁与悲观锁</h1><ul>
<li>乐观锁：每次读数据的时候都认为其他人不会修改，所以不会上锁，而是在更新的时候去判断在此期间有没有其他人更新了数据，可以使用版本号机制。在数据库中可以通过为数据表增加一个版本号字段实现。读取数据时将版本号一同读出，数据每次更新时对版本号加一。当我们更新的时候，判断数据库表对应记录的当前版本号与第一次取出来的版本号值进行比对，如果值相等，则予以更新，否则认为是过期数据。乐观锁适用于多读的应用类型，可以提高吞吐量。</li>
<li>悲观锁：每次读数据的时候都认为别人会修改，所以每次在读数据的时候都会上锁，这样别人想读这个数据时就会被阻塞。MySQL中就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在操作之前先上锁。</li>
</ul>
<a id="more"></a>
<h1 id="共享锁与排他锁"><a href="#共享锁与排他锁" class="headerlink" title="共享锁与排他锁"></a>共享锁与排他锁</h1><ul>
<li><p>共享锁：共享锁又叫做读锁或S锁，加上共享锁后在事务结束之前其他事务只能再加共享锁、只能对其进行读操作不能写操作，除此之外其他任何类型的锁都不能再加了。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 加上lock in share mode</span><br><span class="line"><span class="keyword">SELECT</span> description <span class="keyword">FROM</span> book_book <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>排他锁：排他锁又叫写锁或X锁，某个事务对数据加上排他锁后，只能这个事务对其进行读写，在此事务结束之前，其他事务不能对其加任何锁，可以读取,不能进行写操作，需等待其释放。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 加上for update</span><br><span class="line"><span class="keyword">SELECT</span> description <span class="keyword">FROM</span> book_book <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="行锁与表锁"><a href="#行锁与表锁" class="headerlink" title="行锁与表锁"></a>行锁与表锁</h1><blockquote>
<p>行锁与表锁区别在于锁的粒度，在Innodb引擎中既支持行锁也支持表锁(MyISAM引擎只支持表锁)，只有通过索引条件检索数据InnoDB才使用行级锁，否则，InnoDB将使用表锁。</p>
</blockquote>
<ul>
<li>表锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突概率高，并发度最低</li>
<li>行锁：开销大，加锁慢；会出现死锁；锁定粒度小，发生锁冲突的概率低，并发度高</li>
</ul>
<p>下面举两个例子说明上面几种锁：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 事务1</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> description <span class="keyword">FROM</span> book_book <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'JAVA编程思想'</span> <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line"># 事务2</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> book_book <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'new book'</span> <span class="keyword">WHERE</span> <span class="keyword">name</span> = <span class="string">'new'</span>;</span><br><span class="line"></span><br><span class="line"># 查看事务状态</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> INFORMATION_SCHEMA.INNODB_TRX;</span><br><span class="line"></span><br><span class="line">trx_id  trx_state       trx_started           trx_tables_locked    trx_rows_locked</span><br><span class="line">39452	<span class="keyword">LOCK</span> <span class="keyword">WAIT</span>	<span class="number">2018</span><span class="number">-09</span><span class="number">-08</span> <span class="number">19</span>:<span class="number">01</span>:<span class="number">39</span>	    <span class="number">1</span>	                <span class="number">1</span>	</span><br><span class="line"><span class="number">282907511143936</span>	RUNNING	<span class="number">2018</span><span class="number">-09</span><span class="number">-08</span> <span class="number">18</span>:<span class="number">58</span>:<span class="number">47</span>	    <span class="number">1</span>	                <span class="number">38</span></span><br></pre></td></tr></table></figure>
<p>事务1给book表加上了共享锁，事务2尝试修改book表发生了阻塞，查看事务状态可以知道事务一由于没有走索引使用了表锁。</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 事务1</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">SELECT</span> description <span class="keyword">FROM</span> book_book <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">2</span> <span class="keyword">lock</span> <span class="keyword">in</span> <span class="keyword">share</span> <span class="keyword">mode</span>;</span><br><span class="line"></span><br><span class="line"># 事务2</span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"><span class="keyword">UPDATE</span> book_book <span class="keyword">SET</span> <span class="keyword">name</span> = <span class="string">'new book'</span> <span class="keyword">WHERE</span> <span class="keyword">id</span> = <span class="number">1</span>; </span><br><span class="line"></span><br><span class="line"># 查看事务状态</span><br><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">FROM</span> INFORMATION_SCHEMA.INNODB_TRX;</span><br><span class="line"></span><br><span class="line">trx_id          trx_state   trx_started     trx_tables_locked    trx_rows_locked</span><br><span class="line">39454	        RUNNING	2018-09-08 19:10:44	1	                1	</span><br><span class="line">282907511143936	RUNNING	2018-09-08 19:10:35	1	                1</span><br></pre></td></tr></table></figure>
<p>事务1给book表加上了共享锁，事务2尝试修改book表并没有发生阻塞。这是由于事务一和事务二都走了索引，所以使用的是行锁，并不会发生阻塞。</p>
<h1 id="意向锁-InnoDB特有"><a href="#意向锁-InnoDB特有" class="headerlink" title="意向锁(InnoDB特有)"></a>意向锁(InnoDB特有)</h1><blockquote>
<p>意向锁的意义在于方便检测表锁和行锁之间的冲突</p>
</blockquote>
<ul>
<li>意向锁：意向锁是一种表级锁，代表要对某行记录进行操作。分为意向共享锁(IS)和意向排他锁(IX)。</li>
<li>行锁和表锁之间的冲突：事务A给表中的某一行加了共享锁，让这一行只能读不能写。之后事务B申请整个表的排他锁。如果事务B申请成功，那么它就能修改表中的任意一行，这与A持有的行锁是冲突的。InnoDB引入了意向锁来判断它们之间的冲突。<ul>
<li>没有意向锁的情况：1、判断表是否已被其他事务用表锁锁表。2、判断表中的每一行是否已被行锁锁住，这样要遍历整个表，效率很低。</li>
<li>意向锁存在的情况：1、判断表是否已被其他事务用表锁锁表。2、判断表上是否有意向锁</li>
</ul>
</li>
<li>意向锁存在时申请锁：申请意向锁的动作是数据库完成的，上述例子中事务A申请一行的行锁的时候，数据库会自动先开始申请表的意向锁，当事务B申请表的排他锁时检测到存在意向锁则会阻塞。</li>
<li>意向锁会不会存在冲突： 意向锁之间不会冲突, 因为意向锁只是代表要对某行记录进行操作。</li>
</ul>
<h1 id="各种锁之间的共存情况"><a href="#各种锁之间的共存情况" class="headerlink" title="各种锁之间的共存情况"></a>各种锁之间的共存情况</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">       IX     IS       X      S</span><br><span class="line">IX    兼容    兼容    冲突    冲突</span><br><span class="line">IS    兼容    兼容    冲突    兼容</span><br><span class="line">X     冲突    冲突    冲突    冲突</span><br><span class="line">S     冲突    兼容    冲突    兼容</span><br></pre></td></tr></table></figure>
<h1 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h1><ul>
<li>概念：两个或两个以上的事务在执行过程中，因争夺资源而造成的一种互相等待的现象。</li>
<li>存在条件：1、 互斥条件：一个资源每次只能被一个事务使用。2、 请求与保持条件：一个事务因请求资源而阻塞时，对已获得的资源保持不放。3、不剥夺条件：已获得的资源，在末使用完之前不能强行剥夺。4、循环等待条件：形成一种头尾相接的循环等待关系</li>
<li>解除正在死锁的状态：撤销其中一个事务</li>
</ul>
<h1 id="间隙锁-Next-Key锁"><a href="#间隙锁-Next-Key锁" class="headerlink" title="间隙锁(Next-Key锁)"></a>间隙锁(Next-Key锁)</h1><blockquote>
<p>间隙锁使得InnoDB解决幻读问题，加上MVCC使得InnoDB的RR隔离级别实现了串行化级别的效果，并且保留了比较好的并发性能。</p>
</blockquote>
<p>定义：当我们用范围条件检索数据时请求共享或排他锁时，InnoDB会给符合条件的已有数据的索引加锁；对于键值在条件范围内但并不存在的记录，叫做间隙(GAP)，InnoDB也会对这个”间隙”加锁，这种锁机制就是间隙锁。</p>
<p>例如：book表中存在bookId 1-80，90-99的记录。SELECT * FROM book WHERE bookId &lt; 100 FOR UPDATE。InnoDB不仅会对bookId值为1-80，90-99的记录加锁，也会对bookId在81-89之间(这些记录并不存在)的间隙加锁。这样就能避免事务隔离级别可重复读下的幻读。</p>
<h1 id="MVCC-多版本并发控制"><a href="#MVCC-多版本并发控制" class="headerlink" title="MVCC(多版本并发控制)"></a>MVCC(多版本并发控制)</h1><blockquote>
<p>MVCC (Multiversion Concurrency Control)，即多版本并发控制技术,它使得大部分支持行锁的事务引擎，不再单纯的使用行锁来进行数据库的并发控制，取而代之的是把数据库的行锁与行的多个版本结合起来，只需要很小的开销,就可以实现非锁定读，从而大大提高数据库系统的并发性能</p>
</blockquote>
<h2 id="MVCC实现原理"><a href="#MVCC实现原理" class="headerlink" title="MVCC实现原理"></a>MVCC实现原理</h2><p>innodb MVCC主要是为Repeatable-Read事务隔离级别做的。在此隔离级别下，A、B客户端所示的数据相互隔离，互相更新不可见</p>
<p>了解innodb的行结构、Read-View的结构对于理解innodb mvcc的实现由重要意义</p>
<p>innodb存储的最基本row中包含一些额外的存储信息 DATA_TRX_ID，DATA_ROLL_PTR，DB_ROW_ID，DELETE BIT</p>
<ul>
<li>6字节的DATA_TRX_ID 标记了最新更新这条行记录的transaction id，每处理一个事务，其值自动+1</li>
<li>7字节的DATA_ROLL_PTR 指向当前记录项的rollback segment的undo log记录，找之前版本的数据就是通过这个指</li>
<li>6字节的DB_ROW_ID，当由innodb自动产生聚集索引时，聚集索引包括这个DB_ROW_ID的值，否则聚集索引中不包括这个值.，这个用于索引当中</li>
<li>DELETE BIT位用于标识该记录是否被删除，这里的不是真正的删除数据，而是标志出来的删除。真正意义的删除是在commit的时候</li>
</ul>
<p><a href="http://idiotsky.top/images3/mysql-lock.png"><img src="http://idiotsky.top/images3/mysql-lock.png" alt=""></a></p>
<p>具体的执行过程</p>
<p>begin-&gt;用排他锁锁定该行-&gt;记录redo log-&gt;记录undo log-&gt;修改当前行的值，写事务编号，回滚指针指向undo log中的修改前的行</p>
<p>上述过程确切地说是描述了UPDATE的事务过程，其实undo log分insert和update undo log，因为insert时，原始的数据并不存在，所以回滚时把insert undo log丢弃即可，而update undo log则必须遵守上述过程</p>
<p>下面分别以 <strong>select</strong>、<strong>delete</strong>、 <strong>insert</strong>、 <strong>update</strong>语句来说明</p>
<p><strong>SELECT</strong></p>
<p>Innodb检查每行数据，确保他们符合两个标准：</p>
<p>1.InnoDB只查找版本早于当前事务版本的数据行(也就是数据行的版本必须小于等于事务的版本)，这确保当前事务读取的行都是事务之前已经存在的，或者是由当前事务创建或修改的行<br>2.行的删除操作的版本一定是未定义的或者大于当前事务的版本号，确定了当前事务开始之前，行没有被删除</p>
<p>符合了以上两点则返回查询结果。</p>
<p><strong>INSERT</strong></p>
<p>InnoDB为每个新增行记录当前系统版本号作为创建ID。</p>
<p><strong>DELETE</strong></p>
<p>InnoDB为每个删除行的记录当前系统版本号作为行的删除ID。</p>
<p><strong>UPDATE</strong></p>
<p>InnoDB复制了一行。这个新行的版本号使用了系统版本号。它也把系统版本号作为了删除行的版本。</p>
<p><strong>说明</strong></p>
<p>insert操作时 “创建时间”=DB_ROW_ID，这时，“删除时间 ”是未定义的；</p>
<p>update时，复制新增行的“创建时间”=DB_ROW_ID，删除时间未定义，旧数据行“创建时间”不变，删除时间=该事务的DB_ROW_ID；</p>
<p>delete操作，相应数据行的“创建时间”不变，删除时间=该事务的DB_ROW_ID；</p>
<p>select操作对两者都不修改，只读相应的数据</p>
<h2 id="对于MVCC的总结"><a href="#对于MVCC的总结" class="headerlink" title="对于MVCC的总结"></a>对于MVCC的总结</h2><p>上述更新前建立undo log，根据各种策略读取时非阻塞就是MVCC，undo log中的行就是MVCC中的多版本，这个可能与我们所理解的MVCC有较大的出入，一般我们认为MVCC有下面几个特点：</p>
<ul>
<li>每行数据都存在一个版本，每次数据更新时都更新该版本</li>
<li>修改时Copy出当前版本随意修改，各个事务之间无干扰</li>
<li>保存时比较版本号，如果成功（commit），则覆盖原记录；失败则放弃copy（rollback）</li>
</ul>
<p>就是每行都有版本号，保存时根据版本号决定是否成功，听起来含有乐观锁的味道，而Innodb的实现方式是：</p>
<ul>
<li>事务以排他锁的形式修改原始数据</li>
<li>把修改前的数据存放于undo log，通过回滚指针与主数据关联</li>
<li>修改成功（commit）啥都不做，失败则恢复undo log中的数据（rollback）</li>
</ul>
<p>二者最本质的区别是，当修改数据时是否要排他锁定，如果锁定了还算不算是MVCC？ </p>
<p>Innodb的实现真算不上MVCC，因为并没有实现核心的多版本共存，undo log中的内容只是串行化的结果，记录了多个事务的过程，不属于多版本共存。但理想的MVCC是难以实现的，当事务仅修改一行记录使用理想的MVCC模式是没有问题的，可以通过比较版本号进行回滚；但当事务影响到多行数据时，理想的MVCC据无能为力了。</p>
<p>比如，如果Transaciton1执行理想的MVCC，修改Row1成功，而修改Row2失败，此时需要回滚Row1，但因为Row1没有被锁定，其数据可能又被Transaction2所修改，如果此时回滚Row1的内容，则会破坏Transaction2的修改结果，导致Transaction2违反ACID。</p>
<p>理想MVCC难以实现的根本原因在于企图通过乐观锁代替二段提交。修改两行数据，但为了保证其一致性，与修改两个分布式系统中的数据并无区别，而二提交是目前这种场景保证一致性的唯一手段。二段提交的本质是锁定，乐观锁的本质是消除锁定，二者矛盾，故理想的MVCC难以真正在实际中被应用，Innodb只是借了MVCC这个名字，提供了读的非阻塞而已。</p>
<h2 id="快照读和当前读"><a href="#快照读和当前读" class="headerlink" title="快照读和当前读"></a>快照读和当前读</h2><p>在一个支持MVCC并发控制的系统中，哪些读操作是快照读？哪些操作又是当前读呢？以MySQL InnoDB为例：</p>
<p>快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from table where ?;</span><br></pre></td></tr></table></figure>
<p>当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">select * from table where ? lock in share mode;</span><br><span class="line">select * from table where ? for update;</span><br><span class="line">insert into table values (…);</span><br><span class="line">update table set ? where ?;</span><br><span class="line">delete from table where ?;</span><br></pre></td></tr></table></figure></p>
<p>所有以上的语句，都属于当前读，读取记录的最新版本。并且，读取之后，还需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句，对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://juejin.im/post/5b9332685188255c432279aa" target="_blank" rel="noopener">https://juejin.im/post/5b9332685188255c432279aa</a><br><a href="https://www.cnblogs.com/chenpingzhao/p/5041968.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenpingzhao/p/5041968.html</a><br><a href="https://www.cnblogs.com/chenpingzhao/p/5065316.html" target="_blank" rel="noopener">https://www.cnblogs.com/chenpingzhao/p/5065316.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;乐观锁与悲观锁&quot;&gt;&lt;a href=&quot;#乐观锁与悲观锁&quot; class=&quot;headerlink&quot; title=&quot;乐观锁与悲观锁&quot;&gt;&lt;/a&gt;乐观锁与悲观锁&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;乐观锁：每次读数据的时候都认为其他人不会修改，所以不会上锁，而是在更新的时候去判断在此期间有没有其他人更新了数据，可以使用版本号机制。在数据库中可以通过为数据表增加一个版本号字段实现。读取数据时将版本号一同读出，数据每次更新时对版本号加一。当我们更新的时候，判断数据库表对应记录的当前版本号与第一次取出来的版本号值进行比对，如果值相等，则予以更新，否则认为是过期数据。乐观锁适用于多读的应用类型，可以提高吞吐量。&lt;/li&gt;
&lt;li&gt;悲观锁：每次读数据的时候都认为别人会修改，所以每次在读数据的时候都会上锁，这样别人想读这个数据时就会被阻塞。MySQL中就用到了很多这种锁机制，比如行锁，表锁等，读锁，写锁等，都是在操作之前先上锁。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://idiotsky.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://idiotsky.top/tags/mysql/"/>
    
      <category term="悲观锁" scheme="http://idiotsky.top/tags/%E6%82%B2%E8%A7%82%E9%94%81/"/>
    
      <category term="乐观锁" scheme="http://idiotsky.top/tags/%E4%B9%90%E8%A7%82%E9%94%81/"/>
    
      <category term="共享锁" scheme="http://idiotsky.top/tags/%E5%85%B1%E4%BA%AB%E9%94%81/"/>
    
      <category term="排他锁" scheme="http://idiotsky.top/tags/%E6%8E%92%E4%BB%96%E9%94%81/"/>
    
      <category term="间隙锁" scheme="http://idiotsky.top/tags/%E9%97%B4%E9%9A%99%E9%94%81/"/>
    
      <category term="意向锁" scheme="http://idiotsky.top/tags/%E6%84%8F%E5%90%91%E9%94%81/"/>
    
  </entry>
  
  <entry>
    <title>epoll的ET和LT举例</title>
    <link href="http://idiotsky.top/2018/08/14/epoll-et-lt/"/>
    <id>http://idiotsky.top/2018/08/14/epoll-et-lt/</id>
    <published>2018-08-14T13:30:07.000Z</published>
    <updated>2018-08-16T13:27:15.541Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ET"><a href="#ET" class="headerlink" title="ET"></a>ET</h1><p>Edge Triggered (ET) 边缘触发只有数据到来,才触发,不管缓存区中是否还有数据。</p>
<p>LT(level triggered)是缺省的工作方式，并且同时支持block(阻塞)和no-block(非阻塞) socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。传统的select/poll都是这种模型的代表．</p>
<p>优点：当进行socket通信的时候，保证了数据的完整输出，进行IO操作的时候，如果还有数据，就会一直的通知你。</p>
<p>缺点：由于只要还有数据，内核就会不停的从内核空间转到用户空间，所有占用了大量内核资源，试想一下当有大量数据到来的时候，每次读取一个字节，这样就会不停的进行切换。内核资源的浪费严重。效率来讲也是很低的。</p>
<h1 id="LT"><a href="#LT" class="headerlink" title="LT"></a>LT</h1><p>Level Triggered (LT) 水平触发只要有数据都会触发。</p>
<p>ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知。请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once).</p>
<p>优点：每次内核只会通知一次，大大减少了内核资源的浪费，提高效率。</p>
<p>缺点：不能保证数据的完整。不能及时的取出所有的数据。</p>
<p>应用场景： 处理大数据。使用non-block(非阻塞)模式的socket。</p>
<a id="more"></a>
<h1 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h1><p>下面是一个客户端和服务端的代码，客户端每次输出10个字节，然后休眠5秒，服务器会分别使用LT和ET来展示他们的不同。</p>
<p>客户端代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE  10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PROT 8000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">seraddr</span>;</span></span><br><span class="line">    <span class="keyword">char</span> buf[MAXLINE];</span><br><span class="line">    <span class="keyword">int</span> connfd, i;</span><br><span class="line">    <span class="keyword">char</span> ch = <span class="string">'a'</span>;</span><br><span class="line">    connfd = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line">    bzero(&amp;seraddr,<span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    seraddr.sin_family = AF_INET;</span><br><span class="line">    seraddr.sin_port = htons(SERV_PROT);</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> <span class="title">s</span>;</span></span><br><span class="line">    inet_pton(AF_INET, <span class="string">"127.0.0.1"</span>, (<span class="keyword">void</span> *)&amp;s);</span><br><span class="line">    seraddr.sin_addr=s;</span><br><span class="line">    connect(connfd, (struct sockaddr *)&amp;seraddr, <span class="keyword">sizeof</span>(seraddr));</span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i &lt; MAXLINE/<span class="number">2</span>;i++)&#123;</span><br><span class="line">            buf[i] = ch;</span><br><span class="line">        &#125;</span><br><span class="line">        buf[i<span class="number">-1</span>] = <span class="string">'\n'</span>;</span><br><span class="line">        ch++;</span><br><span class="line">        <span class="keyword">for</span>(;i&lt;MAXLINE;i++)</span><br><span class="line">            buf[i] = ch;</span><br><span class="line">        buf[i<span class="number">-1</span>] = <span class="string">'\n'</span>;</span><br><span class="line">        ch++;</span><br><span class="line">        write(connfd, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">        sleep(<span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(connfd);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端代码（LT）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/wait.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/epoll.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLINE 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SERV_PORT 8000</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>, <span class="title">cliaddr</span>;</span></span><br><span class="line"> <span class="keyword">socklen_t</span> cliaddr_len;</span><br><span class="line"> <span class="keyword">int</span> listenfd, connfd;</span><br><span class="line"> <span class="keyword">char</span> buf[MAXLINE];</span><br><span class="line"> <span class="keyword">char</span> str[INET_ADDRSTRLEN];</span><br><span class="line"> <span class="keyword">int</span> i, efd;</span><br><span class="line"> listenfd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"> bzero(&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line"> servaddr.sin_family = AF_INET;</span><br><span class="line"> servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"> servaddr.sin_port = htons(SERV_PORT);</span><br><span class="line"> bind(listenfd, (struct sockaddr *)&amp;servaddr, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line"> listen(listenfd, <span class="number">20</span>);</span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">event</span>;</span></span><br><span class="line"> <span class="class"><span class="keyword">struct</span> <span class="title">epoll_event</span> <span class="title">resevent</span>[10];</span></span><br><span class="line"> <span class="keyword">int</span> res, len;</span><br><span class="line"> efd = epoll_create(<span class="number">10</span>);</span><br><span class="line"> event.events = EPOLLIN;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"Accepting connections ...\n"</span>);</span><br><span class="line"> cliaddr_len = <span class="keyword">sizeof</span>(cliaddr);</span><br><span class="line"> connfd = accept(listenfd, (struct sockaddr *)&amp;cliaddr, &amp;cliaddr_len);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">"received from %s at PORT %d\n"</span>,</span><br><span class="line"> inet_ntop(AF_INET, &amp;cliaddr.sin_addr, str, <span class="keyword">sizeof</span>(str)),</span><br><span class="line"> ntohs(cliaddr.sin_port));</span><br><span class="line"> event.data.fd = connfd;</span><br><span class="line"> epoll_ctl(efd, EPOLL_CTL_ADD, connfd, &amp;event);</span><br><span class="line"> <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  res = epoll_wait(efd, resevent, <span class="number">10</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span> (resevent[<span class="number">0</span>].data.fd == connfd) &#123;</span><br><span class="line">  len = read(connfd, buf, MAXLINE/<span class="number">2</span>);</span><br><span class="line">  write(STDOUT_FILENO, buf, len);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./server</span><br><span class="line">Accepting connections ...</span><br><span class="line">received from 127.0.0.1 at PORT 40580</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line"># 等5秒</span><br><span class="line">cccc</span><br><span class="line">dddd</span><br><span class="line"># 等5秒</span><br><span class="line"># 以下输出省略</span><br></pre></td></tr></table></figure>
<p>上面输出符合预期</p>
<p>接下里把服务器改成ET模式会怎么样呢，下面是要修改的地方</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">32c32</span><br><span class="line">&lt;  event.events = EPOLLIN;</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt; event.events = EPOLLIN|EPOLLET;</span><br></pre></td></tr></table></figure>
<p>输出结果如下</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">$ ./server</span><br><span class="line">Accepting connections ...</span><br><span class="line">received from 127.0.0.1 at PORT 40580</span><br><span class="line">aaaa</span><br><span class="line"># 等5秒</span><br><span class="line">bbbb</span><br><span class="line"># 等5秒</span><br><span class="line">cccc</span><br><span class="line"># 等5秒</span><br><span class="line">dddd</span><br><span class="line"># 等5秒</span><br><span class="line"># 以下输出省略</span><br></pre></td></tr></table></figure>
<p>问题来了，输出的东西比ET的时候慢了半拍了，原因在于以下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">  res = epoll_wait(efd, resevent, <span class="number">10</span>, <span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">if</span> (resevent[<span class="number">0</span>].data.fd == connfd) &#123;</span><br><span class="line">  len = read(connfd, buf, MAXLINE/<span class="number">2</span>);</span><br><span class="line">  write(STDOUT_FILENO, buf, len);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><code>read</code>函数只取5个字节，之后就没有输出了，等客户端下次来数据的时候再次触发下5个字节，这是ET模式的正常表现形式，而LT会在下次循环的时候，会再次触发可读，然后<code>epoll_wait</code>返回，接下来继续把剩下5个字节读入。</p>
<p>那接下来修改ET模式</p>
<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">9a10</span><br><span class="line">&gt; #include &lt;fcntl.h&gt;</span><br><span class="line">38a40,42</span><br><span class="line">&gt; int flag=fcntl(connfd,F_GETFL);</span><br><span class="line">&gt; flag|=O_NONBLOCK;</span><br><span class="line">&gt; fcntl(connfd,F_SETFL,flag);</span><br><span class="line">44,45c48,50</span><br><span class="line">&lt;   len = read(connfd, buf, MAXLINE/2);</span><br><span class="line">&lt;   write(STDOUT_FILENO, buf, len);</span><br><span class="line"><span class="comment">---</span></span><br><span class="line">&gt;   while ((len = read(connfd, buf, MAXLINE/2)) &gt;0 )</span><br><span class="line">&gt;         write(STDOUT_FILENO, buf, len);</span><br><span class="line">&gt;    &#125;</span><br><span class="line">47d51</span><br><span class="line">&lt; &#125;</span><br></pre></td></tr></table></figure>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./server</span><br><span class="line">Accepting connections ...</span><br><span class="line">received from 127.0.0.1 at PORT 40580</span><br><span class="line">aaaa</span><br><span class="line">bbbb</span><br><span class="line"># 等5秒</span><br><span class="line">cccc</span><br><span class="line">dddd</span><br><span class="line"># 等5秒</span><br><span class="line"># 以下输出省略</span><br></pre></td></tr></table></figure>
<p>正常了，上面修改的部分，主要有两点：</p>
<ul>
<li>把套接字描述符改成非阻塞</li>
<li>循环读出所有数据</li>
</ul>
<p><strong>为什么ET模式只能用在非阻塞的套接字呢，通过上面例子可以看到，如果是阻塞的话，在读出10个字节之后，循环还会继续，<code>read</code>函数会阻塞直到下次数据到来，这样的话，如果是多连接的情况下，所有连接的数据都会阻塞在这个连接的<code>read</code>函数里面了，所以ET模式只支持非阻塞是有道理的。</strong></p>
<h1 id="实验代码"><a href="#实验代码" class="headerlink" title="实验代码"></a>实验代码</h1><p>所有代码在这个<a href="https://github.com/ejunjsh/c-code/tree/master/epoll" target="_blank" rel="noopener">链接</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;ET&quot;&gt;&lt;a href=&quot;#ET&quot; class=&quot;headerlink&quot; title=&quot;ET&quot;&gt;&lt;/a&gt;ET&lt;/h1&gt;&lt;p&gt;Edge Triggered (ET) 边缘触发只有数据到来,才触发,不管缓存区中是否还有数据。&lt;/p&gt;
&lt;p&gt;LT(level triggered)是缺省的工作方式，并且同时支持block(阻塞)和no-block(非阻塞) socket.在这种做法中，内核告诉你一个文件描述符是否就绪了，然后你可以对这个就绪的fd进行IO操作。如果你不作任何操作，内核还是会继续通知你的，所以，这种模式编程出错误可能性要小一点。传统的select/poll都是这种模型的代表．&lt;/p&gt;
&lt;p&gt;优点：当进行socket通信的时候，保证了数据的完整输出，进行IO操作的时候，如果还有数据，就会一直的通知你。&lt;/p&gt;
&lt;p&gt;缺点：由于只要还有数据，内核就会不停的从内核空间转到用户空间，所有占用了大量内核资源，试想一下当有大量数据到来的时候，每次读取一个字节，这样就会不停的进行切换。内核资源的浪费严重。效率来讲也是很低的。&lt;/p&gt;
&lt;h1 id=&quot;LT&quot;&gt;&lt;a href=&quot;#LT&quot; class=&quot;headerlink&quot; title=&quot;LT&quot;&gt;&lt;/a&gt;LT&lt;/h1&gt;&lt;p&gt;Level Triggered (LT) 水平触发只要有数据都会触发。&lt;/p&gt;
&lt;p&gt;ET(edge-triggered)是高速工作方式，只支持no-block socket。在这种模式下，当描述符从未就绪变为就绪时，内核通过epoll告诉你。然后它会假设你知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知。请注意，如果一直不对这个fd作IO操作(从而导致它再次变成未就绪)，内核不会发送更多的通知(only once).&lt;/p&gt;
&lt;p&gt;优点：每次内核只会通知一次，大大减少了内核资源的浪费，提高效率。&lt;/p&gt;
&lt;p&gt;缺点：不能保证数据的完整。不能及时的取出所有的数据。&lt;/p&gt;
&lt;p&gt;应用场景： 处理大数据。使用non-block(非阻塞)模式的socket。&lt;/p&gt;
    
    </summary>
    
      <category term="c" scheme="http://idiotsky.top/categories/c/"/>
    
    
      <category term="c" scheme="http://idiotsky.top/tags/c/"/>
    
      <category term="epoll" scheme="http://idiotsky.top/tags/epoll/"/>
    
  </entry>
  
  <entry>
    <title>深入go之goroutine</title>
    <link href="http://idiotsky.top/2018/08/12/go-goroutine/"/>
    <id>http://idiotsky.top/2018/08/12/go-goroutine/</id>
    <published>2018-08-12T11:56:31.000Z</published>
    <updated>2018-08-12T13:25:03.801Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>goroutine是go的核心，没有goroutine，go就没什么意思了👿。goroutine离不开协程，线程和并发，所以下面会说说相关的内容。</p>
</blockquote>
<h1 id="协程"><a href="#协程" class="headerlink" title="协程"></a>协程</h1><p>协程(coroutine)其实就是一个函数，方法或者例程（routine）。一般情况下函数都是在用户线程下面执行的，线程的调度由内核触发，所以函数在执行过程中，用户线程没办法控制函数的执行调度，只能任由内核主宰。协程就不同，它可以由用户线程控制调度，在任何时候调度协程的执行。函数在执行时，内核调度会陷入内核并保存当前线程的栈和上下文，然后恢复之前被停止线程继续执行，代价比较高。而协程的调度，不用陷入内核，用户线程只是保存当前协程的栈和上下文，恢复之前的被停止协程继续执行。</p>
<p>还有种说法是说函数是协程的一种特例。因为函数只有在return语句才会返回，而协程可以在任何时刻返回。</p>
<p>协程很早就提出来了，可是在现在才火起来吧，大概由于某种语言（lua）的广泛使用吧。而go更是把协程用到底，基本可以理解go的所有代码都跑在协程下，并用goroutine来代表它自己的协程。<br><a id="more"></a></p>
<h1 id="协程-vs-线程"><a href="#协程-vs-线程" class="headerlink" title="协程 vs 线程"></a>协程 vs 线程</h1><p>线程是处理器调度的基本单位，在CPU切分时间片的前提下，操作系统进行抢占式调度。</p>
<p>协程也可以理解为一种更小的调度基本单位。它由运行在用户线程的调度器来调度。</p>
<table>
<thead>
<tr>
<th>名字</th>
<th>调度</th>
<th>内存消耗</th>
<th>切换代价</th>
</tr>
</thead>
<tbody>
<tr>
<td>线程</td>
<td>内核进行调度</td>
<td>较大（1MB~8MB）</td>
<td>陷入内核，各种寄存器的保存和刷新</td>
</tr>
<tr>
<td>协程</td>
<td>用户线程调度</td>
<td>较小（2KB~5KB）</td>
<td>各种寄存器的保存和刷新</td>
</tr>
</tbody>
</table>
<p>从上表可以发现，线程比协程更加耗费内存，而且还会造成陷入内核。但是协程的切换完全交给用户线程来调度，这个增加了实现的难度。还有就是协程的调度是由单个线程调度，如果处理器是多核的话，没办法充分利用。很庆幸的是，go已经实现了它自己的协程调度逻辑，并且充分利用多线程来调度goroutine。</p>
<h1 id="要协程何用？"><a href="#要协程何用？" class="headerlink" title="要协程何用？"></a>要协程何用？</h1><p>协程能火也是有各种理由的。</p>
<ul>
<li>高并发处理。在用户空间切换上下文，不用陷入内核来做线程切换，避免不必要用户空间和内核空间的数据拷贝。</li>
<li>用同步的方式去写异步代码，高效率且不容易出错 (nodejs里面的asyn/await，就是这种)</li>
<li>非抢占式模型，能控制中断位置，不会发生由于强行切换线程导致的资源竞争。(极端情况下还是会执行抢占，防止协程长时间占用CPU，但这不是标准抢占式模型）</li>
</ul>
<h1 id="并发-VS-并行"><a href="#并发-VS-并行" class="headerlink" title="并发 VS 并行"></a>并发 VS 并行</h1><p>先上图：</p>
<p><a href="http://idiotsky.top/images2/go-goroutine.jpg"><img src="http://idiotsky.top/images2/go-goroutine.jpg" alt=""></a></p>
<ul>
<li>并发：处理器被划分为一个个时间分片，多个线程在处理器中交替执行，同一个时刻，只有一个线程被执行（通用地来说，支持并发是一种系统拥有交替执行多个任务的能力的表现）</li>
<li>并行：多个线程，在多个处理器上同时执行。</li>
</ul>
<blockquote>
<p>举个最简单的例子，医院诊室看病。把病人当做线程，医生当做处理器。</p>
</blockquote>
<blockquote>
<p>并发：只有一个医生，病人A看了一会儿，医生让他下楼拍X光，然后病人B进来看诊，之后医生让B去做彩超，然后A此时回来了，医生继续给A看病。（任意瞬间，医生只在给其中一个人看病）</p>
</blockquote>
<blockquote>
<p>并行： 有3个医生，3个病人，一个病人对应一个医生，同时问诊。</p>
</blockquote>
<p>如果并发交替的速度够快，就能达到“逻辑并行”的效果，对外看起来就和并行一样。</p>
<p>并发执行多线程并不能真的充分利用CPU，达到减少单个线程执行时间的效果，这种交替挂起执行的方式却能够给用户带来每个线程都在”同时执行“的感觉，从而增强了服务的响应速度。就像上面例子中的病人B不用一直排队等待 A拍完X光并且医生确定A的病看完了 才能去看病。</p>
<h1 id="调度"><a href="#调度" class="headerlink" title="调度"></a>调度</h1><p>goroutine的调度可以理解为多线程调度协程（goroutine）。所以这里调度会有三个角色：线程，调度器，协程。它们分别用M,P,G来表示吧。</p>
<p><a href="http://idiotsky.top/images2/go-goroutine-1.jpg"><img src="http://idiotsky.top/images2/go-goroutine-1.jpg" alt=""></a></p>
<ul>
<li>G: 表示goroutine，存储了goroutine的执行stack信息、goroutine状态以及goroutine的任务函数等；另外G对象是可以重用的。</li>
<li>P: 表示逻辑processor，P的数量决定了系统内最大可并行的G的数量（前提：系统的物理cpu核数&gt;=P的数量，GOMAXPROCS环境变量代表的个数是P的个数，推荐值为CPU的核心数）；P的最大作用还是其拥有的各种G对象队列、链表、一些cache和状态。</li>
<li>M: M代表着真正的执行计算资源。在绑定有效的p后，进入schedule循环；而schedule循环的机制大致是从各种队列、p的本地队列中获取G，切换到G的执行栈上并执行G的函数，调用goexit做清理工作并回到m，如此反复。M并不保留G状态，这是G可以跨M调度的基础。</li>
</ul>
<p><strong>下面是G、P、M定义的代码片段：</strong><br><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//src/runtime/runtime2.go</span></span><br><span class="line"><span class="keyword">type</span> g <span class="keyword">struct</span> &#123;</span><br><span class="line">        stack      stack   <span class="comment">// offset known to runtime/cgo</span></span><br><span class="line">        sched     gobuf</span><br><span class="line">        goid        <span class="keyword">int64</span></span><br><span class="line">        gopc       <span class="keyword">uintptr</span> <span class="comment">// pc of go statement that created this goroutine</span></span><br><span class="line">        startpc    <span class="keyword">uintptr</span> <span class="comment">// pc of goroutine function</span></span><br><span class="line">        ... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> p <span class="keyword">struct</span> &#123;</span><br><span class="line">    lock mutex</span><br><span class="line"></span><br><span class="line">    id          <span class="keyword">int32</span></span><br><span class="line">    status      <span class="keyword">uint32</span> <span class="comment">// one of pidle/prunning/...</span></span><br><span class="line"></span><br><span class="line">    mcache      *mcache</span><br><span class="line">    racectx     <span class="keyword">uintptr</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Queue of runnable goroutines. Accessed without lock.</span></span><br><span class="line">    runqhead <span class="keyword">uint32</span></span><br><span class="line">    runqtail <span class="keyword">uint32</span></span><br><span class="line">    runq     [<span class="number">256</span>]guintptr</span><br><span class="line"></span><br><span class="line">    runnext guintptr</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Available G's (status == Gdead)</span></span><br><span class="line">    gfree    *g</span><br><span class="line">    gfreecnt <span class="keyword">int32</span></span><br><span class="line"></span><br><span class="line">  ... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> m <span class="keyword">struct</span> &#123;</span><br><span class="line">    g0      *g     <span class="comment">// goroutine with scheduling stack</span></span><br><span class="line">    mstartfn      <span class="function"><span class="keyword">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    <span class="title">curg</span>          *<span class="title">g</span>       // <span class="title">current</span> <span class="title">running</span> <span class="title">goroutine</span></span></span><br><span class="line"><span class="function"> .... ..</span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure></p>
<p><a href="http://idiotsky.top/images2/go-goroutine-2.jpg"><img src="http://idiotsky.top/images2/go-goroutine-2.jpg" alt=""></a></p>
<p>上图是2个M（线程），每个线程对应一个处理器（P），M是必须关联P才能执行协程（G）的。图中蓝G代表的是运行中的goroutine，灰G表示的待执行的Goroutine，待执行的Goroutine存储在 P 中的一个局部队列中，此时P执行Goroutine会这个队列中取，不用加锁，提高了并发度。（Go1.0版本中，调度器取Goroutine是去一个全局队列中取，需要加锁，线程会经常阻塞等待锁）</p>
<p>下面更加清晰说明整个结构</p>
<p><a href="http://idiotsky.top/images2/go-goroutine-5.png"><img src="http://idiotsky.top/images2/go-goroutine-5.png" alt=""></a></p>
<p><strong>如果其中一个G执行的时候，发生了系统调用，阻塞了怎么办？</strong></p>
<p><a href="http://idiotsky.top/images2/go-goroutine-3.jpg"><img src="http://idiotsky.top/images2/go-goroutine-3.jpg" alt=""></a></p>
<p>上图左边，G0中陷入系统调用，导致M0阻塞。</p>
<p>此时，M0放弃了它的P，让M1去处理P中剩下的Goroutine。这里的M1可能是在线程缓存中取的，或者运行中生成的。</p>
<p>当M0从系统调用中恢复，它会去别的M中找P来执行G0（比如说别的M阻塞丢出了P），如果没有P，那么它会把G0放到全局队列中，并且把它自己放到线程缓存中。</p>
<p>全局队列保存了Goroutine，当各自P中的局部队列没有Goroutine时，P会到全局队列中取Goroutine。并且即使P中局部队列有Goroutine，也会周期性地从全局队列中取Goroutine，保持全局队列中的Goroutine能够尽快被执行。</p>
<p>处理系统调用，也是go程序为什么跑在多线程上的一个原因，即使GOMAXPROCS是1，也可能会有多个工作线程。</p>
<p><strong>当P局部队列不均衡时怎么处理？如果有多个P，其中一个P的局部队列Goroutine执行完了。</strong></p>
<p><a href="http://idiotsky.top/images2/go-goroutine-4.jpg"><img src="http://idiotsky.top/images2/go-goroutine-4.jpg" alt=""></a></p>
<p>如果一个P局部队列为空，那么它尝试从全局队列中取Goroutine，如全局队列为空，则会随机从其它P的局部队列中“挪”一半Goroutine到自己的队列当中， 以保证所有的M都是有任务执行的，间接做到负载均衡（可以参考go源码的findrunnable()函数 ）</p>
<p><strong>channel阻塞怎么办</strong></p>
<p>如果G被阻塞在某个channel操作上时，G会被放置到某个wait队列中，而M会尝试运行下一个runnable的G；如果此时没有runnable的G供m运行，那么m将解绑P，并进入sleep状态。当channel操作完成，在wait队列中的G会被唤醒，标记为runnable，放入到某P的队列中，绑定一个M继续执行。</p>
<p><strong>网络I/O和文件I/O怎么办</strong></p>
<p>Go runtime已经实现了<a href="http://morsmachine.dk/netpoller" target="_blank" rel="noopener">netpoller</a>，这使得即便G发起网络I/O操作也不会导致M被阻塞（仅阻塞G），从而不会导致大量M被创建出来。但是对于regular file的I/O操作一旦阻塞，那么M将进入sleep状态，等待I/O返回后被唤醒；这种情况下P将与sleep的M分离，再选择一个idle的M。如果此时没有idle的M，则会新创建一个M，这就是为何大量I/O操作导致大量Thread被创建的原因。</p>
<p><strong>遇到锁怎么办</strong></p>
<p>go的锁不是系统级别的MUTEX锁，而是轻量级的CAS锁，所以抢锁失败不会阻塞M，而是阻塞G(阻塞之前还自旋一下看看能不能再抢到锁)，然后这个G就会被正常的调度出去，在某个时刻又调度回来继续抢锁。</p>
<p><strong>如果一个P连续执行长时间，没有切换G，怎么处理？</strong></p>
<p>和操作系统按时间片调度线程不同，Go并没有时间片的概念。如果某个G没有进行system call调用、没有进行I/O操作、没有阻塞在一个channel操作上，那么m是如何让G停下来并调度下一个runnable G的呢？答案是：<strong>G是被抢占调度的</strong>。</p>
<p>除非极端的无限循环或死循环，否则只要G调用函数，Go runtime就有抢占G的机会。Go程序启动时，runtime会去启动一个名为sysmon的m(一般称为监控线程)，该m无需绑定p即可运行，该m在整个Go程序的运行过程中至关重要：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//$GOROOT/src/runtime/proc.go</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// The main goroutine.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">     ... ...</span><br><span class="line">    systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">        newm(sysmon, <span class="literal">nil</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    .... ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Always runs without a P, so write barriers are not allowed.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//go:nowritebarrierrec</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sysmon</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// If a heap span goes unused for 5 minutes after a garbage collection,</span></span><br><span class="line">    <span class="comment">// we hand it back to the operating system.</span></span><br><span class="line">    scavengelimit := <span class="keyword">int64</span>(<span class="number">5</span> * <span class="number">60</span> * <span class="number">1e9</span>)</span><br><span class="line">    ... ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>  .... &#123;</span><br><span class="line">        ... ...</span><br><span class="line">        <span class="comment">// retake P's blocked in syscalls</span></span><br><span class="line">        <span class="comment">// and preempt long running G's</span></span><br><span class="line">        <span class="keyword">if</span> retake(now) != <span class="number">0</span> &#123;</span><br><span class="line">            idle = <span class="number">0</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            idle++</span><br><span class="line">        &#125;</span><br><span class="line">       ... ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>sysmon每20us~10ms启动一次，按照《Go语言学习笔记》中的总结，sysmon主要完成如下工作：</p>
<ul>
<li>释放闲置超过5分钟的span物理内存；</li>
<li>如果超过2分钟没有垃圾回收，强制执行；</li>
<li>将长时间未处理的netpoll结果添加到任务队列；</li>
<li>向长时间运行的G任务发出抢占调度；</li>
<li>收回因syscall长时间阻塞的P；</li>
</ul>
<p>我们看到sysmon将“向长时间运行的G任务发出抢占调度”，这个事情由retake实施：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// forcePreemptNS is the time slice given to a G before it is</span></span><br><span class="line"><span class="comment">// preempted.</span></span><br><span class="line"><span class="keyword">const</span> forcePreemptNS = <span class="number">10</span> * <span class="number">1000</span> * <span class="number">1000</span> <span class="comment">// 10ms</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">retake</span><span class="params">(now <span class="keyword">int64</span>)</span> <span class="title">uint32</span></span> &#123;</span><br><span class="line">          ... ...</span><br><span class="line">           <span class="comment">// Preempt G if it's running for too long.</span></span><br><span class="line">            t := <span class="keyword">int64</span>(_p_.schedtick)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">int64</span>(pd.schedtick) != t &#123;</span><br><span class="line">                pd.schedtick = <span class="keyword">uint32</span>(t)</span><br><span class="line">                pd.schedwhen = now</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> pd.schedwhen+forcePreemptNS &gt; now &#123;</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            &#125;</span><br><span class="line">            preemptone(_p_)</span><br><span class="line">         ... ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，如果一个G任务运行10ms，sysmon就会认为其运行时间太久而发出抢占式调度的请求。一旦G的抢占标志位被设为true，那么待这个G下一次调用函数或方法时，runtime便可以将G抢占，并移出运行状态，放入P中局部队列中，等待下一次被调度。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://zhuanlan.zhihu.com/p/32497435" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/32497435</a></p>
<p><a href="https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/" target="_blank" rel="noopener">https://tonybai.com/2017/06/23/an-intro-about-goroutine-scheduler/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;goroutine是go的核心，没有goroutine，go就没什么意思了👿。goroutine离不开协程，线程和并发，所以下面会说说相关的内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;协程&quot;&gt;&lt;a href=&quot;#协程&quot; class=&quot;headerlink&quot; title=&quot;协程&quot;&gt;&lt;/a&gt;协程&lt;/h1&gt;&lt;p&gt;协程(coroutine)其实就是一个函数，方法或者例程（routine）。一般情况下函数都是在用户线程下面执行的，线程的调度由内核触发，所以函数在执行过程中，用户线程没办法控制函数的执行调度，只能任由内核主宰。协程就不同，它可以由用户线程控制调度，在任何时候调度协程的执行。函数在执行时，内核调度会陷入内核并保存当前线程的栈和上下文，然后恢复之前被停止线程继续执行，代价比较高。而协程的调度，不用陷入内核，用户线程只是保存当前协程的栈和上下文，恢复之前的被停止协程继续执行。&lt;/p&gt;
&lt;p&gt;还有种说法是说函数是协程的一种特例。因为函数只有在return语句才会返回，而协程可以在任何时刻返回。&lt;/p&gt;
&lt;p&gt;协程很早就提出来了，可是在现在才火起来吧，大概由于某种语言（lua）的广泛使用吧。而go更是把协程用到底，基本可以理解go的所有代码都跑在协程下，并用goroutine来代表它自己的协程。&lt;br&gt;
    
    </summary>
    
      <category term="go" scheme="http://idiotsky.top/categories/go/"/>
    
    
      <category term="go" scheme="http://idiotsky.top/tags/go/"/>
    
      <category term="多线程" scheme="http://idiotsky.top/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="goroutine" scheme="http://idiotsky.top/tags/goroutine/"/>
    
      <category term="协程" scheme="http://idiotsky.top/tags/%E5%8D%8F%E7%A8%8B/"/>
    
      <category term="并发" scheme="http://idiotsky.top/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="并行" scheme="http://idiotsky.top/tags/%E5%B9%B6%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>mysql 幻读实验</title>
    <link href="http://idiotsky.top/2018/08/08/mysql-dirty-read/"/>
    <id>http://idiotsky.top/2018/08/08/mysql-dirty-read/</id>
    <published>2018-08-08T12:24:11.000Z</published>
    <updated>2018-08-09T01:01:56.658Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动一个mysql"><a href="#启动一个mysql" class="headerlink" title="启动一个mysql"></a>启动一个mysql</h1><p>用docker很容易就起一个mysql的环境了，我的<a href="https://github.com/ejunjsh/docker-code" target="_blank" rel="noopener">github repo docker-code</a>,有例子</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> mysql</span><br><span class="line">sudo docker-compose up</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h1 id="登陆mysql"><a href="#登陆mysql" class="headerlink" title="登陆mysql"></a>登陆mysql</h1><p>用下面命令可以确认mysql所在的容器，在我机子是<code>mysql_db_1</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo docker ps</span><br><span class="line">[sudo] password <span class="keyword">for</span> sky:</span><br><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                    NAMES</span><br><span class="line">c7f451f632c0        adminer             <span class="string">"entrypoint.sh doc..."</span>   2 weeks ago         Up 2 minutes        0.0.0.0:8080-&gt;8080/tcp   mysql_adminer_1</span><br><span class="line">e2645139c23b        mysql               <span class="string">"docker-entrypoint..."</span>   2 weeks ago         Up 2 minutes        3306/tcp                 mysql_db_1</span><br></pre></td></tr></table></figure></p>
<p>进入容器</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo docker <span class="built_in">exec</span> -it mysql_db_1 bash</span><br><span class="line">mysql -p</span><br></pre></td></tr></table></figure>
<p>密码默认是<code>example</code></p>
<h1 id="创建测试数据库和表"><a href="#创建测试数据库和表" class="headerlink" title="创建测试数据库和表"></a>创建测试数据库和表</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database test;</span><br><span class="line">mysql&gt; use test;</span><br><span class="line">mysql&gt; DROP TABLE IF EXISTS `tx`;</span><br><span class="line">mysql&gt; CREATE TABLE `tx` (</span><br><span class="line">  `id` int(11) NOT NULL AUTO_INCREMENT,</span><br><span class="line">  `num` int(11) NOT NULL,</span><br><span class="line">  PRIMARY KEY (`id`)</span><br><span class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;</span><br></pre></td></tr></table></figure>
<h1 id="开始实验"><a href="#开始实验" class="headerlink" title="开始实验"></a>开始实验</h1><p>mysql的默认隔离级别为<code>可重复读</code>，所以是会出现<code>幻读</code>的情况的。</p>
<p>还是验证下</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT @@transaction_isolation;</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| @@transaction_isolation |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">| REPEATABLE-READ         |</span><br><span class="line">+<span class="comment">-------------------------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.01</span> sec)</span><br></pre></td></tr></table></figure>
<p>以前是<code>SELECT @@tx_isolation;</code>,新版本要用<code>SELECT @@transaction_isolation;</code></p>
<p>接下来插入一条数据<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; insert into tx (num) values(100);</span><br></pre></td></tr></table></figure></p>
<p>然后开启事务<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction;</span><br></pre></td></tr></table></figure></p>
<p>更新这条记录</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update tx set num=200 where num=100;</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>留意上面的<code>matched</code>是1的。</p>
<p>先不提交这个事务，开另外个终端按照上面的方法再打开个mysql,之后也开一个事务</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; use <span class="built_in">test</span>;</span><br><span class="line">mysql&gt; start transaction;</span><br><span class="line">mysql&gt; select * from tx;</span><br><span class="line">+----+-----+</span><br><span class="line">| id | num |</span><br><span class="line">+----+-----+</span><br><span class="line">|  1 | 100 |</span><br><span class="line">+----+-----+</span><br><span class="line">1 row <span class="keyword">in</span> <span class="built_in">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>
<p>由于隔离级别，所以看不到对方更新的</p>
<p>然后回到第一个终端,提交事务</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>
<p>再回到第二终端，</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tx;</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| id | num |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">|  1 | 100 |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>还是因为隔离级别，还是看不到对方更新的。</p>
<p>接下来，重头戏来了，尝试在第二个终端上执行</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update tx set num=300 where num=100;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">Rows matched: 0  Changed: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tx;</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| id | num |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">|  1 | 100 |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>居然更新不了，然后就<code>幻读</code>了。这个很容易理解，在第二个终端的事务里，看到都是它启动事务那一刻的快照<code>snapshot</code>,所以看不到其他事务的东西，可是一旦更新的时候，就会因为别人事务改变了原来的值，自己没办法再更新它以为的那个值了，所以这种以为就称为了<code>幻觉(phantom)</code>，俗称<code>幻读</code>。</p>
<p>那假如上面我不指定条件呢 </p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update tx set num=300;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>是可以更新的，因为这是全表更新，所以没问题。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; commit;</span><br></pre></td></tr></table></figure>
<p>提交下，方便下面继续做实验</p>
<p>虽说这个<code>幻读</code>是问题，但是它也是人们用来做数据库<code>CAS</code>的保证吧。</p>
<h1 id="数据库CAS"><a href="#数据库CAS" class="headerlink" title="数据库CAS"></a>数据库<code>CAS</code></h1><p>我们在上面的表基础上再加一列<code>version</code></p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table tx add column version int null;</span><br><span class="line">Query OK, 0 rows affected (0.16 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tx;</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">| id | num | version |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">|  1 | 300 |    NULL |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>设置个初始值</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update tx set version =0;</span><br><span class="line">Query OK, 1 row affected (0.02 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tx;</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">| id | num | version |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">|  1 | 300 |       0 |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>然后用java跑个并发扣<code>num</code>的程序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sky.code.mysql;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DbCas</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// JDBC 驱动名及数据库 URL</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String JDBC_DRIVER = <span class="string">"com.mysql.cj.jdbc.Driver"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String DB_URL = <span class="string">"jdbc:mysql://192.168.5.129:3306/test"</span>;<span class="comment">//这里的ip是你docker的host的ip</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库的用户名与密码，需要根据自己的设置</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASS = <span class="string">"example"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> AtomicInteger counter=<span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Connection conn = DriverManager.getConnection(DB_URL,USER,PASS);</span><br><span class="line">            conn.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">            Statement statement=conn.createStatement();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                String sql=<span class="string">"select version from tx where id=1 and num&lt;&gt;0"</span>;</span><br><span class="line">                ResultSet rs=statement.executeQuery(sql);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                    <span class="keyword">int</span> version = rs.getInt(<span class="string">"version"</span>);</span><br><span class="line"></span><br><span class="line">                    rs.close();</span><br><span class="line"></span><br><span class="line">                    sql=<span class="string">"update tx set num=num-1,version=version+1 where id=1 and version="</span> + version;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">int</span> record = statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (record == <span class="number">1</span>) &#123;</span><br><span class="line">                        counter.getAndIncrement();</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    conn.commit();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            statement.close();</span><br><span class="line">            conn.close();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(JDBC_DRIVER);</span><br><span class="line"></span><br><span class="line">            Thread[] threads=<span class="keyword">new</span> Thread[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                Thread thread=<span class="keyword">new</span> Thread(() -&gt; consumer());</span><br><span class="line">                thread.start();</span><br><span class="line">                threads[i]=thread;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    threads[i].join();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            System.out.printf(<span class="string">"finally update %d records"</span>,counter.get());</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果为</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finally update 300 records</span><br></pre></td></tr></table></figure>
<p>数据库数据</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from tx;</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">| id | num | version |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">|  1 |   0 |     300 |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p>你会发现，只有300个成功更新的记录,数据库的记录也没有超扣。</p>
<p>所以利用这个，可以不用<code>select for update</code>等锁的操作。</p>
<h1 id="再试下锁"><a href="#再试下锁" class="headerlink" title="再试下锁"></a>再试下锁</h1><p>接下来试试锁吧</p>
<p>第一个事务执行</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; start transaction;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tx;</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">| id | num | version |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">|  1 | 300 |       1 |</span><br><span class="line">+<span class="comment">----+-----+---------+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">update</span> tx <span class="keyword">set</span> <span class="keyword">num</span> =<span class="number">400</span> <span class="keyword">where</span> <span class="keyword">version</span>=<span class="number">1</span>;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Rows matched: 1  Changed: 1  Warnings: 0</span><br></pre></td></tr></table></figure>
<p>这里没有提交事务</p>
<p>然后第二个终端，直接运行下面命令</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; update tx set num =400 where version=1;</span><br></pre></td></tr></table></figure>
<p>你会发现卡在那里，过一会就会响应</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ERROR 1205 (HY000): Lock wait timeout exceeded; try restarting transaction</span><br></pre></td></tr></table></figure>
<p>所以这里你就看到是有锁了，是不是很神奇呢，其实隔离级别就是靠锁来实现的</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>上面列子和代码可以很好的说明了，数据库会在适当的时候加锁，保证数据不会有问题，当然前提是隔离级别设置够高，mysql默认是可重复读，所以足够保证了，还有上面例子可以用来做扣库存的代码哦😄，java代码可以在<a href="https://github.com/ejunjsh/java-code/blob/master/basic/src/main/java/com/sky/code/mysql/DbCas.java" target="_blank" rel="noopener">这里</a>拿到。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;启动一个mysql&quot;&gt;&lt;a href=&quot;#启动一个mysql&quot; class=&quot;headerlink&quot; title=&quot;启动一个mysql&quot;&gt;&lt;/a&gt;启动一个mysql&lt;/h1&gt;&lt;p&gt;用docker很容易就起一个mysql的环境了，我的&lt;a href=&quot;https://github.com/ejunjsh/docker-code&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github repo docker-code&lt;/a&gt;,有例子&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; mysql&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo docker-compose up&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://idiotsky.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://idiotsky.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>深入理解Java G1垃圾收集器</title>
    <link href="http://idiotsky.top/2018/07/28/java-g1/"/>
    <id>http://idiotsky.top/2018/07/28/java-g1/</id>
    <published>2018-07-28T10:54:54.000Z</published>
    <updated>2018-08-14T13:25:49.481Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>此文章除了说g1,还顺带总结了一些其他概念，mark之👿</p>
</blockquote>
<p>本文首先简单介绍了垃圾收集的常见方式，然后再分析了G1收集器的收集原理，相比其他垃圾收集器的优势，最后给出了一些调优实践。</p>
<h1 id="什么是垃圾回收"><a href="#什么是垃圾回收" class="headerlink" title="什么是垃圾回收"></a>什么是垃圾回收</h1><p>首先，在了解G1之前，我们需要清楚的知道，垃圾回收是什么？简单的说垃圾回收就是回收内存中不再使用的对象。</p>
<p>垃圾回收的基本步骤</p>
<p>回收的步骤有2步：</p>
<ul>
<li>查找内存中不再使用的对象</li>
<li>释放这些对象占用的内存</li>
</ul>
<p><strong>查找内存中不再使用的对象</strong><br><a id="more"></a><br>那么问题来了，如何判断哪些对象不再被使用呢？我们也有2个方法：</p>
<ol>
<li>引用计数法<br> 引用计数法就是如果一个对象没有被任何引用指向，则可视之为垃圾。这种方法的缺点就是不能检测到环的存在。</li>
<li>根搜索算法<br> 根搜索算法的基本思路就是通过一系列名为”GC Roots”的对象作为起始点，从这些节点开始向下搜索，搜索所走过的路径称为引用链(Reference Chain)，当一个对象到GC Roots没有任何引用链相连时，则证明此对象是不可用的。</li>
</ol>
<p>现在我们已经知道如何找出垃圾对象了，如何把这些对象清理掉呢？</p>
<p><strong>释放这些对象占用的内存</strong></p>
<p>常见的方式有复制或者直接清理，但是直接清理会存在内存碎片，于是就会产生了清理再压缩的方式。</p>
<p>总得来说就产生了三种类型的回收算法。</p>
<ol>
<li>标记-复制<br> 它将可用内存容量划分为大小相等的两块，每次只使用其中的一块。当这一块用完之后，就将还存活的对象复制到另外一块上面，然后在把已使用过的内存空间一次理掉。它的优点是实现简单，效率高，不会存在内存碎片。缺点就是需要2倍的内存来管理。</li>
<li>标记-清理<br> 标记清除算法分为“标记”和“清除”两个阶段：首先标记出需要回收的对象，标记完成之后统一清除对象。它的优点是效率高，缺点是容易产生内存碎片。</li>
<li>标记-整理<br> 标记操作和“标记-清理”算法一致，后续操作不只是直接清理对象，而是在清理无用对象完成后让所有 存活的对象都向一端移动，并更新引用其对象的指针。因为要移动对象，所以它的效率要比“标记-清理”效率低，但是不会产生内存碎片。</li>
</ol>
<p><strong>基于分代的假设</strong></p>
<p>由于对象的存活时间有长有短，所以对于存活时间长的对象，减少被gc的次数可以避免不必要的开销。这样我们就把内存分成新生代和老年代，新生代存放刚创建的和存活时间比较短的对象，老年代存放存活时间比较长的对象。这样每次仅仅清理年轻代，老年代仅在必要时时再做清理可以极大的提高GC效率，节省GC时间。</p>
<p><strong>java垃圾收集器的历史</strong></p>
<p><strong>第一阶段，Serial（串行）收集器</strong></p>
<p>在jdk1.3.1之前，java虚拟机仅仅能使用Serial收集器。 Serial收集器是一个单线程的收集器，但它的“单线程”的意义并不仅仅是说明它只会使用一个CPU或一条收集线程去完成垃圾收集工作，更重要的是在它进行垃圾收集时，必须暂停其他所有的工作线程，直到它收集结束。</p>
<p>PS：开启Serial收集器的方式</p>
<blockquote>
<p>-XX:+UseSerialGC</p>
</blockquote>
<p><strong>第二阶段，Parallel（并行）收集器</strong></p>
<p>Parallel收集器也称吞吐量收集器，相比Serial收集器，Parallel最主要的优势在于使用多线程去完成垃圾清理工作，这样可以充分利用多核的特性，大幅降低gc时间。</p>
<p>PS:开启Parallel收集器的方式</p>
<blockquote>
<p>-XX:+UseParallelGC -XX:+UseParallelOldGC</p>
</blockquote>
<p><strong>第三阶段，CMS（并发）收集器</strong></p>
<p>CMS收集器在Minor GC时会暂停所有的应用线程，并以多线程的方式进行垃圾回收。在Full GC时不再暂停应用线程，而是使用若干个后台线程定期的对老年代空间进行扫描，及时回收其中不再使用的对象。</p>
<p>PS:开启CMS收集器的方式</p>
<blockquote>
<p>-XX:+UseParNewGC -XX:+UseConcMarkSweepGC</p>
</blockquote>
<p><strong>第四阶段，G1（并发）收集器</strong></p>
<p>G1收集器（或者垃圾优先收集器）的设计初衷是为了尽量缩短处理超大堆（大于4GB）时产生的停顿。相对于CMS的优势而言是内存碎片的产生率大大降低。</p>
<p>PS:开启G1收集器的方式</p>
<blockquote>
<p>-XX:+UseG1GC</p>
</blockquote>
<h1 id="了解G1"><a href="#了解G1" class="headerlink" title="了解G1"></a>了解G1</h1><p>G1的第一篇paper（附录1）发表于2004年，在2012年才在jdk1.7u4中可用。oracle官方计划在jdk9中将G1变成默认的垃圾收集器，以替代CMS。为何oracle要极力推荐G1呢，G1有哪些优点？</p>
<p>首先，G1的设计原则就是简单可行的性能调优</p>
<p>开发人员仅仅需要声明以下参数即可：</p>
<blockquote>
<p>-XX:+UseG1GC -Xmx32g -XX:MaxGCPauseMillis=200</p>
</blockquote>
<p>其中-XX:+UseG1GC为开启G1垃圾收集器，-Xmx32g 设计堆内存的最大内存为32G，-XX:MaxGCPauseMillis=200设置GC的最大暂停时间为200ms。如果我们需要调优，在内存大小一定的情况下，我们只需要修改最大暂停时间即可。</p>
<p>其次，G1将新生代，老年代的物理空间划分取消了。</p>
<p>这样我们再也不用单独的空间对每个代进行设置了，不用担心每个代内存是否足够。</p>
<p><a href="http://idiotsky.top/images3/G1-1.jpg"><img src="http://idiotsky.top/images3/G1-1.png" alt=""></a></p>
<p>取而代之的是，G1算法将堆划分为若干个区域（Region），它仍然属于分代收集器。不过，这些区域的一部分包含新生代，新生代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间。老年代也分成很多区域，G1收集器通过将对象从一个区域复制到另外一个区域，完成了清理工作。这就意味着，在正常的处理过程中，G1完成了堆的压缩（至少是部分堆的压缩），这样也就不会有cms内存碎片问题的存在了。</p>
<p><a href="http://idiotsky.top/images3/G1-2.png"><img src="http://idiotsky.top/images3/G1-2.png" alt=""></a></p>
<p>在G1中，还有一种特殊的区域，叫Humongous区域。 如果一个对象占用的空间超过了分区容量50%以上，G1收集器就认为这是一个巨型对象。这些巨型对象，默认直接会被分配在年老代，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。为了解决这个问题，G1划分了一个Humongous区，它用来专门存放巨型对象。如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储。为了能找到连续的H区，有时候不得不启动Full GC。</p>
<p>PS：在java 8中，持久代也移动到了普通的堆内存空间中，改为元空间。</p>
<p><strong>对象分配策略</strong></p>
<p>说起大对象的分配，我们不得不谈谈对象的分配策略。它分为3个阶段：</p>
<ol>
<li>TLAB(Thread Local Allocation Buffer)线程本地分配缓冲区</li>
<li>Eden区中分配</li>
<li>Humongous区分配</li>
</ol>
<p>TLAB为线程本地分配缓冲区，它的目的为了使对象尽可能快的分配出来。如果对象在一个共享的空间中分配，我们需要采用一些同步机制来管理这些空间内的空闲空间指针。在Eden空间中，每一个线程都有一个固定的分区用于分配对象，即一个TLAB。分配对象时，线程之间不再需要进行任何的同步。</p>
<p>对TLAB空间中无法分配的对象，JVM会尝试在Eden空间中进行分配。如果Eden空间无法容纳该对象，就只能在老年代中进行分配空间。</p>
<p>最后，G1提供了两种GC模式，Young GC和Mixed GC，两种都是Stop The World(STW)的。下面我们将分别介绍一下这2种模式。</p>
<h1 id="G1-Young-GC"><a href="#G1-Young-GC" class="headerlink" title="G1 Young GC"></a>G1 Young GC</h1><p>Young GC主要是对Eden区进行GC，它在Eden空间耗尽时会被触发。在这种情况下，Eden空间的数据移动到Survivor空间中，如果Survivor空间不够，Eden空间的部分数据会直接晋升到年老代空间。Survivor区的数据移动到新的Survivor区中，也有部分数据晋升到老年代空间中。最终Eden空间的数据为空，GC停止工作，应用线程继续执行。</p>
<p><a href="http://idiotsky.top/images3/G1-3.png"><img src="http://idiotsky.top/images3/G1-3.png" alt=""></a></p>
<p><a href="http://idiotsky.top/images3/G1-4.png"><img src="http://idiotsky.top/images3/G1-4.png" alt=""></a></p>
<p>这时，我们需要考虑一个问题，如果仅仅GC 新生代对象，我们如何找到所有的根对象呢？ 老年代的所有对象都是根么？那这样扫描下来会耗费大量的时间。于是，G1引进了RSet的概念。它的全称是Remembered Set，作用是跟踪指向某个heap区内的对象引用。</p>
<p><a href="http://idiotsky.top/images3/G1-5.png"><img src="http://idiotsky.top/images3/G1-5.png" alt=""></a></p>
<p>在CMS中，也有RSet的概念，在老年代中有一块区域用来记录指向新生代的引用。这是一种point-out，在进行Young GC时，扫描根时，仅仅需要扫描这一块区域，而不需要扫描整个老年代。</p>
<p>但在G1中，并没有使用point-out，这是由于一个分区太小，分区数量太多，如果是用point-out的话，会造成大量的扫描浪费，有些根本不需要GC的分区引用也扫描了。于是G1中使用point-in来解决。point-in的意思是哪些分区引用了当前分区中的对象。这样，仅仅将这些对象当做根来扫描就避免了无效的扫描。由于新生代有多个，那么我们需要在新生代之间记录引用吗？这是不必要的，原因在于每次GC时，所有新生代都会被扫描，所以只需要记录老年代到新生代之间的引用即可。</p>
<p>需要注意的是，如果引用的对象很多，赋值器需要对每个引用做处理，赋值器开销会很大，为了解决赋值器开销这个问题，在G1 中又引入了另外一个概念，卡表（Card Table）。一个Card Table将一个分区在逻辑上划分为固定大小的连续区域，每个区域称之为卡。卡通常较小，介于128到512字节之间。Card Table通常为字节数组，由Card的索引（即数组下标）来标识每个分区的空间地址。默认情况下，每个卡都未被引用。当一个地址空间被引用时，这个地址空间对应的数组索引的值被标记为”0″，即标记为脏被引用，此外RSet也将这个数组下标记录下来。一般情况下，这个RSet其实是一个Hash Table，Key是别的Region的起始地址，Value是一个集合，里面的元素是Card Table的Index。</p>
<p>Young GC 阶段：</p>
<ul>
<li>阶段1：根扫描<br>  静态和本地对象被扫描</li>
<li>阶段2：更新RS<br>  处理dirty card队列更新RS</li>
<li>阶段3：处理RS<br>  检测从年轻代指向年老代的对象</li>
<li>阶段4：对象拷贝<br>  拷贝存活的对象到survivor/old区域</li>
<li>阶段5：处理引用队列<br>  软引用，弱引用，虚引用处理</li>
</ul>
<h1 id="G1-Mix-GC"><a href="#G1-Mix-GC" class="headerlink" title="G1 Mix GC"></a>G1 Mix GC</h1><p>Mix GC不仅进行正常的新生代垃圾收集，同时也回收部分后台扫描线程标记的老年代分区。</p>
<p>它的GC步骤分2步：</p>
<ol>
<li>全局并发标记（global concurrent marking）</li>
<li>拷贝存活对象（evacuation）</li>
</ol>
<p>在进行Mix GC之前，会先进行global concurrent marking（全局并发标记）。 global concurrent marking的执行过程是怎样的呢？</p>
<p>在G1 GC中，它主要是为Mixed GC提供标记服务的，并不是一次GC过程的一个必须环节。global concurrent marking的执行过程分为五个步骤：</p>
<ul>
<li>初始标记（initial mark，STW）<br>  在此阶段，G1 GC 对根进行标记。该阶段与常规的 (STW) 年轻代垃圾回收密切相关。</li>
<li>根区域扫描（root region scan）<br>  G1 GC 在初始标记的存活区扫描对老年代的引用，并标记被引用的对象。该阶段与应用程序（非 STW）同时运行，并且只有完成该阶段后，才能开始下一次 STW 年轻代垃圾回收。</li>
<li>并发标记（Concurrent Marking）<br>  G1 GC 在整个堆中查找可访问的（存活的）对象。该阶段与应用程序同时运行，可以被 STW 年轻代垃圾回收中断</li>
<li>最终标记（Remark，STW）<br>  该阶段是 STW 回收，帮助完成标记周期。G1 GC 清空 SATB 缓冲区，跟踪未被访问的存活对象，并执行引用处理。</li>
<li>清除垃圾（Cleanup，STW）<br>  在这个最后阶段，G1 GC 执行统计和 RSet 净化的 STW 操作。在统计期间，G1 GC 会识别完全空闲的区域和可供进行混合垃圾回收的区域。清理阶段在将空白区域重置并返回到空闲列表时为部分并发。</li>
</ul>
<p><strong>三色标记算法</strong></p>
<p>提到并发标记，我们不得不了解并发标记的三色标记算法。它是描述追踪式回收器的一种有用的方法，利用它可以推演回收器的正确性。 首先，我们将对象分成三种类型的。</p>
<ul>
<li>黑色:根对象，或者该对象与它的子对象都被扫描</li>
<li>灰色:对象本身被扫描,但还没扫描完该对象中的子对象</li>
<li>白色:未被扫描对象，扫描完成所有对象之后，最终为白色的为不可达对象，即垃圾对象</li>
</ul>
<p>当GC开始扫描对象时，按照如下图步骤进行对象的扫描：</p>
<p>根对象被置为黑色，子对象被置为灰色。</p>
<p><a href="http://idiotsky.top/images3/G1-6.png"><img src="http://idiotsky.top/images3/G1-6.png" alt=""></a></p>
<p>继续由灰色遍历,将已扫描了子对象的对象置为黑色。</p>
<p><a href="http://idiotsky.top/images3/G1-7.png"><img src="http://idiotsky.top/images3/G1-7.png" alt=""></a></p>
<p>遍历了所有可达的对象后，所有可达的对象都变成了黑色。不可达的对象即为白色，需要被清理。</p>
<p><a href="http://idiotsky.top/images3/G1-8.png"><img src="http://idiotsky.top/images3/G1-8.png" alt=""></a></p>
<p>这看起来很美好，但是如果在标记过程中，应用程序也在运行，那么对象的指针就有可能改变。这样的话，我们就会遇到一个问题：对象丢失问题</p>
<p>我们看下面一种情况，当垃圾收集器扫描到下面情况时：</p>
<p><a href="http://idiotsky.top/images3/G1-9.png"><img src="http://idiotsky.top/images3/G1-9.png" alt=""></a></p>
<p>这时候应用程序执行了以下操作：</p>
<blockquote>
<p>A.c=C<br>B.c=null</p>
</blockquote>
<p>这样，对象的状态图变成如下情形：</p>
<p><a href="http://idiotsky.top/images3/G1-10.png"><img src="http://idiotsky.top/images3/G1-10.png" alt=""></a></p>
<p>这时候垃圾收集器再标记扫描的时候就会下图成这样：</p>
<p><a href="http://idiotsky.top/images3/G1-11.png"><img src="http://idiotsky.top/images3/G1-11.png" alt=""></a></p>
<p>很显然，此时C是白色，被认为是垃圾需要清理掉，显然这是不合理的。那么我们如何保证应用程序在运行的时候，GC标记的对象不丢失呢？有如下2中可行的方式：</p>
<ol>
<li>在插入的时候记录对象</li>
<li>在删除的时候记录对象</li>
</ol>
<p>刚好这对应CMS和G1的2种不同实现方式：</p>
<p>在CMS采用的是增量更新（Incremental update），只要在写屏障（write barrier）里发现要有一个白对象的引用被赋值到一个黑对象 的字段里，那就把这个白对象变成灰色的。即插入的时候记录下来。</p>
<p>在G1中，使用的是STAB（snapshot-at-the-beginning）的方式，删除的时候记录所有的对象，它有3个步骤：</p>
<ol>
<li>在开始标记的时候生成一个快照图标记存活对象</li>
<li>在并发标记的时候所有被改变的对象入队（在write barrier里把所有旧的引用所指向的对象都变成非白的）</li>
<li>可能存在游离的垃圾，将在下次被收集</li>
</ol>
<p>这样，G1到现在可以知道哪些老的分区可回收垃圾最多。 当全局并发标记完成后，在某个时刻，就开始了Mix GC。这些垃圾回收被称作“混合式”是因为他们不仅仅进行正常的新生代垃圾收集，同时也回收部分后台扫描线程标记的分区。混合式垃圾收集如下图：</p>
<p><a href="http://idiotsky.top/images3/G1-12.png"><img src="http://idiotsky.top/images3/G1-12.png" alt=""></a></p>
<p>混合式GC也是采用的复制的清理策略，当GC完成后，会重新释放空间。</p>
<p><a href="http://idiotsky.top/images3/G1-13.png"><img src="http://idiotsky.top/images3/G1-13.png" alt=""></a></p>
<p>至此，混合式GC告一段落了。下一小节我们讲进入调优实践。</p>
<h1 id="调优实践"><a href="#调优实践" class="headerlink" title="调优实践"></a>调优实践</h1><p><strong>MaxGCPauseMillis调优</strong></p>
<p>前面介绍过使用GC的最基本的参数：</p>
<blockquote>
<p>-XX:+UseG1GC -Xmx32g -XX:MaxGCPauseMillis=200</p>
</blockquote>
<p>前面2个参数都好理解，后面这个MaxGCPauseMillis参数该怎么配置呢？这个参数从字面的意思上看，就是允许的GC最大的暂停时间。G1尽量确保每次GC暂停的时间都在设置的MaxGCPauseMillis范围内。 那G1是如何做到最大暂停时间的呢？这涉及到另一个概念，CSet(collection set)。它的意思是在一次垃圾收集器中被收集的区域集合。</p>
<ul>
<li>Young GC：选定所有新生代里的region。通过控制新生代的region个数来控制young GC的开销。</li>
<li>Mixed GC：选定所有新生代里的region，外加根据global concurrent marking统计得出收集收益高的若干老年代region。在用户指定的开销目标范围内尽可能选择收益高的老年代region。</li>
</ul>
<p>在理解了这些后，我们再设置最大暂停时间就好办了。 首先，我们能容忍的最大暂停时间是有一个限度的，我们需要在这个限度范围内设置。但是应该设置的值是多少呢？我们需要在吞吐量跟MaxGCPauseMillis之间做一个平衡。如果MaxGCPauseMillis设置的过小，那么GC就会频繁，吞吐量就会下降。如果MaxGCPauseMillis设置的过大，应用程序暂停时间就会变长。G1的默认暂停时间是200毫秒，我们可以从这里入手，调整合适的时间。</p>
<p><strong>其他调优参数</strong></p>
<blockquote>
<p>-XX:G1HeapRegionSize=n</p>
</blockquote>
<p>设置的 G1 区域的大小。值是 2 的幂，范围是 1 MB 到 32 MB 之间。目标是根据最小的 Java 堆大小划分出约 2048 个区域。</p>
<blockquote>
<p>-XX:ParallelGCThreads=n</p>
</blockquote>
<p>设置 STW 工作线程数的值。将 n 的值设置为逻辑处理器的数量。n 的值与逻辑处理器的数量相同，最多为 8。</p>
<p>如果逻辑处理器不止八个，则将 n 的值设置为逻辑处理器数的 5/8 左右。这适用于大多数情况，除非是较大的 SPARC 系统，其中 n 的值可以是逻辑处理器数的 5/16 左右。</p>
<blockquote>
<p>-XX:ConcGCThreads=n</p>
</blockquote>
<p>设置并行标记的线程数。将 n 设置为并行垃圾回收线程数 (ParallelGCThreads) 的 1/4 左右。</p>
<blockquote>
<p>-XX:InitiatingHeapOccupancyPercent=45</p>
</blockquote>
<p>设置触发标记周期的 Java 堆占用率阈值。默认占用率是整个 Java 堆的 45%。</p>
<p>避免使用以下参数：</p>
<p>避免使用 -Xmn 选项或 -XX:NewRatio 等其他相关选项显式设置年轻代大小。固定年轻代的大小会覆盖暂停时间目标。</p>
<p><strong>触发Full GC</strong></p>
<p>在某些情况下，G1触发了Full GC，这时G1会退化使用Serial收集器来完成垃圾的清理工作，它仅仅使用单线程来完成GC工作，GC暂停时间将达到秒级别的。整个应用处于假死状态，不能处理任何请求，我们的程序当然不希望看到这些。那么发生Full GC的情况有哪些呢？</p>
<ul>
<li>并发模式失败<br>  G1启动标记周期，但在Mix GC之前，老年代就被填满，这时候G1会放弃标记周期。这种情形下，需要增加堆大小，或者调整周期（例如增加线程数-XX:ConcGCThreads等）。</li>
<li>晋升失败或者疏散失败<br>  G1在进行GC的时候没有足够的内存供存活对象或晋升对象使用，由此触发了Full GC。可以在日志中看到(to-space exhausted)或者（to-space overflow）。解决这种问题的方式是：<ol>
<li>增加 -XX:G1ReservePercent 选项的值（并相应增加总的堆大小），为“目标空间”增加预留内存量。</li>
<li>通过减少 -XX:InitiatingHeapOccupancyPercent 提前启动标记周期。</li>
<li>也可以通过增加 -XX:ConcGCThreads 选项的值来增加并行标记线程的数目。</li>
</ol>
</li>
<li>巨型对象分配失败<br>  当巨型对象找不到合适的空间进行分配时，就会启动Full GC，来释放空间。这种情况下，应该避免分配大量的巨型对象，增加内存或者增大-XX:G1HeapRegionSize，使巨型对象不再是巨型对象。</li>
</ul>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://blog.jobbole.com/109170/" target="_blank" rel="noopener">http://blog.jobbole.com/109170/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文章除了说g1,还顺带总结了一些其他概念，mark之👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;本文首先简单介绍了垃圾收集的常见方式，然后再分析了G1收集器的收集原理，相比其他垃圾收集器的优势，最后给出了一些调优实践。&lt;/p&gt;
&lt;h1 id=&quot;什么是垃圾回收&quot;&gt;&lt;a href=&quot;#什么是垃圾回收&quot; class=&quot;headerlink&quot; title=&quot;什么是垃圾回收&quot;&gt;&lt;/a&gt;什么是垃圾回收&lt;/h1&gt;&lt;p&gt;首先，在了解G1之前，我们需要清楚的知道，垃圾回收是什么？简单的说垃圾回收就是回收内存中不再使用的对象。&lt;/p&gt;
&lt;p&gt;垃圾回收的基本步骤&lt;/p&gt;
&lt;p&gt;回收的步骤有2步：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查找内存中不再使用的对象&lt;/li&gt;
&lt;li&gt;释放这些对象占用的内存&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;查找内存中不再使用的对象&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="java" scheme="http://idiotsky.top/categories/java/"/>
    
    
      <category term="java" scheme="http://idiotsky.top/tags/java/"/>
    
      <category term="G1" scheme="http://idiotsky.top/tags/G1/"/>
    
  </entry>
  
  <entry>
    <title>java ConcurrentHashMap解析</title>
    <link href="http://idiotsky.top/2018/07/28/java-concurrenthashmap/"/>
    <id>http://idiotsky.top/2018/07/28/java-concurrenthashmap/</id>
    <published>2018-07-28T07:31:20.000Z</published>
    <updated>2018-09-13T12:06:17.276Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>只剩下这个没有mark了，偏偏这时候，面试被问到，悲剧了😢</p>
</blockquote>
<h1 id="jdk6和jdk7中的实现"><a href="#jdk6和jdk7中的实现" class="headerlink" title="jdk6和jdk7中的实现"></a>jdk6和jdk7中的实现</h1><h2 id="设计思路"><a href="#设计思路" class="headerlink" title="设计思路"></a>设计思路</h2><p>ConcurrentHashMap采用了分段锁的设计，只有在同一个分段内才存在竞态关系，不同的分段锁之间没有锁竞争。相比于对整个Map加锁的设计，分段锁大大的提高了高并发环境下的处理能力。但同时，由于不是对整个Map加锁，导致一些需要扫描整个Map的方法（如size(), containsValue()）需要使用特殊的实现，另外一些方法（如clear()）甚至放弃了对一致性的要求（ConcurrentHashMap是弱一致性的）。</p>
<p>ConcurrentHashMap中的分段锁称为Segment，它即类似于HashMap的结构，即内部拥有一个Entry数组，数组中的每个元素又是一个链表；同时又是一个ReentrantLock（Segment继承了ReentrantLock）。ConcurrentHashMap中的HashEntry相对于HashMap中的Entry有一定的差异性：HashEntry中的value以及next都被volatile修饰，这样在多线程读写过程中能够保持它们的可见性，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">        <span class="keyword">final</span> K key;</span><br><span class="line">        <span class="keyword">volatile</span> V value;</span><br><span class="line">        <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="并发度（Concurrency-Level）"><a href="#并发度（Concurrency-Level）" class="headerlink" title="并发度（Concurrency Level）"></a>并发度（Concurrency Level）</h2><p>并发度可以理解为程序运行时能够同时更新ConccurentHashMap且不产生锁竞争的最大线程数，实际上就是ConcurrentHashMap中的分段锁个数，即Segment[]的数组长度。ConcurrentHashMap默认的并发度为16，但用户也可以在构造函数中设置并发度。当用户设置并发度时，ConcurrentHashMap会使用大于等于该值的最小2幂指数作为实际并发度（假如用户设置并发度为17，实际并发度则为32）。运行时通过将key的高n位（<code>n = 32 – segmentShift</code>）和并发度减1（segmentMask）做位与运算定位到所在的Segment。segmentShift与segmentMask都是在构造过程中根据concurrency level被相应的计算出来。</p>
<p>如果并发度设置的过小，会带来严重的锁竞争问题；如果并发度设置的过大，原本位于同一个Segment内的访问会扩散到不同的Segment中，CPU cache命中率会下降，从而引起程序性能下降。（文档的说法是根据你并发的线程数量决定，太多会导性能降低）</p>
<h2 id="创建分段锁"><a href="#创建分段锁" class="headerlink" title="创建分段锁"></a>创建分段锁</h2><p>和JDK6不同，JDK7中除了第一个Segment之外，剩余的Segments采用的是延迟初始化的机制：每次put之前都需要检查key对应的Segment是否为null，如果是则调用ensureSegment()以确保对应的Segment被创建。</p>
<p>ensureSegment可能在并发环境下被调用，但与想象中不同，ensureSegment并未使用锁来控制竞争，而是使用了Unsafe对象的getObjectVolatile()提供的原子读语义结合CAS来确保Segment创建的原子性。代码段如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                == <span class="keyword">null</span>) &#123; <span class="comment">// recheck</span></span><br><span class="line">                Segment&lt;K,V&gt; s = <span class="keyword">new</span> Segment&lt;K,V&gt;(lf, threshold, tab);</span><br><span class="line">                <span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                       == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="keyword">null</span>, seg = s))</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="put-putIfAbsent-putAll"><a href="#put-putIfAbsent-putAll" class="headerlink" title="put/putIfAbsent/putAll"></a>put/putIfAbsent/putAll</h2><p>和JDK6一样，ConcurrentHashMap的put方法被代理到了对应的Segment（定位Segment的原理之前已经描述过）中。与JDK6不同的是，JDK7版本的ConcurrentHashMap在获得Segment锁的过程中，做了一定的优化 - 在真正申请锁之前，put方法会通过tryLock()方法尝试获得锁，在尝试获得锁的过程中会对对应hashcode的链表进行遍历，如果遍历完毕仍然找不到与key相同的HashEntry节点，则为后续的put操作提前创建一个HashEntry。当tryLock一定次数后仍无法获得锁，则通过lock申请锁。</p>
<p>需要注意的是，由于在并发环境下，其他线程的put，rehash或者remove操作可能会导致链表头结点的变化，因此在过程中需要进行检查，如果头结点发生变化则重新对表进行遍历。而如果其他线程引起了链表中的某个节点被删除，即使该变化因为是非原子写操作（删除节点后链接后续节点调用的是Unsafe.putOrderedObject()，该方法不提供原子写语义）可能导致当前线程无法观察到，但因为不影响遍历的正确性所以忽略不计。</p>
<p>之所以在获取锁的过程中对整个链表进行遍历，主要目的是希望遍历的链表被CPU cache所缓存，为后续实际put过程中的链表遍历操作提升性能。</p>
<p>在获得锁之后，Segment对链表进行遍历，如果某个HashEntry节点具有相同的key，则更新该HashEntry的value值，否则新建一个HashEntry节点，将它设置为链表的新head节点并将原头节点设为新head的下一个节点。新建过程中如果节点总数（含新建的HashEntry）超过threshold，则调用rehash()方法对Segment进行扩容，最后将新建HashEntry写入到数组中。</p>
<p>put方法中，链接新节点的下一个节点（HashEntry.setNext()）以及将链表写入到数组中（setEntryAt()）都是通过Unsafe的putOrderedObject()方法来实现，这里并未使用具有原子写语义的putObjectVolatile()的原因是：JMM会保证获得锁到释放锁之间所有对象的状态更新都会在锁被释放之后更新到主存，从而保证这些变更对其他线程是可见的。</p>
<h2 id="rehash"><a href="#rehash" class="headerlink" title="rehash"></a>rehash</h2><p>相对于HashMap的resize，ConcurrentHashMap的rehash原理类似，但是Doug Lea为rehash做了一定的优化，避免让所有的节点都进行复制操作：由于扩容是基于2的幂指来操作，假设扩容前某HashEntry对应到Segment中数组的index为i，数组的容量为capacity，那么扩容后该HashEntry对应到新数组中的index只可能为i或者i+capacity，因此大多数HashEntry节点在扩容前后index可以保持不变。基于此，rehash方法中会定位第一个后续所有节点在扩容后index都保持不变的节点，然后将这个节点之前的所有节点重排即可。这部分代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">           HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">           <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">           <span class="keyword">int</span> newCapacity = oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">           threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">           HashEntry&lt;K,V&gt;[] newTable =</span><br><span class="line">               (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> HashEntry[newCapacity];</span><br><span class="line">           <span class="keyword">int</span> sizeMask = newCapacity - <span class="number">1</span>;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">               HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">               <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">                   <span class="keyword">int</span> idx = e.hash &amp; sizeMask;</span><br><span class="line">                   <span class="keyword">if</span> (next == <span class="keyword">null</span>)   <span class="comment">//  Single node on list</span></span><br><span class="line">                       newTable[idx] = e;</span><br><span class="line">                   <span class="keyword">else</span> &#123; <span class="comment">// Reuse consecutive sequence at same slot</span></span><br><span class="line">                       HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                       <span class="keyword">int</span> lastIdx = idx;</span><br><span class="line">                       <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;</span><br><span class="line">                            last != <span class="keyword">null</span>;</span><br><span class="line">                            last = last.next) &#123;</span><br><span class="line">                           <span class="keyword">int</span> k = last.hash &amp; sizeMask;</span><br><span class="line">                           <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                               lastIdx = k;</span><br><span class="line">                               lastRun = last;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       newTable[lastIdx] = lastRun;</span><br><span class="line">                       <span class="comment">// Clone remaining nodes</span></span><br><span class="line">                       <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                           V v = p.value;</span><br><span class="line">                           <span class="keyword">int</span> h = p.hash;</span><br><span class="line">                           <span class="keyword">int</span> k = h &amp; sizeMask;</span><br><span class="line">                           HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                           newTable[k] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">int</span> nodeIndex = node.hash &amp; sizeMask; <span class="comment">// add the new node</span></span><br><span class="line">           node.setNext(newTable[nodeIndex]);</span><br><span class="line">           newTable[nodeIndex] = node;</span><br><span class="line">           table = newTable;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h2 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h2><p>和put类似，remove在真正获得锁之前，也会对链表进行遍历以提高缓存命中率。</p>
<h2 id="get与containsKey"><a href="#get与containsKey" class="headerlink" title="get与containsKey"></a>get与containsKey</h2><p><code>get</code>与<code>containsKey</code>两个方法几乎完全一致：他们都没有使用锁，而是通过Unsafe对象的<code>getObjectVolatile()</code>方法提供的原子读语义，来获得Segment以及对应的链表，然后对链表遍历判断是否存在key相同的节点以及获得该节点的value。但由于遍历过程中其他线程可能对链表结构做了调整，因此<code>get</code>和<code>containsKey</code>返回的可能是过时的数据，这一点是ConcurrentHashMap在弱一致性上的体现。如果要求强一致性，那么必须使用<code>Collections.synchronizedMap()</code>方法。</p>
<h2 id="size、containsValue"><a href="#size、containsValue" class="headerlink" title="size、containsValue"></a>size、containsValue</h2><p>这些方法都是基于整个ConcurrentHashMap来进行操作的，他们的原理也基本类似：首先不加锁循环执行以下操作：循环所有的Segment（通过Unsafe的getObjectVolatile()以保证原子读语义），获得对应的值以及所有Segment的modcount之和。如果连续两次所有Segment的modcount和相等，则过程中没有发生其他线程修改ConcurrentHashMap的情况，返回获得的值。</p>
<p>当循环次数超过预定义的值时，这时需要对所有的Segment依次进行加锁，获取返回值后再依次解锁。值得注意的是，加锁过程中要强制创建所有的Segment，否则容易出现其他线程创建Segment并进行put，remove等操作。代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line"></span><br><span class="line">ensureSegment(j).lock();<span class="comment">// force creation</span></span><br></pre></td></tr></table></figure></p>
<p>一般来说，应该避免在多线程环境下使用size和containsValue方法。</p>
<p>注1：modcount在put, replace, remove以及clear等方法中都会被修改。</p>
<p>注2：对于containsValue方法来说，如果在循环过程中发现匹配value的HashEntry，则直接返回true。</p>
<p>最后，与HashMap不同的是，ConcurrentHashMap并不允许key或者value为null，按照Doug Lea的说法，这么设计的原因是在ConcurrentHashMap中，一旦value出现null，则代表HashEntry的key/value没有映射完成就被其他线程所见，需要特殊处理。在JDK6中，get方法的实现中就有一段对HashEntry.value == null的防御性判断。但Doug Lea也承认实际运行过程中，这种情况似乎不可能发生</p>
<hr>
<h1 id="JDK8中的实现"><a href="#JDK8中的实现" class="headerlink" title="JDK8中的实现"></a>JDK8中的实现</h1><p>ConcurrentHashMap在JDK8中进行了巨大改动，很需要通过源码来再次学习下Doug Lea的实现方法。</p>
<p>它摒弃了Segment（锁段）的概念，而是启用了一种全新的方式实现,利用CAS算法。它沿用了与它同时期的HashMap版本的思想，底层依然由“数组”+链表+红黑树的方式思想，但是为了做到并发，又增加了很多辅助的类，例如TreeBin，Traverser等对象内部类。</p>
<h2 id="重要的属性"><a href="#重要的属性" class="headerlink" title="重要的属性"></a>重要的属性</h2><p>首先来看几个重要的属性，与HashMap相同的就不再介绍了，这里重点解释一下sizeCtl这个属性。可以说它是ConcurrentHashMap中出镜率很高的一个属性，因为它是一个控制标识符，在不同的地方有不同用途，而且它的取值不同，也代表不同的含义。</p>
<ul>
<li>负数代表正在进行初始化或扩容操作</li>
<li>-1代表正在初始化</li>
<li>-N 表示有N-1个线程正在进行扩容操作</li>
<li>正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小，这一点类似于扩容阈值的概念。还后面可以看到，它的值始终是当前ConcurrentHashMap容量的0.75倍，这与loadfactor是对应的。</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 盛装Node元素的数组 它的大小是2的整数次幂</span></span><br><span class="line"><span class="comment">     * Size is always a power of two. Accessed directly by iterators.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line">		</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table initialization and resizing control.  When negative, the</span></span><br><span class="line"><span class="comment">     * table is being initialized or resized: -1 for initialization,</span></span><br><span class="line"><span class="comment">     * else -(1 + the number of active resizing threads).  Otherwise,</span></span><br><span class="line"><span class="comment">     * when table is null, holds the initial table size to use upon</span></span><br><span class="line"><span class="comment">     * creation, or 0 for default. After initialization, holds the</span></span><br><span class="line"><span class="comment">     * next element count value upon which to resize the table.</span></span><br><span class="line"><span class="comment">     hash表初始化或扩容时的一个控制位标识量。</span></span><br><span class="line"><span class="comment">     负数代表正在进行初始化或扩容操作</span></span><br><span class="line"><span class="comment">     -1代表正在初始化</span></span><br><span class="line"><span class="comment">     -N 表示有N-1个线程正在进行扩容操作</span></span><br><span class="line"><span class="comment">     正数或0代表hash表还没有被初始化，这个数值表示初始化或下一次进行扩容的大小</span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl; </span><br><span class="line">    <span class="comment">// 以下两个是用来控制扩容的时候 单线程进入的变量</span></span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The number of bits used for generation stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     * Must be at least 6 for 32bit arrays.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</span><br><span class="line">		<span class="comment">/**</span></span><br><span class="line"><span class="comment">     * The bit shift for recording size stamp in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Encodings for Node hash fields. See above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MOVED     = -<span class="number">1</span>; <span class="comment">// hash值是-1，表示这是一个forwardNode节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TREEBIN   = -<span class="number">2</span>; <span class="comment">// hash值是-2  表示这时一个TreeBin节点</span></span><br></pre></td></tr></table></figure>
<h2 id="重要的类"><a href="#重要的类" class="headerlink" title="重要的类"></a>重要的类</h2><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><p>Node是最核心的内部类，它包装了key-value键值对，所有插入ConcurrentHashMap的数据都包装在这里面。它与HashMap中的定义很相似，但是但是有一些差别它对value和next属性设置了volatile同步锁(与JDK7的Segment相同)，它不允许调用setValue方法直接改变Node的value域，它增加了find方法辅助map.get()方法。</p>
<h3 id="TreeNode"><a href="#TreeNode" class="headerlink" title="TreeNode"></a>TreeNode</h3><p>树节点类，另外一个核心的数据结构。当链表长度过长的时候，会转换为TreeNode。但是与HashMap不相同的是，它并不是直接转换为红黑树，而是把这些结点包装成TreeNode放在TreeBin对象中，由TreeBin完成对红黑树的包装。而且TreeNode在ConcurrentHashMap集成自Node类，而并非HashMap中的集成自LinkedHashMap.Entry&lt;K,V&gt;类，也就是说TreeNode带有next指针，这样做的目的是方便基于TreeBin的访问。</p>
<h3 id="TreeBin"><a href="#TreeBin" class="headerlink" title="TreeBin"></a>TreeBin</h3><p>这个类并不负责包装用户的key、value信息，而是包装的很多TreeNode节点。它代替了TreeNode的根节点，也就是说在实际的ConcurrentHashMap“数组”中，存放的是TreeBin对象，而不是TreeNode对象，这是与HashMap的区别。另外这个类还带有了读写锁。</p>
<p>这里仅贴出它的构造方法。可以看到在构造TreeBin节点时，仅仅指定了它的hash值为TREEBIN常量，这也就是个标识为。同时也看到我们熟悉的红黑树构造方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Creates bin with initial set of nodes headed by b.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        TreeBin(TreeNode&lt;K,V&gt; b) &#123;</span><br><span class="line">            <span class="keyword">super</span>(TREEBIN, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.first = b;</span><br><span class="line">            TreeNode&lt;K,V&gt; r = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (TreeNode&lt;K,V&gt; x = b, next; x != <span class="keyword">null</span>; x = next) &#123;</span><br><span class="line">                next = (TreeNode&lt;K,V&gt;)x.next;</span><br><span class="line">                x.left = x.right = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (r == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    x.parent = <span class="keyword">null</span>;</span><br><span class="line">                    x.red = <span class="keyword">false</span>;</span><br><span class="line">                    r = x;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    K k = x.key;</span><br><span class="line">                    <span class="keyword">int</span> h = x.hash;</span><br><span class="line">                    Class&lt;?&gt; kc = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (TreeNode&lt;K,V&gt; p = r;;) &#123;</span><br><span class="line">                        <span class="keyword">int</span> dir, ph;</span><br><span class="line">                        K pk = p.key;</span><br><span class="line">                        <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                            dir = -<span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                            dir = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> ((kc == <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                  (kc = comparableClassFor(k)) == <span class="keyword">null</span>) ||</span><br><span class="line">                                 (dir = compareComparables(kc, k, pk)) == <span class="number">0</span>)</span><br><span class="line">                            dir = tieBreakOrder(k, pk);</span><br><span class="line">                            TreeNode&lt;K,V&gt; xp = p;</span><br><span class="line">                        <span class="keyword">if</span> ((p = (dir &lt;= <span class="number">0</span>) ? p.left : p.right) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            x.parent = xp;</span><br><span class="line">                            <span class="keyword">if</span> (dir &lt;= <span class="number">0</span>)</span><br><span class="line">                                xp.left = x;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                xp.right = x;</span><br><span class="line">                            r = balanceInsertion(r, x);</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.root = r;</span><br><span class="line">            <span class="function"><span class="keyword">assert</span> <span class="title">checkInvariants</span><span class="params">(root)</span></span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<h3 id="ForwardingNode"><a href="#ForwardingNode" class="headerlink" title="ForwardingNode"></a>ForwardingNode</h3><p>一个用于连接两个table的节点类。它包含一个nextTable指针，用于指向下一张表。而且这个节点的key value next指针全部为null，它的hash值为-1. 这里面定义的find的方法是从nextTable里进行查询节点，而不是以自身为头节点进行查找。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A node inserted at head of bins during transfer operations.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">        ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">            <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">            <span class="keyword">this</span>.nextTable = tab;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></span><br><span class="line">            outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</span><br><span class="line">                Node&lt;K,V&gt; e; <span class="keyword">int</span> n;</span><br><span class="line">                <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">                    (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                    <span class="keyword">int</span> eh; K ek;</span><br><span class="line">                    <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</span><br><span class="line">                        ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                        <span class="keyword">return</span> e;</span><br><span class="line">                    <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                            tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                            <span class="keyword">continue</span> outer;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                            <span class="keyword">return</span> e.find(h, k);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</span><br><span class="line">                        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Unsafe与CAS"><a href="#Unsafe与CAS" class="headerlink" title="Unsafe与CAS"></a>Unsafe与CAS</h2><p>在ConcurrentHashMap中，随处可以看到<code>U</code>, 大量使用了<code>U.compareAndSwapXXX</code>的方法，这个方法是利用一个CAS算法实现无锁化的修改值的操作，他可以大大降低锁代理的性能消耗。这个算法的基本思想就是不断地去比较当前内存中的变量值与你指定的一个变量值是否相等，如果相等，则接受你指定的修改的值，否则拒绝你的操作。因为当前线程中的值已经不是最新的值，你的修改很可能会覆盖掉其他线程修改的结果。这一点与乐观锁，SVN的思想是比较类似的。</p>
<h3 id="unsafe静态块"><a href="#unsafe静态块" class="headerlink" title="unsafe静态块"></a>unsafe静态块</h3><p>unsafe代码块控制了一些属性的修改工作，比如最常用的SIZECTL 。在这一版本的concurrentHashMap中，大量应用来的CAS方法进行变量、属性的修改工作。利用CAS进行无锁操作，可以大大提高性能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> sun.misc.Unsafe U;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> SIZECTL;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> TRANSFERINDEX;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> BASECOUNT;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> CELLSBUSY;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> CELLVALUE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> ABASE;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ASHIFT;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            U = sun.misc.Unsafe.getUnsafe();</span><br><span class="line">            Class&lt;?&gt; k = ConcurrentHashMap.class;</span><br><span class="line">            SIZECTL = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">"sizeCtl"</span>));</span><br><span class="line">            TRANSFERINDEX = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">"transferIndex"</span>));</span><br><span class="line">            BASECOUNT = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">"baseCount"</span>));</span><br><span class="line">            CELLSBUSY = U.objectFieldOffset</span><br><span class="line">                (k.getDeclaredField(<span class="string">"cellsBusy"</span>));</span><br><span class="line">            Class&lt;?&gt; ck = CounterCell.class;</span><br><span class="line">            CELLVALUE = U.objectFieldOffset</span><br><span class="line">                (ck.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">            Class&lt;?&gt; ak = Node[].class;</span><br><span class="line">            ABASE = U.arrayBaseOffset(ak);</span><br><span class="line">            <span class="keyword">int</span> scale = U.arrayIndexScale(ak);</span><br><span class="line">            <span class="keyword">if</span> ((scale &amp; (scale - <span class="number">1</span>)) != <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"data type scale not a power of two"</span>);</span><br><span class="line">            ASHIFT = <span class="number">31</span> - Integer.numberOfLeadingZeros(scale);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="三个核心方法"><a href="#三个核心方法" class="headerlink" title="三个核心方法"></a>三个核心方法</h3><p>ConcurrentHashMap定义了三个原子操作，用于对指定位置的节点进行操作。正是这些原子操作保证了ConcurrentHashMap的线程安全。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得在i位置上的Node节点</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function">Node&lt;K,V&gt; <span class="title">tabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (Node&lt;K,V&gt;)U.getObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE);</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//利用CAS算法设置i位置上的Node节点。之所以能实现并发是因为他指定了原来这个节点的值是多少</span></span><br><span class="line">		<span class="comment">//在CAS算法中，会比较内存中的值与你指定的这个值是否相等，如果相等才接受你的修改，否则拒绝你的修改</span></span><br><span class="line">		<span class="comment">//因此当前线程中的值并不是最新的值，这种修改可能会覆盖掉其他线程的修改结果  有点类似于SVN</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">casTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        Node&lt;K,V&gt; c, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> U.compareAndSwapObject(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, c, v);</span><br><span class="line">    &#125;</span><br><span class="line">		<span class="comment">//利用volatile方法设置节点位置的值</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> &lt;K,V&gt; <span class="function"><span class="keyword">void</span> <span class="title">setTabAt</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> i, Node&lt;K,V&gt; v)</span> </span>&#123;</span><br><span class="line">        U.putObjectVolatile(tab, ((<span class="keyword">long</span>)i &lt;&lt; ASHIFT) + ABASE, v);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="初始化方法initTable"><a href="#初始化方法initTable" class="headerlink" title="初始化方法initTable"></a>初始化方法initTable</h3><p>对于ConcurrentHashMap来说，调用它的构造方法仅仅是设置了一些参数而已。而整个table的初始化是在向ConcurrentHashMap中插入元素的时候发生的。如调用put、computeIfAbsent、compute、merge等方法的时候，调用时机是检查table==null。</p>
<p>初始化方法主要应用了关键属性sizeCtl 如果这个值〈0，表示其他线程正在进行初始化，就放弃这个操作。在这也可以看出ConcurrentHashMap的初始化只能由一个线程完成。如果获得了初始化权限，就用CAS方法将sizeCtl置为-1，防止其他线程进入。初始化数组后，将sizeCtl的值改为0.75*n。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializes table, using the size recorded in sizeCtl.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">        <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        		<span class="comment">//sizeCtl表示有其他线程正在进行初始化操作，把线程挂起。对于table的初始化工作，只能有一个线程在进行。</span></span><br><span class="line">            <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>)</span><br><span class="line">                Thread.yield(); <span class="comment">// lost initialization race; just spin</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;<span class="comment">//利用CAS方法把sizectl的值置为-1 表示本线程正在进行初始化</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                        table = tab = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);<span class="comment">//相当于0.75*n 设置一个扩容的阈值</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> tab;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="扩容方法-transfer"><a href="#扩容方法-transfer" class="headerlink" title="扩容方法 transfer"></a>扩容方法 transfer</h3><p>当ConcurrentHashMap容量不足的时候，需要对table进行扩容。这个方法的基本思想跟HashMap是很像的，但是由于它是支持并发扩容的，所以要复杂的多。原因是它支持多线程进行扩容操作，而并没有加锁。我想这样做的目的不仅仅是为了满足concurrent的要求，而是希望利用并发处理去减少扩容带来的时间影响。因为在扩容的时候，总是会涉及到从一个“数组”到另一个“数组”拷贝的操作，如果这个操作能够并发进行，那真真是极好的了。</p>
<p>整个扩容操作分为两个部分</p>
<ul>
<li>第一部分是构建一个nextTable,它的容量是原来的两倍，这个操作是单线程完成的。这个单线程的保证是通过RESIZE_STAMP_SHIFT这个常量经过一次运算来保证的，这个地方在后面会有提到；</li>
<li>第二个部分就是将原来table中的元素复制到nextTable中，这里允许多线程进行操作。</li>
</ul>
<p>先来看一下单线程是如何完成的：</p>
<p>它的大体思想就是遍历、复制的过程。首先根据运算得到需要遍历的次数i，然后利用tabAt方法获得i位置的元素：</p>
<ul>
<li>如果这个位置为空，就在原table中的i位置放入forwardNode节点，这个也是触发并发扩容的关键点；</li>
<li>如果这个位置是Node节点（fh&gt;=0），如果它是一个链表的头节点，就构造一个反序链表，把他们分别放在nextTable的i和i+n的位置上</li>
<li>如果这个位置是TreeBin节点（fh&lt;0），也做一个反序处理，并且判断是否需要untreefi，把处理的结果分别放在nextTable的i和i+n的位置上</li>
<li>遍历过所有的节点以后就完成了复制工作，这时让nextTable作为新的table，并且更新sizeCtl为新容量的0.75倍 ，完成扩容。</li>
</ul>
<p>再看一下多线程是如何完成的：</p>
<p>在代码的69行有一个判断，如果遍历到的节点是forward节点，就向后继续遍历，再加上给节点上锁的机制，就完成了多线程的控制。多线程遍历节点，处理了一个节点，就把对应点的值set为forward，另一个线程看到forward，就向后遍历。这样交叉就完成了复制工作。而且还很好的解决了线程安全的问题。 这个方法的设计实在是让我膜拜。</p>
<p><a href="http://static.oschina.net/uploads/space/2016/0516/173132_DQMG_2243330.jpg" target="_blank" rel="noopener"><img src="http://static.oschina.net/uploads/space/2016/0516/173132_DQMG_2243330.jpg" alt=""></a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 一个过渡的table表  只有在扩容的时候才会使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"> </span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Moves and/or copies the nodes in each bin to new table. See</span></span><br><span class="line"><span class="comment">     * above for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">        <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">            stride = MIN_TRANSFER_STRIDE; <span class="comment">// subdivide range</span></span><br><span class="line">        <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123;            <span class="comment">// initiating</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];<span class="comment">//构造一个nextTable对象 它的容量是原来的两倍</span></span><br><span class="line">                nextTab = nt;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ex) &#123;      <span class="comment">// try to cope with OOME</span></span><br><span class="line">                sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            nextTable = nextTab;</span><br><span class="line">            transferIndex = n;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">        ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);<span class="comment">//构造一个连节点指针 用于标志位</span></span><br><span class="line">        <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;<span class="comment">//并发扩容的关键属性 如果等于true 说明这个节点已经处理过</span></span><br><span class="line">        <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; <span class="comment">// to ensure sweep before committing nextTab</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123;</span><br><span class="line">            Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">            <span class="comment">//这个while循环体的作用就是在控制i--  通过i--可以依次遍历原hash表中的节点</span></span><br><span class="line">            <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">                <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">                <span class="keyword">if</span> (--i &gt;= bound || finishing)</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    i = -<span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                         (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                          nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                       nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                    bound = nextBound;</span><br><span class="line">                    i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                    advance = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">                <span class="keyword">int</span> sc;</span><br><span class="line">                <span class="keyword">if</span> (finishing) &#123;</span><br><span class="line">                	<span class="comment">//如果所有的节点都已经完成复制工作  就把nextTable赋值给table 清空临时对象nextTable</span></span><br><span class="line">                    nextTable = <span class="keyword">null</span>;</span><br><span class="line">                    table = nextTab;</span><br><span class="line">                    sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);<span class="comment">//扩容阈值设置为原来容量的1.5倍  依然相当于现在容量的0.75倍</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//利用CAS方法更新这个扩容阈值，在这里面sizectl值减一，说明新加入一个线程参与到扩容操作</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT)</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                    i = n; <span class="comment">// recheck before commit</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果遍历到的节点为空 则放入ForwardingNode指针</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>)</span><br><span class="line">                advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd);</span><br><span class="line">            <span class="comment">//如果遍历到ForwardingNode节点  说明这个点已经被处理过了 直接跳过  这里是控制并发扩容的核心</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">                advance = <span class="keyword">true</span>; <span class="comment">// already processed</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">            		<span class="comment">//节点上锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                        Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                        <span class="comment">//如果fh&gt;=0 证明这是一个Node节点</span></span><br><span class="line">                        <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                            <span class="comment">//以下的部分在完成的工作是构造两个链表  一个是原链表  另一个是原链表的反序排列</span></span><br><span class="line">                            Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                                <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                    runBit = b;</span><br><span class="line">                                    lastRun = p;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123;</span><br><span class="line">                                ln = lastRun;</span><br><span class="line">                                hn = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                hn = lastRun;</span><br><span class="line">                                ln = <span class="keyword">null</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                                <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                    ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//在nextTable的i位置上插入一个链表</span></span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            <span class="comment">//在nextTable的i+n的位置上插入另一个链表</span></span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                            <span class="comment">//在table的i位置上插入forwardNode节点  表示已经处理过该节点</span></span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            <span class="comment">//设置advance为true 返回到上面的while循环中 就可以执行i--操作</span></span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">//对TreeBin对象进行处理  与上面的过程类似</span></span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                            TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                            TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                            TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                            <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                            <span class="comment">//构造正序和反序两个链表</span></span><br><span class="line">                            <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                                <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                                TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                    (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        lo = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        loTail.next = p;</span><br><span class="line">                                    loTail = p;</span><br><span class="line">                                    ++lc;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                        hi = p;</span><br><span class="line">                                    <span class="keyword">else</span></span><br><span class="line">                                        hiTail.next = p;</span><br><span class="line">                                    hiTail = p;</span><br><span class="line">                                    ++hc;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="comment">//如果扩容后已经不再需要tree的结构 反向转换为链表结构</span></span><br><span class="line">                            ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                                (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                            hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                                (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                             <span class="comment">//在nextTable的i位置上插入一个链表    </span></span><br><span class="line">                            setTabAt(nextTab, i, ln);</span><br><span class="line">                            <span class="comment">//在nextTable的i+n的位置上插入另一个链表</span></span><br><span class="line">                            setTabAt(nextTab, i + n, hn);</span><br><span class="line">                             <span class="comment">//在table的i位置上插入forwardNode节点  表示已经处理过该节点</span></span><br><span class="line">                            setTabAt(tab, i, fwd);</span><br><span class="line">                            <span class="comment">//设置advance为true 返回到上面的while循环中 就可以执行i--操作</span></span><br><span class="line">                            advance = <span class="keyword">true</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Put方法"><a href="#Put方法" class="headerlink" title="Put方法"></a>Put方法</h2><p>前面的所有的介绍其实都为这个方法做铺垫。ConcurrentHashMap最常用的就是put和get两个方法。现在来介绍put方法，这个put方法依然沿用HashMap的put方法的思想，根据hash值计算这个新插入的点在table中的位置i，如果i位置是空的，直接放进去，否则进行判断，如果i位置是树节点，按照树的方式插入新的节点，否则把i插入到链表的末尾。ConcurrentHashMap中依然沿用这个思想，有一个最重要的不同点就是ConcurrentHashMap不允许key或value为null值。另外由于涉及到多线程，put方法就要复杂一点。在多线程中可能有以下两个情况</p>
<ol>
<li><p>如果一个或多个线程正在对ConcurrentHashMap进行扩容操作，当前线程也要进入扩容的操作中。这个扩容的操作之所以能被检测到，是因为transfer方法中在空结点上插入forward节点，如果检测到需要插入的位置被forward节点占有，就帮助进行扩容；</p>
</li>
<li><p>如果检测到要插入的节点是非空且不是forward节点，就对这个节点加锁，这样就保证了线程安全。尽管这个有一些影响效率，但是还是会比hashTable的synchronized要好得多。</p>
</li>
</ol>
<p>整体流程就是首先定义不允许key或value为null的情况放入  对于每一个放入的值，首先利用spread方法对key的hashcode进行一次hash计算，由此来确定这个值在table中的位置。</p>
<p>如果这个位置是空的，那么直接放入，而且不需要加锁操作。</p>
<p> 如果这个位置存在结点，说明发生了hash碰撞，首先判断这个节点的类型。如果是链表节点（fh&gt;0）,则得到的结点就是hash值相同的节点组成的链表的头节点。需要依次向后遍历确定这个新加入的值所在位置。如果遇到hash值与key值都与新加入节点是一致的情况，则只需要更新value值即可。否则依次向后遍历，直到链表尾插入这个结点。如果加入这个节点以后链表长度大于8，就把这个链表转换成红黑树。如果这个节点的类型已经是树节点的话，直接调用树节点的插入方法进行插入新的值。</p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** Implementation for put and putIfAbsent */</span></span><br><span class="line">   <span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">   		<span class="comment">//不允许 key或value为null</span></span><br><span class="line">       <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       <span class="comment">//计算hash值</span></span><br><span class="line">       <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">       <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">       <span class="comment">//死循环 何时插入成功 何时跳出</span></span><br><span class="line">       <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;</span><br><span class="line">           Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">           <span class="comment">//如果table为空的话，初始化table</span></span><br><span class="line">           <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">               tab = initTable();</span><br><span class="line">           <span class="comment">//根据hash值计算出在table里面的位置 </span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">           	<span class="comment">//如果这个位置没有值 ，直接放进去，不需要加锁</span></span><br><span class="line">               <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                            <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>)))</span><br><span class="line">                   <span class="keyword">break</span>;                   <span class="comment">// no lock when adding to empty bin</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="comment">//当遇到表连接点时，需要进行整合表的操作</span></span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED)</span><br><span class="line">               tab = helpTransfer(tab, f);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               V oldVal = <span class="keyword">null</span>;</span><br><span class="line">               <span class="comment">//结点上锁  这里的结点可以理解为hash值相同组成的链表的头结点</span></span><br><span class="line">               <span class="keyword">synchronized</span> (f) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                       <span class="comment">//fh〉0 说明这个节点是一个链表的节点 不是树的节点</span></span><br><span class="line">                       <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                           binCount = <span class="number">1</span>;</span><br><span class="line">                           <span class="comment">//在这里遍历链表所有的结点</span></span><br><span class="line">                           <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                               K ek;</span><br><span class="line">                               <span class="comment">//如果hash值和key值相同  则修改对应结点的value值</span></span><br><span class="line">                               <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                   ((ek = e.key) == key ||</span><br><span class="line">                                    (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                   oldVal = e.val;</span><br><span class="line">                                   <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                       e.val = value;</span><br><span class="line">                                   <span class="keyword">break</span>;</span><br><span class="line">                               &#125;</span><br><span class="line">                               Node&lt;K,V&gt; pred = e;</span><br><span class="line">                               <span class="comment">//如果遍历到了最后一个结点，那么就证明新的节点需要插入 就把它插入在链表尾部</span></span><br><span class="line">                               <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                   pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                             value, <span class="keyword">null</span>);</span><br><span class="line">                                   <span class="keyword">break</span>;</span><br><span class="line">                               &#125;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                       <span class="comment">//如果这个节点是树节点，就按照树的方式插入值</span></span><br><span class="line">                       <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123;</span><br><span class="line">                           Node&lt;K,V&gt; p;</span><br><span class="line">                           binCount = <span class="number">2</span>;</span><br><span class="line">                           <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                          value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                               oldVal = p.val;</span><br><span class="line">                               <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                   p.val = value;</span><br><span class="line">                           &#125;</span><br><span class="line">                       &#125;</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">               	<span class="comment">//如果链表长度已经达到临界值8 就需要把链表转换为树结构</span></span><br><span class="line">                   <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                       treeifyBin(tab, i);</span><br><span class="line">                   <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                       <span class="keyword">return</span> oldVal;</span><br><span class="line">                   <span class="keyword">break</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//将当前ConcurrentHashMap的元素数量+1</span></span><br><span class="line">       addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>我们可以发现JDK8中的实现也是锁分离的思想，只是锁住的是一个Node，而不是JDK7中的Segment，而锁住Node之前的操作是无锁的并且也是线程安全的，建立在之前提到的3个原子操作上。</p>
<h3 id="helpTransfer方法"><a href="#helpTransfer方法" class="headerlink" title="helpTransfer方法"></a>helpTransfer方法</h3><p>这是一个协助扩容的方法。这个方法被调用的时候，当前ConcurrentHashMap一定已经有了nextTable对象，首先拿到这个nextTable对象，调用transfer方法。回看上面的transfer方法可以看到，当本线程进入扩容方法的时候会直接进入复制阶段。</p>
<h3 id="treeifyBin方法"><a href="#treeifyBin方法" class="headerlink" title="treeifyBin方法"></a>treeifyBin方法</h3><p>这个方法用于将过长的链表转换为TreeBin对象。但是他并不是直接转换，而是进行一次容量判断，如果容量没有达到转换的要求，直接进行扩容操作并返回；如果满足条件才链表的结构抓换为TreeBin ，这与HashMap不同的是，它并没有把TreeNode直接放入红黑树，而是利用了TreeBin这个小容器来封装所有的TreeNode.</p>
<h2 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h2><p>get方法比较简单，给定一个key来确定value的时候，必须满足两个条件  key相同  hash值相同，对于节点可能在链表或树上的情况，需要分别去查找。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">        <span class="comment">//计算hash值</span></span><br><span class="line">        <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">        <span class="comment">//根据hash值确定节点位置</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果搜索到的节点key与传入的key相同且不为null,直接返回这个节点	</span></span><br><span class="line">            <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果eh&lt;0 说明这个节点在树上 直接寻找</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">             <span class="comment">//否则遍历链表 找到对应的值并返回</span></span><br><span class="line">            <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                    ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                    <span class="keyword">return</span> e.val;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="Size相关的方法"><a href="#Size相关的方法" class="headerlink" title="Size相关的方法"></a>Size相关的方法</h2><p>对于ConcurrentHashMap来说，这个table里到底装了多少东西其实是个不确定的数量，因为不可能在调用size()方法的时候像GC的“stop the world”一样让其他线程都停下来让你去统计，因此只能说这个数量是个估计值。对于这个估计值，ConcurrentHashMap也是大费周章才计算出来的。</p>
<h3 id="辅助定义"><a href="#辅助定义" class="headerlink" title="辅助定义"></a>辅助定义</h3><p>为了统计元素个数，ConcurrentHashMap定义了一些变量和一个内部类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * A padded cell for distributing counts.  Adapted from LongAdder</span></span><br><span class="line"><span class="comment">     * and Striped64.  See their internal docs for explanation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span> </span>&#123;</span><br><span class="line">        <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">        CounterCell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">  <span class="comment">/******************************************/</span>  </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实际上保存的是hashmap中的元素个数  利用CAS锁进行更新</span></span><br><span class="line"><span class="comment">     但它并不用返回当前hashmap的元素个数 </span></span><br><span class="line"><span class="comment">     </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Spinlock (locked via CAS) used when resizing and/or creating CounterCells.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Table of counter cells. When non-null, size is a power of 2.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br></pre></td></tr></table></figure>
<h3 id="mappingCount与Size方法"><a href="#mappingCount与Size方法" class="headerlink" title="mappingCount与Size方法"></a>mappingCount与Size方法</h3><p>mappingCount与size方法的类似  从Java工程师给出的注释来看，应该使用mappingCount代替size方法 两个方法都没有直接返回basecount 而是统计一次这个值，而这个值其实也是一个大概的数值，因此可能在统计的时候有其他线程正在执行插入或删除操作。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = sumCount();</span><br><span class="line">        <span class="keyword">return</span> ((n &lt; <span class="number">0L</span>) ? <span class="number">0</span> :</span><br><span class="line">                (n &gt; (<span class="keyword">long</span>)Integer.MAX_VALUE) ? Integer.MAX_VALUE :</span><br><span class="line">                (<span class="keyword">int</span>)n);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the number of mappings. This method should be used</span></span><br><span class="line"><span class="comment">     * instead of &#123;<span class="doctag">@link</span> #size&#125; because a ConcurrentHashMap may</span></span><br><span class="line"><span class="comment">     * contain more mappings than can be represented as an int. The</span></span><br><span class="line"><span class="comment">     * value returned is an estimate; the actual count may differ if</span></span><br><span class="line"><span class="comment">     * there are concurrent insertions or removals.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> the number of mappings</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">mappingCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> n = sumCount();</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0L</span>) ? <span class="number">0L</span> : n; <span class="comment">// ignore transient negative values</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="function"><span class="keyword">final</span> <span class="keyword">long</span> <span class="title">sumCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CounterCell[] as = counterCells; CounterCell a;</span><br><span class="line">        <span class="keyword">long</span> sum = baseCount;</span><br><span class="line">        <span class="keyword">if</span> (as != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; as.length; ++i) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((a = as[i]) != <span class="keyword">null</span>)</span><br><span class="line">                    sum += a.value;<span class="comment">//所有counter的值求和</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="addCount方法"><a href="#addCount方法" class="headerlink" title="addCount方法"></a>addCount方法</h3><p>在put方法结尾处调用了addCount方法，把当前ConcurrentHashMap的元素个数+1这个方法一共做了两件事,更新baseCount的值，检测是否进行扩容。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">        CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">        <span class="comment">//利用CAS方法更新baseCount的值 </span></span><br><span class="line">        <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">            !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">            CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">            <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">                (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">                !(uncontended =</span><br><span class="line">                  U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">                fullAddCount(x, uncontended);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果check值大于等于0 则需要检验是否需要进行扩容操作</span></span><br><span class="line">        <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">            <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                   (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123;</span><br><span class="line">                <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">                <span class="comment">//</span></span><br><span class="line">                <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                        sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                        transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                     <span class="comment">//如果已经有其他线程在执行扩容操作</span></span><br><span class="line">                    <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                        transfer(tab, nt);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当前线程是唯一的或是第一个发起扩容的线程  此时nextTable=null</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                             (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                    transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">                s = sumCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>JDK6,7中的ConcurrentHashmap主要使用Segment来实现减小锁粒度，把HashMap分割成若干个Segment，在put的时候需要锁住Segment，get时候不加锁，使用volatile来保证可见性，当要统计全局时（比如size），首先会尝试多次计算modcount来确定，这几次尝试中，是否有其他线程进行了修改操作，如果没有，则直接返回size。如果有，则需要依次锁住所有的Segment来计算。</p>
<p>jdk7中ConcurrentHashmap中，当长度过长碰撞会很频繁，链表的增改删查操作都会消耗很长的时间，影响性能,所以jdk8 中完全重写了concurrentHashmap,代码量从原来的1000多行变成了 6000多 行，实现上也和原来的分段式存储有很大的区别。</p>
<p>主要设计上的变化有以下几点: </p>
<ol>
<li>不采用segment而采用node，锁住node来实现减小锁粒度。</li>
<li>设计了MOVED状态 当resize的中过程中 线程2还在put数据，线程2会帮助resize。<br>3, 使用3个CAS操作来确保node的一些操作的原子性，这种方式代替了锁。</li>
<li>sizeCtl的不同值来代表不同含义，起到了控制的作用。</li>
</ol>
<p>至于为什么JDK8中使用synchronized而不是ReentrantLock，是因为JDK8中对synchronized有了足够的优化吧。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://www.jianshu.com/p/4806633fcc55" target="_blank" rel="noopener">http://www.jianshu.com/p/4806633fcc55</a></p>
<p><a href="http://blog.csdn.net/u010723709/article/details/48007881" target="_blank" rel="noopener">http://blog.csdn.net/u010723709/article/details/48007881</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;只剩下这个没有mark了，偏偏这时候，面试被问到，悲剧了😢&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;jdk6和jdk7中的实现&quot;&gt;&lt;a href=&quot;#jdk6和jdk7中的实现&quot; class=&quot;headerlink&quot; title=&quot;jdk6和jdk7中的实现&quot;&gt;&lt;/a&gt;jdk6和jdk7中的实现&lt;/h1&gt;&lt;h2 id=&quot;设计思路&quot;&gt;&lt;a href=&quot;#设计思路&quot; class=&quot;headerlink&quot; title=&quot;设计思路&quot;&gt;&lt;/a&gt;设计思路&lt;/h2&gt;&lt;p&gt;ConcurrentHashMap采用了分段锁的设计，只有在同一个分段内才存在竞态关系，不同的分段锁之间没有锁竞争。相比于对整个Map加锁的设计，分段锁大大的提高了高并发环境下的处理能力。但同时，由于不是对整个Map加锁，导致一些需要扫描整个Map的方法（如size(), containsValue()）需要使用特殊的实现，另外一些方法（如clear()）甚至放弃了对一致性的要求（ConcurrentHashMap是弱一致性的）。&lt;/p&gt;
&lt;p&gt;ConcurrentHashMap中的分段锁称为Segment，它即类似于HashMap的结构，即内部拥有一个Entry数组，数组中的每个元素又是一个链表；同时又是一个ReentrantLock（Segment继承了ReentrantLock）。ConcurrentHashMap中的HashEntry相对于HashMap中的Entry有一定的差异性：HashEntry中的value以及next都被volatile修饰，这样在多线程读写过程中能够保持它们的可见性，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;HashEntry&lt;/span&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;K&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;V&lt;/span&gt;&amp;gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hash;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; K key;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; V value;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt; HashEntry&amp;lt;K,V&amp;gt; next;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://idiotsky.top/categories/java/"/>
    
    
      <category term="java" scheme="http://idiotsky.top/tags/java/"/>
    
      <category term="数据结构" scheme="http://idiotsky.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="conccurenthashmap" scheme="http://idiotsky.top/tags/conccurenthashmap/"/>
    
  </entry>
  
  <entry>
    <title>一个很好理解raft的动画演示</title>
    <link href="http://idiotsky.top/2018/07/24/understanding-raft/"/>
    <id>http://idiotsky.top/2018/07/24/understanding-raft/</id>
    <published>2018-07-24T13:23:16.000Z</published>
    <updated>2018-09-17T15:38:54.995Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>很好理解的动画，一看就懂了👿</p>
</blockquote>
<iframe src="http://idiotsky.top/raft/raft/index.html" style="width:100%;height:700px;border-width: 0px;"><br></iframe>

<a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;很好理解的动画，一看就懂了👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;iframe src=&quot;http://idiotsky.top/raft/raft/index.html&quot; style=&quot;width:100%;height:700px;border-width: 0px;&quot;&gt;&lt;br&gt;&lt;/iframe&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://idiotsky.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="raft" scheme="http://idiotsky.top/tags/raft/"/>
    
  </entry>
  
  <entry>
    <title>Paxos示例</title>
    <link href="http://idiotsky.top/2018/07/24/paxos-example/"/>
    <id>http://idiotsky.top/2018/07/24/paxos-example/</id>
    <published>2018-07-24T12:11:55.000Z</published>
    <updated>2018-07-26T01:25:04.105Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章通过一个有效的例子描述了一个名为Paxos 的分布式一致性算法。</p>
<p>分布式一致性算法用于使一组计算机能够就单个值达成一致，例如通常使用两阶段或三阶段提交做出的提交或回滚决策。只要选择一个值，算法的其他值就没有关系了。</p>
<p>在分布式系统中，这很难，因为机器之间的消息可能会丢失或无限期延迟，或者机器本身可能会发生故障。</p>
<p>Paxos保证节点只会选择单个值（意味着它保证安全），但不保证在大多数节点不可用时能不能去到值</p>
<a id="more"></a>
<h1 id="一般的做法"><a href="#一般的做法" class="headerlink" title="一般的做法"></a>一般的做法</h1><p>一个Paxos的节点可以采取任何或所有三个角色：<code>proposer</code>，<code>acceptor</code>和<code>learner</code>。</p>
<p>一个<code>proposer</code>提议一个值是需要同意才行的，它发一个包含值的提议给所有的<code>acceptor</code>，<code>acceptor</code>决定是否同意这个值。</p>
<p>每个<code>acceptor</code>独立选择一个值–它可能收到多个来自不同<code>proposer</code>的提议–并将其决定发送给<code>learner</code>，以确定是否已接受任何值。</p>
<p>对于Paxos接受的值，大多数<code>acceptor</code>必须选择相同的值。实际上，单个节点可以承担许多或所有这些角色，但在本节的示例中，每个角色都在一个单独的节点上运行，如下所示。</p>
<p><a href="http://idiotsky.top/images3/paxos-example.png"><img src="http://idiotsky.top/images3/paxos-example.png" alt=""></a></p>
<center>图1：基本Paxos架构。一些<code>proposer</code>向<code>acceptor</code>提出建议。当<code>acceptor</code>接受一个值时，它会将结果发送给<code>learner</code>节点。<br></center>

<h1 id="Paxos示例"><a href="#Paxos示例" class="headerlink" title="Paxos示例"></a>Paxos示例</h1><p>在标准的Paxos算法中，<code>proposer</code>向<code>acceptor</code>发送两种类型的消息：<strong>准备</strong>和<strong>接受</strong>请求。</p>
<p>在该算法的第一阶段，<code>proposer</code>向每个<code>acceptor</code>发送包含建议值v和提议号n的准备请求。</p>
<p>对于其他<code>proposer</code>的提案号，每个<code>proposer</code>的提议号必须是正数的，单调递增的，唯一的，自然的数字。</p>
<p>在下面说明的示例中，有两个<code>proposer</code>，两个都提出准备请求。来自<code>proposer A</code>的请求和来自<code>proposer B</code>的请求首先到达<code>acceptor X</code>和<code>acceptor Y</code>，而来自<code>proposer B</code>的请求首先到达<code>acceptor Z</code>。</p>
<p><a href="http://idiotsky.top/images3/paxos-example-1.png"><img src="http://idiotsky.top/images3/paxos-example-1.png" alt=""></a></p>
<center>图2：proposer A和B各自向每个接受者发送准备请求。在这个例子中，proposer A的请求首先到达接acceptor X和Y，而proposer B的请求首先到达acceptor Z.</center>

<p>如果接收准备请求的<code>acceptor</code>没有看到另一个提议，则<code>acceptor</code>以准备响应作出响应，该准备响应承诺永远不接受具有较低提议编号的另一提议。</p>
<p>这在下面的图3中说明，其显示了每个接受者对他们收到的第一个准备请求的响应。</p>
<p><a href="http://idiotsky.top/images3/paxos-example-2.png"><img src="http://idiotsky.top/images3/paxos-example-2.png" alt=""></a></p>
<center>图3：每个<code>acceptor</code>响应它收到的第一个准备请求消息。</center>

<p>最终，<code>acceptor Z</code>接收<code>proposer A</code>的请求，<code>acceptor X</code>和<code>acceptor Y</code>接收<code>proposer B</code>的请求。</p>
<p>如果<code>acceptor</code>已经看到具有更高提议号的请求，则忽略准备请求，<code>proposer A</code>对<code>acceptor Z</code>的请求就是这种情况。</p>
<p>如果<code>acceptor</code>没有看到更高编号的请求，它再次承诺忽略具有较低提议编号的任何请求，并发回其已接受的编号最高的提议以及该提议的值。</p>
<p><code>proposer B</code>对<code>acceptor X</code>和<code>acceptor Y</code>的请求就是这种情况，如下图所示：</p>
<p><a href="http://idiotsky.top/images3/paxos-example-3.png"><img src="http://idiotsky.top/images3/paxos-example-3.png" alt=""></a></p>
<center>图4：acceptor Z忽略了proposer A的请求，因为它已经看到了更高编号的提议（4&gt; 2）。acceptor X和Y用他们先前确认的最高请求来响应proposer B的请求，并承诺忽略任何编号较低的提议。</center>

<p>一旦<code>proposer</code>收到大多数<code>acceptor</code>的准备响应，它就可以发出接受请求。</p>
<p>由于<code>proposer A</code>仅收到表明没有先前提案<code>[no previous]</code>的响应，因此它向<code>acceptor</code>发送与初始提案相同的提议编号和值的接受请求（n = 2，v = 8）。</p>
<p>然而，这些请求被每一个<code>acceptor</code>忽略，因为<code>acceptor</code>都承诺不接受的提议号低于请求4（响应准备请求给<code>proposer B</code>）。</p>
<p><code>proposer B</code>向每个<code>acceptor</code>发送包含其先前使用的提议号（n = 4）的接受请求，并且这个接受请求还包含了在其收到的准备响应消息中与最高提议号相关联的值（v = 8）。</p>
<p>请注意，这不是<code>proposer B</code>最初提出的值，而是它看到的准备响应消息中的最高值。</p>
<p><a href="http://idiotsky.top/images3/paxos-example-4.png"><img src="http://idiotsky.top/images3/paxos-example-4.png" alt=""></a></p>
<center>图5，<code>proposer B</code>发送一个接受请求给每个<code>acceptor</code>,这个请求包含了它之前的提议号(4)和它从[n=2,v=8]中看到的值（8）</center>

<p>如果<code>acceptor</code>收到的接受请求的提议号大于或等于之前它保证的，那么它接受并向每个<code>learner</code>节点发送通知。</p>
<p>当<code>learner</code>发现大多数`acceptor已接受某个值时，Paxos算法会选择这个值，如下所示：</p>
<p><a href="http://idiotsky.top/images3/paxos-example-5.png"><img src="http://idiotsky.top/images3/paxos-example-5.png" alt=""></a></p>
<p>一旦Paxos选择了一个值，与其他<code>proposer</code>的进一步沟通就无法改变这个值。</p>
<p>如果另一个<code>proposer</code>（<code>proposer C</code>）发送的提议号比之前看到的提议号更高，并且具有不同的值（例如，n = 6，v = 7），则每个<code>acceptor</code>都会使用之前的最高提议号进行响应（n = 4，v = 8）。</p>
<p>这要求<code>proposer C</code>发送包含[n = 6，v = 8] 的接受请求，该请求仅确认已经选择的值。此外，如果一些少<code>acceptor</code>还没有选择一个价值，这个过程可以确保他们最终就同一价值达成共识。</p>
<p>Lamport和Baker等人在论文中讨论了对标准Paxos算法的各种效率改进。例如，如果<code>proposer</code>知道它是第一个建议值的话，则准备请求不再是必须的了。</p>
<p>因为这种请求的提议编号为0，如果收到任何更高编号的请求的话，这种请求就会被忽略的。</p>
<p>翻译 <a href="https://angus.nyc/2012/paxos-by-example/" target="_blank" rel="noopener">https://angus.nyc/2012/paxos-by-example/</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章通过一个有效的例子描述了一个名为Paxos 的分布式一致性算法。&lt;/p&gt;
&lt;p&gt;分布式一致性算法用于使一组计算机能够就单个值达成一致，例如通常使用两阶段或三阶段提交做出的提交或回滚决策。只要选择一个值，算法的其他值就没有关系了。&lt;/p&gt;
&lt;p&gt;在分布式系统中，这很难，因为机器之间的消息可能会丢失或无限期延迟，或者机器本身可能会发生故障。&lt;/p&gt;
&lt;p&gt;Paxos保证节点只会选择单个值（意味着它保证安全），但不保证在大多数节点不可用时能不能去到值&lt;/p&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://idiotsky.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="Paxos" scheme="http://idiotsky.top/tags/Paxos/"/>
    
  </entry>
  
  <entry>
    <title>kafka总结</title>
    <link href="http://idiotsky.top/2018/07/22/kafka-summary/"/>
    <id>http://idiotsky.top/2018/07/22/kafka-summary/</id>
    <published>2018-07-22T13:38:51.000Z</published>
    <updated>2018-07-22T07:50:29.168Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>玩了很久的kafka，现在总结下吧，当然通过别人的文章来总结还是事半功倍的👿</p>
</blockquote>
<h1 id="架构图"><a href="#架构图" class="headerlink" title="架构图"></a>架构图</h1><p><a href="http://idiotsky.top/images3/kafka-1.jpg"><img src="http://idiotsky.top/images3/kafka-1.jpg" alt=""></a></p>
<p>如上图，一个kafka架构包括若干个Producer（服务器日志、业务数据、web前端产生的page view等），若干个Broker（kafka支持水平扩展，一般broker数量越多集群的吞吐量越大），若干个consumer group，一个Zookeeper集群（kafka通过Zookeeper管理集群配置、选举leader、consumer group发生变化时进行rebalance）。</p>
<a id="more"></a>
<h1 id="名称解释"><a href="#名称解释" class="headerlink" title="名称解释"></a>名称解释</h1><ul>
<li>Broker: 消息中间件处理节点（服务器），一个节点就是一个broker，一个Kafka集群由一个或多个broker组成</li>
<li>Topic: Kafka对消息进行归类，发送到集群的每一条消息都要指定一个topic</li>
<li>Partition: 物理上的概念，每个topic包含一个或多个partition，一个partition对应一个文件夹，这个文件夹下存储partition的数据和索引文件，每个partition内部是有序的</li>
<li>Producer: 生产者，负责发布消息到broker</li>
<li>Consumer: 消费者，从broker读取消息</li>
<li>ConsumerGroup: 每个consumer属于一个特定的consumer group，可为每个consumer指定group name，若不指定，则属于默认的group，一条消息可以发送到不同的consumer group，但一个consumer group中只能有一个consumer能消费这条消息</li>
</ul>
<h1 id="关系解释"><a href="#关系解释" class="headerlink" title="关系解释"></a>关系解释</h1><h2 id="Topic-amp-Partition"><a href="#Topic-amp-Partition" class="headerlink" title="Topic &amp; Partition"></a>Topic &amp; Partition</h2><p>一个topic为一类消息，每条消息必须指定一个topic。物理上，一个topic分成一个或多个partition，每个partition有多个副本分布在不同的broker中，如下图。</p>
<p><a href="http://idiotsky.top/images3/kafka-2.jpg"><img src="http://idiotsky.top/images3/kafka-2.jpg" alt=""></a></p>
<p>每个partition在存储层面是一个append log文件，发布到此partition的消息会追加到log文件的尾部，为顺序写人磁盘（顺序写磁盘比随机写内存的效率还要高）。每条消息在log文件中的位置成为offset（偏移量），offset为一个long型数字，唯一标记一条消息。如下图</p>
<p><a href="http://idiotsky.top/images3/kafka-3.png"><img src="http://idiotsky.top/images3/kafka-3.png" alt=""></a></p>
<p>每个消费者唯一保存的元数据是offset值，这个位置完全为消费者控制，因此消费者可以采用任何顺序来消费记录，如下图</p>
<p><a href="http://idiotsky.top/images3/kafka-4.png"><img src="http://idiotsky.top/images3/kafka-4.png" alt=""></a></p>
<p>kafka中只能保证partition中记录是有序的，而不保证topic中不同partition的顺序</p>
<h2 id="Consumer-group-amp-consumer"><a href="#Consumer-group-amp-consumer" class="headerlink" title="Consumer group &amp; consumer"></a>Consumer group &amp; consumer</h2><p>一个消费组由一个或多个消费者实例组成，便于扩容与容错。</p>
<p>kafka是发布与订阅模式，这个订阅者是消费组，而不是消费者实例。每一条消息只会被同一个消费组里的一个消费者实例消费，不同的消费组可以同时消费同一条消息，如下图</p>
<p><a href="http://idiotsky.top/images3/kafka-5.png"><img src="http://idiotsky.top/images3/kafka-5.png" alt=""></a></p>
<p>为了实现传统的消息队列中消息只被消费一次的语义，kafka保证同一个消费组里只有一个消费者会消费一条消息，kafka还允许不同的消费组同时消费一条消息，这一特性可以为消息的多元化处理提供了支持，kafka的设计理念之一就是同时提供离线处理和实时处理，因此，可以使用Storm这种实时流处理系统对消息进行实时在线处理，同时使用Hadoop这种批处理系统进行离线处理，还可以同时将数据实时备份到另一个数据中心，只需要保证这三个操作的消费者实例在不同consumer group 即可</p>
<h2 id="Consumer-Rebalance"><a href="#Consumer-Rebalance" class="headerlink" title="Consumer Rebalance"></a>Consumer Rebalance</h2><p>kafka保证了同一个消费组中只有一个消费者实例会消费某条消息，实际上，kafka保证的是稳定状态下每一个消费者实例只会消费一个或多个特定partition数据，而某个partition的数据只会被某一特定的consumer实例消费，这样设计的劣势是无法让同一个消费组里的consumer均匀消费，优势是每个consumer不用跟大量的broker通信，减少通信开销，也降低了分配难度。而且，同一个partition数据是有序的，保证了有序被消费。根据consumer group中的consumer数量和partition数量，可以分为以下3种情况：</p>
<ul>
<li>若consumer group中的consumer数量少于partition数量，则至少有1个consumer会消费多个partition数据</li>
<li>若consumer group中的consumer数量多于partition数量，则会有部分consumer无法消费该topic中任何一条消息</li>
<li>若consumer group中的consumer数量等于partition数量，则正好一个consumer消费一个partition数据</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>以一个实例结束这篇文章</p>
<p>创建一个<code>kafka-topic</code>,它有4个分片。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kafka-topics.sh --create --zookeeper zk:2181 --replication-factor 1 --partitions 4 --topic kafka-topic</span><br></pre></td></tr></table></figure>
<p>编写一个<a href="https://github.com/ejunjsh/java-code/blob/master/src/main/java/com/sky/code/kafka/CustomPartitionProducer.java" target="_blank" rel="noopener">生产者</a></p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">Sun Jul 22 07:17:11 UTC 2018,kafka.apache.org,192.168.14.203</span><br><span class="line">publish to partition 2</span><br><span class="line">offset  0</span><br><span class="line">Sun Jul 22 07:17:14 UTC 2018,kafka.apache.org,192.168.14.134</span><br><span class="line">publish to partition 0</span><br><span class="line">offset  0</span><br><span class="line">Sun Jul 22 07:17:16 UTC 2018,kafka.apache.org,192.168.14.150</span><br><span class="line">publish to partition 0</span><br><span class="line">offset  1</span><br><span class="line">Sun Jul 22 07:17:18 UTC 2018,kafka.apache.org,192.168.14.49</span><br><span class="line">publish to partition 2</span><br><span class="line">offset  1</span><br><span class="line">Sun Jul 22 07:17:20 UTC 2018,kafka.apache.org,192.168.14.55</span><br><span class="line">publish to partition 2</span><br><span class="line">offset  2</span><br><span class="line">Sun Jul 22 07:17:22 UTC 2018,kafka.apache.org,192.168.14.172</span><br><span class="line">publish to partition 2</span><br><span class="line">offset  3</span><br><span class="line">Sun Jul 22 07:17:24 UTC 2018,kafka.apache.org,192.168.14.122</span><br><span class="line">publish to partition 1</span><br><span class="line">offset  0</span><br><span class="line">Sun Jul 22 07:17:26 UTC 2018,kafka.apache.org,192.168.14.237</span><br><span class="line">publish to partition 3</span><br><span class="line">offset  0</span><br><span class="line">Sun Jul 22 07:17:28 UTC 2018,kafka.apache.org,192.168.14.95</span><br><span class="line">publish to partition 2</span><br><span class="line">offset  4</span><br></pre></td></tr></table></figure></p>
<p>基本都均匀写到不同的分片上</p>
<p>接下来是一个<a href="https://github.com/ejunjsh/java-code/blob/master/src/main/java/com/sky/code/kafka/CustomPartitionConsumer.java" target="_blank" rel="noopener">消费者</a>，它启动三个线程代表三个消费者去消费</p>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">0: &#123;partition=1, offset=20, value=Sun Jul 22 07:20:12 UTC 2018,kafka.apache.org,192.168.14.141&#125;</span><br><span class="line">0: &#123;partition=0, offset=20, value=Sun Jul 22 07:20:14 UTC 2018,kafka.apache.org,192.168.14.113&#125;</span><br><span class="line">2: &#123;partition=3, offset=24, value=Sun Jul 22 07:20:16 UTC 2018,kafka.apache.org,192.168.14.173&#125;</span><br><span class="line">0: &#123;partition=0, offset=21, value=Sun Jul 22 07:20:18 UTC 2018,kafka.apache.org,192.168.14.38&#125;</span><br><span class="line">2: &#123;partition=3, offset=25, value=Sun Jul 22 07:20:20 UTC 2018,kafka.apache.org,192.168.14.222&#125;</span><br><span class="line">1: &#123;partition=2, offset=26, value=Sun Jul 22 07:20:22 UTC 2018,kafka.apache.org,192.168.14.19&#125;</span><br><span class="line">2: &#123;partition=3, offset=26, value=Sun Jul 22 07:20:24 UTC 2018,kafka.apache.org,192.168.14.227&#125;</span><br><span class="line">0: &#123;partition=1, offset=21, value=Sun Jul 22 07:20:26 UTC 2018,kafka.apache.org,192.168.14.72&#125;</span><br><span class="line">0: &#123;partition=1, offset=22, value=Sun Jul 22 07:20:28 UTC 2018,kafka.apache.org,192.168.14.68&#125;</span><br><span class="line">1: &#123;partition=2, offset=27, value=Sun Jul 22 07:20:31 UTC 2018,kafka.apache.org,192.168.14.172&#125;</span><br><span class="line">2: &#123;partition=3, offset=27, value=Sun Jul 22 07:20:33 UTC 2018,kafka.apache.org,192.168.14.45&#125;</span><br><span class="line">0: &#123;partition=1, offset=23, value=Sun Jul 22 07:20:35 UTC 2018,kafka.apache.org,192.168.14.87&#125;</span><br><span class="line">2: &#123;partition=3, offset=28, value=Sun Jul 22 07:20:37 UTC 2018,kafka.apache.org,192.168.14.160&#125;</span><br><span class="line">2: &#123;partition=3, offset=29, value=Sun Jul 22 07:20:39 UTC 2018,kafka.apache.org,192.168.14.54&#125;</span><br></pre></td></tr></table></figure>
<p>每一行开头的序号代表的是消费者的序号，很明显0号消费者消费了0和1分片，1号消费者消费2号分片，2号消费者消费3号分片</p>
<p>接下来试下加大消费者等于分片数即4个消费者看看</p>
<p>输出<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">0: &#123;partition=0, offset=66, value=Sun Jul 22 07:27:06 UTC 2018,kafka.apache.org,192.168.14.99&#125;</span><br><span class="line">3: &#123;partition=3, offset=90, value=Sun Jul 22 07:27:08 UTC 2018,kafka.apache.org,192.168.14.222&#125;</span><br><span class="line">0: &#123;partition=0, offset=67, value=Sun Jul 22 07:27:10 UTC 2018,kafka.apache.org,192.168.14.106&#125;</span><br><span class="line">2: &#123;partition=2, offset=70, value=Sun Jul 22 07:27:12 UTC 2018,kafka.apache.org,192.168.14.175&#125;</span><br><span class="line">0: &#123;partition=0, offset=68, value=Sun Jul 22 07:27:14 UTC 2018,kafka.apache.org,192.168.14.163&#125;</span><br><span class="line">1: &#123;partition=1, offset=70, value=Sun Jul 22 07:27:16 UTC 2018,kafka.apache.org,192.168.14.176&#125;</span><br><span class="line">3: &#123;partition=3, offset=91, value=Sun Jul 22 07:27:18 UTC 2018,kafka.apache.org,192.168.14.228&#125;</span><br><span class="line">2: &#123;partition=2, offset=71, value=Sun Jul 22 07:27:20 UTC 2018,kafka.apache.org,192.168.14.55&#125;</span><br><span class="line">1: &#123;partition=1, offset=71, value=Sun Jul 22 07:27:22 UTC 2018,kafka.apache.org,192.168.14.40&#125;</span><br><span class="line">1: &#123;partition=1, offset=72, value=Sun Jul 22 07:27:24 UTC 2018,kafka.apache.org,192.168.14.135&#125;</span><br><span class="line">0: &#123;partition=0, offset=69, value=Sun Jul 22 07:27:26 UTC 2018,kafka.apache.org,192.168.14.249&#125;</span><br></pre></td></tr></table></figure></p>
<p>很明显，每个消费者跟每个分片是一一对应的。</p>
<p>再看看消费者多余分片的情况,这次把消费者加大到6个</p>
<p>输出</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">2: &#123;partition=2, offset=90, value=Sun Jul 22 07:29:44 UTC 2018,kafka.apache.org,192.168.14.148&#125;</span><br><span class="line">0: &#123;partition=0, offset=87, value=Sun Jul 22 07:29:46 UTC 2018,kafka.apache.org,192.168.14.18&#125;</span><br><span class="line">1: &#123;partition=1, offset=86, value=Sun Jul 22 07:29:48 UTC 2018,kafka.apache.org,192.168.14.77&#125;</span><br><span class="line">0: &#123;partition=0, offset=88, value=Sun Jul 22 07:29:50 UTC 2018,kafka.apache.org,192.168.14.21&#125;</span><br><span class="line">2: &#123;partition=2, offset=91, value=Sun Jul 22 07:29:52 UTC 2018,kafka.apache.org,192.168.14.116&#125;</span><br><span class="line">2: &#123;partition=2, offset=92, value=Sun Jul 22 07:29:54 UTC 2018,kafka.apache.org,192.168.14.92&#125;</span><br><span class="line">0: &#123;partition=0, offset=89, value=Sun Jul 22 07:29:56 UTC 2018,kafka.apache.org,192.168.14.241&#125;</span><br><span class="line">1: &#123;partition=1, offset=87, value=Sun Jul 22 07:29:58 UTC 2018,kafka.apache.org,192.168.14.207&#125;</span><br><span class="line">3: &#123;partition=3, offset=112, value=Sun Jul 22 07:30:00 UTC 2018,kafka.apache.org,192.168.14.100&#125;</span><br><span class="line">1: &#123;partition=1, offset=88, value=Sun Jul 22 07:30:02 UTC 2018,kafka.apache.org,192.168.14.77&#125;</span><br><span class="line">1: &#123;partition=1, offset=89, value=Sun Jul 22 07:30:04 UTC 2018,kafka.apache.org,192.168.14.141&#125;</span><br><span class="line">3: &#123;partition=3, offset=113, value=Sun Jul 22 07:30:06 UTC 2018,kafka.apache.org,192.168.14.36&#125;</span><br><span class="line">2: &#123;partition=2, offset=93, value=Sun Jul 22 07:30:08 UTC 2018,kafka.apache.org,192.168.14.216&#125;</span><br><span class="line">3: &#123;partition=3, offset=114, value=Sun Jul 22 07:30:10 UTC 2018,kafka.apache.org,192.168.14.205&#125;</span><br><span class="line">2: &#123;partition=2, offset=94, value=Sun Jul 22 07:30:12 UTC 2018,kafka.apache.org,192.168.14.238&#125;</span><br><span class="line">3: &#123;partition=3, offset=115, value=Sun Jul 22 07:30:14 UTC 2018,kafka.apache.org,192.168.14.118&#125;</span><br><span class="line">2: &#123;partition=2, offset=95, value=Sun Jul 22 07:30:16 UTC 2018,kafka.apache.org,192.168.14.97&#125;</span><br><span class="line">0: &#123;partition=0, offset=90, value=Sun Jul 22 07:30:18 UTC 2018,kafka.apache.org,192.168.14.169&#125;</span><br><span class="line">2: &#123;partition=2, offset=96, value=Sun Jul 22 07:30:20 UTC 2018,kafka.apache.org,192.168.14.226&#125;</span><br><span class="line">3: &#123;partition=3, offset=116, value=Sun Jul 22 07:30:22 UTC 2018,kafka.apache.org,192.168.14.34&#125;</span><br><span class="line">3: &#123;partition=3, offset=117, value=Sun Jul 22 07:30:24 UTC 2018,kafka.apache.org,192.168.14.184&#125;</span><br><span class="line">1: &#123;partition=1, offset=90, value=Sun Jul 22 07:30:26 UTC 2018,kafka.apache.org,192.168.14.207&#125;</span><br><span class="line">2: &#123;partition=2, offset=97, value=Sun Jul 22 07:30:28 UTC 2018,kafka.apache.org,192.168.14.121&#125;</span><br></pre></td></tr></table></figure>
<p>显然，只是看到四个消费者消费四个分片，其余消费者没有参与到消费中去。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>kafka是一个高可用高吞吐的分布式消息组件，多分片可以提供多消费者多产生者的吞吐，多个分组可以满足多个应用对同一个消息队列的使用要求而互不干扰，同一分组消费者还能基本保证消息只消费一次。</p>
<p>参考 <a href="https://zhuanlan.zhihu.com/p/38269875" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38269875</a></p>
<p>使用的实例可到这个<a href="https://github.com/ejunjsh/java-code" target="_blank" rel="noopener">链接</a>获取，还提供<code>docker</code>运行环境哦 </p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;玩了很久的kafka，现在总结下吧，当然通过别人的文章来总结还是事半功倍的👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;架构图&quot;&gt;&lt;a href=&quot;#架构图&quot; class=&quot;headerlink&quot; title=&quot;架构图&quot;&gt;&lt;/a&gt;架构图&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://idiotsky.top/images3/kafka-1.jpg&quot;&gt;&lt;img src=&quot;http://idiotsky.top/images3/kafka-1.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如上图，一个kafka架构包括若干个Producer（服务器日志、业务数据、web前端产生的page view等），若干个Broker（kafka支持水平扩展，一般broker数量越多集群的吞吐量越大），若干个consumer group，一个Zookeeper集群（kafka通过Zookeeper管理集群配置、选举leader、consumer group发生变化时进行rebalance）。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://idiotsky.top/categories/java/"/>
    
    
      <category term="java" scheme="http://idiotsky.top/tags/java/"/>
    
      <category term="kafka" scheme="http://idiotsky.top/tags/kafka/"/>
    
  </entry>
  
  <entry>
    <title>用javap看一下final是什么</title>
    <link href="http://idiotsky.top/2018/07/17/java-javap-final/"/>
    <id>http://idiotsky.top/2018/07/17/java-javap-final/</id>
    <published>2018-07-17T14:23:29.000Z</published>
    <updated>2018-07-22T05:12:32.952Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>一直很好奇<code>final</code>的类字段在class文件是怎么表示的，所以用javap看看怎么回事,也顺便复习下字节码指令👿</p>
</blockquote>
<h1 id="没有final修饰的类的静态字段"><a href="#没有final修饰的类的静态字段" class="headerlink" title="没有final修饰的类的静态字段"></a>没有<code>final</code>修饰的类的静态字段</h1><p>定义一个类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> String str=<span class="string">"严"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>编译查看class文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">javac test.java</span><br><span class="line">javap -verbose test.class</span><br><span class="line"></span><br><span class="line">//省略常量池</span><br><span class="line">&#123;</span><br><span class="line">  public static java.lang.String str;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: getstatic     #3                  // Field str:Ljava/lang/String;</span><br><span class="line">         6: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 5: 0</span><br><span class="line">        line 6: 9</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=0, args_size=0</span><br><span class="line">         0: ldc           #5                  // String 严</span><br><span class="line">         2: putstatic     #3                  // Field str:Ljava/lang/String;</span><br><span class="line">         5: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 2: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你会发现<code>public static String str=&quot;严&quot;;</code>直接翻译成一个静态块</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">static &#123;&#125;;</span><br><span class="line">  flags: ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=1, locals=0, args_size=0</span><br><span class="line">       0: ldc           #5                  // String 严</span><br><span class="line">       2: putstatic     #3                  // Field str:Ljava/lang/String;</span><br><span class="line">       5: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 2: 0</span><br></pre></td></tr></table></figure>
<p>上面<code>ldc</code>的指令就是把常量从常量池读到操作数栈，<code>putstatic</code>指令从栈顶赋值给类的静态字段<code>str</code>,这个字段之后在<code>main</code>函数会读出来。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public static void main(java.lang.String[]);</span><br><span class="line">  flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">  Code:</span><br><span class="line">    stack=2, locals=1, args_size=1</span><br><span class="line">       0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">       3: getstatic     #3                  // Field str:Ljava/lang/String;</span><br><span class="line">       6: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">       9: return</span><br><span class="line">    LineNumberTable:</span><br><span class="line">      line 5: 0</span><br><span class="line">      line 6: 9</span><br></pre></td></tr></table></figure>
<p><code>getstatic</code>是用来读取类的静态字段的，这里读出来放入操作数栈。</p>
<h1 id="有final修饰的类静态字段"><a href="#有final修饰的类静态字段" class="headerlink" title="有final修饰的类静态字段"></a>有<code>final</code>修饰的类静态字段</h1><p>改一下这个类，加<code>final</code>修饰下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String str=<span class="string">"严"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>编译查看class文件</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">javac test.java</span><br><span class="line">javap -verbose test.class</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 省略常量池</span></span><br><span class="line">&#123;</span><br><span class="line">  public static final java.lang.String str;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL</span><br><span class="line">    ConstantValue: String 严</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object."&lt;init&gt;":()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: ldc           #3                  // String 严</span><br><span class="line">         5: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">         8: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 5: 0</span><br><span class="line">        line 6: 8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>你会发现class文件没有之前的静态块了，而且也不再用<code>getstatic</code>指令获取字段的值，而是直接<code>ldc</code>指令取常量池的值。</p>
<p>接下来看看实例字段在加<code>final</code>或不加会不会有什么不同呢</p>
<h1 id="不加final的实例字段"><a href="#不加final的实例字段" class="headerlink" title="不加final的实例字段"></a>不加final的实例字段</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span>  String str=<span class="string">"严"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        test t=<span class="keyword">new</span> test();</span><br><span class="line">        System.out.println(t.str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//省略没用的了。。。</span><br><span class="line">&#123;</span><br><span class="line">  public java.lang.String str;</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: ldc           #2                  // String 严</span><br><span class="line">         7: putfield      #3                  // Field str:Ljava/lang/String;</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">        line 2: 4</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: new           #4                  // class test</span><br><span class="line">         3: dup</span><br><span class="line">         4: invokespecial #5                  // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         7: astore_1</span><br><span class="line">         8: getstatic     #6                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        11: aload_1</span><br><span class="line">        12: getfield      #3                  // Field str:Ljava/lang/String;</span><br><span class="line">        15: invokevirtual #7                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        18: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 5: 0</span><br><span class="line">        line 6: 8</span><br><span class="line">        line 7: 18</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数里面用<code>ldc</code>初始化了实例字段<code>str</code>的值,然后在main函数里面用<code>getfield</code>指令，获取<code>t</code>实例的<code>str</code>的值。</p>
<h1 id="加final的实例字段"><a href="#加final的实例字段" class="headerlink" title="加final的实例字段"></a>加<code>final</code>的实例字段</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">final</span> String str=<span class="string">"严"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        test t=<span class="keyword">new</span> test();</span><br><span class="line">        System.out.println(t.str);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>类文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">//省略没用的了。。。</span><br><span class="line">&#123;</span><br><span class="line">  public final java.lang.String str;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_FINAL</span><br><span class="line">    ConstantValue: String 严</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: aload_0</span><br><span class="line">         5: ldc           #2                  // String 严</span><br><span class="line">         7: putfield      #3                  // Field str:Ljava/lang/String;</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line">        line 2: 4</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=2, args_size=1</span><br><span class="line">         0: new           #4                  // class test</span><br><span class="line">         3: dup</span><br><span class="line">         4: invokespecial #5                  // Method &quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         7: astore_1</span><br><span class="line">         8: getstatic     #6                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">        11: aload_1</span><br><span class="line">        12: invokevirtual #7                  // Method java/lang/Object.getClass:()Ljava/lang/Class;</span><br><span class="line">        15: pop</span><br><span class="line">        16: ldc           #2                  // String 严</span><br><span class="line">        18: invokevirtual #8                  // Method java/io/PrintStream.println:(Ljava/lang/String;)V</span><br><span class="line">        21: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 5: 0</span><br><span class="line">        line 6: 8</span><br><span class="line">        line 7: 21</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>getfield</code>指令变成了熟悉的<code>ldc</code>,很明显了，加了<code>final</code>之后就去常量池去找，就不需要用<code>getfield</code>指令。</p>
<p>上面的字段是字符串，那接下来看看数字的字段会怎么样呢</p>
<h1 id="数字的非final静态字段"><a href="#数字的非final静态字段" class="headerlink" title="数字的非final静态字段"></a>数字的非<code>final</code>静态字段</h1><p>上代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> i=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>javap结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">//省略常量池</span><br><span class="line">&#123;</span><br><span class="line">  public static int i;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: getstatic     #3                  // Field i:I</span><br><span class="line">         6: invokevirtual #4                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 6: 0</span><br><span class="line">        line 7: 9</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=0, args_size=0</span><br><span class="line">         0: bipush        100</span><br><span class="line">         2: putstatic     #3                  // Field i:I</span><br><span class="line">         5: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>基本差不多，只是<code>ldc</code>换成了<code>bipush</code>。<code>bipush</code>就是把后面的操作数（100）压入栈。如果压入的不是100，而是更大或更小，那么用的指令就会不同的了，例如<code>iconst_1</code>指令，就是压入1到栈。至于main函数里面，还是用<code>getstatic</code>指令获取字段的值。</p>
<h1 id="数字的final静态字段"><a href="#数字的final静态字段" class="headerlink" title="数字的final静态字段"></a>数字的<code>final</code>静态字段</h1><p>上代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> i=<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>javap结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  public static final int i;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL</span><br><span class="line">    ConstantValue: int 100</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: bipush        100</span><br><span class="line">         5: invokevirtual #3                  // Method java/io/PrintStream.println:(I)V</span><br><span class="line">         8: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 6: 0</span><br><span class="line">        line 7: 8</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>没啥惊喜的，就是静态块去掉，需要获取字段的值的地方从<code>getstatic</code>变成了<code>bipush</code>。</p>
<p>至于实例字段是怎么样的，应该都差不多了，就不列举了，接下来看看字段类型是引用的是怎么样呢。</p>
<h1 id="加final的引用类型字段"><a href="#加final的引用类型字段" class="headerlink" title="加final的引用类型字段"></a>加<code>final</code>的引用类型字段</h1><p>上代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Object o=<span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(o);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>javap结果</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  public static final java.lang.Object o;</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC, ACC_FINAL</span><br><span class="line"></span><br><span class="line">  public test();</span><br><span class="line">    flags: ACC_PUBLIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=1, locals=1, args_size=1</span><br><span class="line">         0: aload_0</span><br><span class="line">         1: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         4: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 1: 0</span><br><span class="line"></span><br><span class="line">  public static void main(java.lang.String[]);</span><br><span class="line">    flags: ACC_PUBLIC, ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=1, args_size=1</span><br><span class="line">         0: getstatic     #2                  // Field java/lang/System.out:Ljava/io/PrintStream;</span><br><span class="line">         3: getstatic     #3                  // Field o:Ljava/lang/Object;</span><br><span class="line">         6: invokevirtual #4                  // Method java/io/PrintStream.println:(Ljava/lang/Object;)V</span><br><span class="line">         9: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 6: 0</span><br><span class="line">        line 7: 9</span><br><span class="line"></span><br><span class="line">  static &#123;&#125;;</span><br><span class="line">    flags: ACC_STATIC</span><br><span class="line">    Code:</span><br><span class="line">      stack=2, locals=0, args_size=0</span><br><span class="line">         0: new           #5                  // class java/lang/Object</span><br><span class="line">         3: dup</span><br><span class="line">         4: invokespecial #1                  // Method java/lang/Object.&quot;&lt;init&gt;&quot;:()V</span><br><span class="line">         7: putstatic     #3                  // Field o:Ljava/lang/Object;</span><br><span class="line">        10: return</span><br><span class="line">      LineNumberTable:</span><br><span class="line">        line 3: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里直接上<code>final</code>的版本，是因为加不加<code>final</code>，其实都是一样的，都是有静态块，引用的时候不再有什么其他指令了，老老实实的用<code>getstatic</code>。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>对于字符串或者数字类型，他们都是属于字面量，编译时已经知道，他们要么存在常量池里面，要么存在指令的操作数里面，所以加<code>final</code>标识的情况下，获取值时不用再到关联的对象底下去获取了，因为<code>final</code>就是不变，直接调用相关指令去常量池，或者直接操作数取就好。</p>
<p>对于引用类型，这个基本要到运行时才能确认他们的引用地址，所以加不加<code>final</code>都是一样。</p>
<p>看来字节码才是最能确定java是怎么运行的，所以与其找网上的说法不如<code>javap</code>一下看看。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;一直很好奇&lt;code&gt;final&lt;/code&gt;的类字段在class文件是怎么表示的，所以用javap看看怎么回事,也顺便复习下字节码指令👿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;没有final修饰的类的静态字段&quot;&gt;&lt;a href=&quot;#没有final修饰的类的静态字段&quot; class=&quot;headerlink&quot; title=&quot;没有final修饰的类的静态字段&quot;&gt;&lt;/a&gt;没有&lt;code&gt;final&lt;/code&gt;修饰的类的静态字段&lt;/h1&gt;&lt;p&gt;定义一个类&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; String str=&lt;span class=&quot;string&quot;&gt;&quot;严&quot;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String[] args)&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        System.out.println(str);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="java" scheme="http://idiotsky.top/categories/java/"/>
    
    
      <category term="java" scheme="http://idiotsky.top/tags/java/"/>
    
      <category term="javap" scheme="http://idiotsky.top/tags/javap/"/>
    
  </entry>
  
  <entry>
    <title>分布式事务概述</title>
    <link href="http://idiotsky.top/2018/06/27/distributed-transaction/"/>
    <id>http://idiotsky.top/2018/06/27/distributed-transaction/</id>
    <published>2018-06-27T12:53:24.000Z</published>
    <updated>2018-07-26T01:29:54.426Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>👿mark之</p>
</blockquote>
<p>分布式事务是企业集成中的一个技术难点，也是每一个分布式系统架构中都会涉及到的一个东西，特别是在这几年越来越火的微服务架构中，几乎可以说是无法避免，本文就围绕分布式事务各方面与大家进行介绍。</p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><h2 id="什么是事务"><a href="#什么是事务" class="headerlink" title="什么是事务"></a>什么是事务</h2><p>数据库事务（简称：事务，Transaction）是指数据库执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。</p>
<p>事务拥有以下四个特性，习惯上被称为ACID特性：</p>
<ol>
<li>原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。</li>
<li>一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态是指数据库中的数据应满足完整性约束。除此之外，一致性还有另外一层语义，就是事务的中间状态不能被观察到（这层语义也有说应该属于原子性）。</li>
<li>隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行，如同只有这一个操作在被数据库所执行一样。</li>
<li>持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。在事务结束时，此操作将不可逆转。</li>
</ol>
<a id="more"></a>
<h2 id="本地事务"><a href="#本地事务" class="headerlink" title="本地事务"></a>本地事务</h2><p>起初，事务仅限于对单一数据库资源的访问控制：</p>
<p><a href="http://idiotsky.top/images3/dt-1.jpg"><img src="http://idiotsky.top/images3/dt-1.jpg" alt=""></a></p>
<p>架构服务化以后，事务的概念延伸到了服务中。倘若将一个单一的服务操作作为一个事务，那么整个服务操作只能涉及一个单一的数据库资源：</p>
<p><a href="http://idiotsky.top/images3/dt-2.jpg"><img src="http://idiotsky.top/images3/dt-2.jpg" alt=""></a></p>
<p>这类基于单个服务单一数据库资源访问的事务，被称为本地事务（Local Transaction）。</p>
<h1 id="分布式事务应用架构"><a href="#分布式事务应用架构" class="headerlink" title="分布式事务应用架构"></a>分布式事务应用架构</h1><p>本地事务主要限制在单个会话内，不涉及多个数据库资源。但是在基于SOA（Service-Oriented Architecture，面向服务架构）的分布式应用环境下，越来越多的应用要求对多个数据库资源，多个服务的访问都能纳入到同一个事务当中，分布式事务应运而生。</p>
<p>最早的分布式事务应用架构很简单，不涉及服务间的访问调用，仅仅是服务内操作涉及到对多个数据库资源的访问。</p>
<p><a href="http://idiotsky.top/images3/dt-3.jpg"><img src="http://idiotsky.top/images3/dt-3.jpg" alt=""></a></p>
<p>当一个服务操作访问不同的数据库资源，又希望对它们的访问具有事务特性时，就需要采用分布式事务来协调所有的事务参与者。</p>
<p>对于上面介绍的分布式事务应用架构，尽管一个服务操作会访问多个数据库资源，但是毕竟整个事务还是控制在单一服务的内部。如果一个服务操作需要调用另外一个服务，这时的事务就需要跨越多个服务了。在这种情况下，起始于某个服务的事务在调用另外一个服务的时候，需要以某种机制流转到另外一个服务，从而使被调用的服务访问的资源也自动加入到该事务当中来。下图反映了这样一个跨越多个服务的分布式事务：</p>
<p><a href="http://idiotsky.top/images3/dt-4.jpg"><img src="http://idiotsky.top/images3/dt-4.jpg" alt=""></a></p>
<p>如果将上面这两种场景（一个服务可以调用多个数据库资源，也可以调用其他服务）结合在一起，对此进行延伸，整个分布式事务的参与者将会组成如下图所示的树形拓扑结构。在一个跨服务的分布式事务中，事务的发起者和提交均系同一个，它可以是整个调用的客户端，也可以是客户端最先调用的那个服务。</p>
<p><a href="http://idiotsky.top/images3/dt-5.jpg"><img src="http://idiotsky.top/images3/dt-5.jpg" alt=""></a></p>
<p>较之基于单一数据库资源访问的本地事务，分布式事务的应用架构更为复杂。在不同的分布式应用架构下，实现一个分布式事务要考虑的问题并不完全一样，比如对多资源的协调、事务的跨服务传播等，实现机制也是复杂多变。尽管有这么多工程细节需要考虑，但分布式事务最核心的还是其 ACID 特性。因此，想要了解一个分布式事务，就先从了解它是怎么实现事务 ACID 特性开始。</p>
<p>下文将从两个最常见的分布式事务模型入手，着重分析分布式事务的基础共通点，即如何保证分布式事务的 ACID 特性。</p>
<h1 id="常见分布式事务模型-ACID-实现分析"><a href="#常见分布式事务模型-ACID-实现分析" class="headerlink" title="常见分布式事务模型 ACID 实现分析"></a>常见分布式事务模型 ACID 实现分析</h1><h2 id="X-Open-XA-协议"><a href="#X-Open-XA-协议" class="headerlink" title="X/Open XA 协议"></a>X/Open XA 协议</h2><p>最早的分布式事务模型是 X/Open 国际联盟提出的 X/Open Distributed Transaction Processing（DTP）模型，也就是大家常说的 X/Open XA 协议，简称XA 协议。</p>
<p><a href="http://idiotsky.top/images3/dt-6.jpg"><img src="http://idiotsky.top/images3/dt-6.jpg" alt=""></a></p>
<p>DTP 模型中包含一个全局事务管理器（TM，Transaction Manager）和多个资源管理器（RM，Resource Manager）。全局事务管理器负责管理全局事务状态与参与的资源，协同资源一起提交或回滚；资源管理器则负责具体的资源操作。</p>
<p>XA 协议描述了 TM 与 RM 之间的接口，允许多个资源在同一分布式事务中访问。</p>
<p>基于 DTP 模型的分布式事务流程大致如下：</p>
<p><a href="http://idiotsky.top/images3/dt-7.jpg"><img src="http://idiotsky.top/images3/dt-7.jpg" alt=""></a></p>
<ol>
<li>应用程序（AP，Application）向 TM 申请开始一个全局事务。</li>
<li>针对要操作的 RM，AP 会先向 TM 注册（TM 负责记录 AP 操作过哪些 RM，即分支事务），TM 通过 XA 接口函数通知相应 RM 开启分布式事务的子事务，接着 AP 就可以对该 RM 管理的资源进行操作。</li>
<li>当 AP 对所有 RM 操作完毕后，AP 根据执行情况通知 TM 提交或回滚该全局事务，TM 通过 XA 接口函数通知各 RM 完成操作。TM 会先要求各个 RM 做预提交，所有 RM 返回成功后，再要求各 RM 做正式提交，XA 协议要求，一旦 RM 预提交成功，则后续的正式提交也必须能成功；如果任意一个 RM 预提交失败，则 TM 通知各 RM 回滚。</li>
<li>所有 RM 提交或回滚完成后，全局事务结束。</li>
</ol>
<h3 id="原子性"><a href="#原子性" class="headerlink" title="原子性"></a>原子性</h3><p>XA 协议使用 2PC（Two Phase Commit，两阶段提交）原子提交协议来保证分布式事务原子性。</p>
<p>两阶段提交是指将提交过程分为两个阶段，即准备阶段（投票阶段）和提交阶段（执行阶段）：</p>
<p><a href="http://idiotsky.top/images3/dt-8.jpg"><img src="http://idiotsky.top/images3/dt-8.jpg" alt=""></a></p>
<p>准备阶段：</p>
<p>TM 向每个 RM 发送准备消息。如果 RM 的本地事务操作执行成功，则返回成功；如果 RM 的本地事务操作执行失败，则返回失败。</p>
<p>提交阶段</p>
<p>如果 TM 收到了所有 RM 回复的成功消息，则向每个 RM 发送提交消息；否则发送回滚消息；RM 根据 TM 的指令执行提交或者回滚本地事务操作，释放所有事务处理过程中使用的锁资源。</p>
<h3 id="隔离性"><a href="#隔离性" class="headerlink" title="隔离性"></a>隔离性</h3><p>XA 协议中没有描述如何实现分布式事务的隔离性，但是 XA 协议要求DTP 模型中的每个 RM 都要实现本地事务，也就是说，基于 XA 协议实现的分布式事务的隔离性是由每个 RM 本地事务的隔离性来保证的，当一个分布式事务的所有子事务都是隔离的，那么这个分布式事务天然的就实现了隔离性。</p>
<p>以 MySQL 来举例，MySQL 使用 2PL（Two-Phase Locking，两阶段锁）机制来控制本地事务的并发，保证隔离性。2PL 与 2PC 类似，也是将锁操作分为加锁和解锁两个阶段，并且保证两个阶段完全不相交。加锁阶段，只加锁，不放锁。解锁阶段，只放锁，不加锁。</p>
<p><a href="http://idiotsky.top/images3/dt-9.jpg"><img src="http://idiotsky.top/images3/dt-9.jpg" alt=""></a></p>
<p>如上图所示，在一个本地事务中，每执行一条更新操作之前，都会先获取对应的锁资源，只有获取锁资源成功才会执行该操作，并且一旦获取了锁资源就会持有该锁资源直到本事务执行结束。</p>
<p>MySQL 通过这种 2PL 机制，可以保证在本地事务执行过程中，其他并发事务不能操作相同资源，从而实现了事务隔离。</p>
<h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><p>前面提到一致性有两层语义，一层是确保事务执行结束后，数据库从一个一致状态转变为另一个一致状态。另一层语义是事务执行过程中的中间状态不能被观察到。</p>
<p>前一层语义的实现很简单，通过原子性、隔离性以及 RM 自身一致性的实现就可以保证。至于后一层语义，我们先来看看单个 RM 上的本地事务是怎么实现的。还是以 MySQL 举例，MySQL 通过 MVCC（Multi Version Concurrency Control，多版本并发控制）机制，为每个一致性状态生成快照（Snapshot），每个事务看到的都是各Snapshot对应的一致性状态，从而也就保证了本地事务的中间状态不会被观察到。</p>
<p>虽然单个 RM 上实现了Snapshot，但是在分布式应用架构下，会遇到什么问题呢？</p>
<p><a href="http://idiotsky.top/images3/dt-10.jpg"><img src="http://idiotsky.top/images3/dt-10.jpg" alt=""></a></p>
<p>如上图所示，在 RM1 的本地子事务提交完毕到 RM2 的本地子事务提交完毕之间，只能读到 RM1 上子事务执行的内容，读不到 RM2 上的子事务。也就是说，虽然在单个 RM 上的本地事务是一致的，但是从全局来看，一个全局事务执行过程的中间状态被观察到了，全局一致性就被破坏了。</p>
<p>XA 协议并没有定义怎么实现全局的 Snapshot，像 MySQL 官方文档里就建议使用串行化的隔离级别来保证分布式事务一致性： “As with nondistributed transactions, SERIALIZABLE may be preferred if your applications are sensitive to read phenomena. REPEATABLE READ may not be sufficient for distributed transactions.”（对于分布式事务来说，可重复读隔离级别不足以保证事务一致性，如果你的程序有全局一致性读要求，可以考虑串行化隔离级别.）</p>
<p>当然，由于串行化隔离级别的性能较差，所以很多分布式数据库都自己实现了分布式 MVCC 机制来提供全局的一致性读。一个基本思路是用一个集中式或者逻辑上单调递增的东西来控制生成全局 Snapshot，每个事务或者每条 SQL 执行时都去获取一次，从而实现不同隔离级别下的一致性。比如 Google 的 Spanner 就是用 TrueTime 来控制访问全局 Snapshot。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>XA 协议通常实现在数据库资源层，直接作用于资源管理器上。因此，基于 XA 协议实现的分布式事务产品，无论是分布式数据库，还是分布式事务框架，对业务几乎都没有侵入，就像使用普通数据库一样。</p>
<p>XA 协议严格保障事务 ACID 特性，能够满足所有业务领域的功能需求，但是，这同样是一把双刃剑。</p>
<p>由于隔离性的互斥要求，在事务执行过程中，所有的资源都被锁定，只适用于执行时间确定的短事务。同时，整个事务期间都是独占数据，对于热点数据的并发性能可能会很低，实现了分布式 MVCC 或乐观锁（optimistic locking）以后，性能可能会有所提升。</p>
<p>同时，为了保障一致性，要求所有 RM 同等可信、可靠，要求故障恢复机制可靠、快速，在网络故障隔离的情况下，服务基本不可用。</p>
<h2 id="TCC-模型"><a href="#TCC-模型" class="headerlink" title="TCC 模型"></a>TCC 模型</h2><p>TCC（Try-Confirm-Cancel）分布式事务模型相对于 XA 等传统模型，其特征在于它不依赖资源管理器（RM）对分布式事务的支持，而是通过对业务逻辑的分解来实现分布式事务。</p>
<p>TCC 模型认为对于业务系统中一个特定的业务逻辑，其对外提供服务时，必须接受一些不确定性，即对业务逻辑初步操作的调用仅是一个临时性操作，调用它的主业务服务保留了后续的取消权。如果主业务服务认为全局事务应该回滚，它会要求取消之前的临时性操作，这就对应从业务服务的取消操作。而当主业务服务认为全局事务应该提交时，它会放弃之前临时性操作的取消权，这对应从业务服务的确认操作。每一个初步操作，最终都会被确认或取消。</p>
<p>因此，针对一个具体的业务服务，TCC 分布式事务模型需要业务系统提供三段业务逻辑：</p>
<ol>
<li>初步操作 Try：完成所有业务检查，预留必须的业务资源。</li>
<li>确认操作 Confirm：真正执行的业务逻辑，不作任何业务检查，只使用 Try 阶段预留的业务资源。因此，只要 Try 操作成功，Confirm 必须能成功。另外，Confirm 操作需满足幂等性，保证一笔分布式事务有且只能成功一次。</li>
<li>取消操作 Cancel：释放 Try 阶段预留的业务资源。同样的，Cancel 操作也需要满足幂等性。</li>
</ol>
<p><a href="http://idiotsky.top/images3/dt-11.jpg"><img src="http://idiotsky.top/images3/dt-11.jpg" alt=""></a></p>
<p>TCC 分布式事务模型包括三部分：</p>
<ol>
<li>主业务服务：主业务服务为整个业务活动的发起方，服务的编排者，负责发起并完成整个业务活动。</li>
<li>从业务服务：从业务服务是整个业务活动的参与方，负责提供 TCC 业务操作，实现初步操作（Try）、确认操作（Confirm）、取消操作（Cancel）三个接口，供主业务服务调用。</li>
<li>业务活动管理器：业务活动管理器管理控制整个业务活动，包括记录维护 TCC 全局事务的事务状态和每个从业务服务的子事务状态，并在业务活动提交时调用所有从业务服务的 Confirm 操作，在业务活动取消时调用所有从业务服务的 Cancel 操作。</li>
</ol>
<p>一个完整的 TCC 分布式事务流程如下：</p>
<ol>
<li>主业务服务首先开启本地事务；</li>
<li>主业务服务向业务活动管理器申请启动分布式事务主业务活动；</li>
<li>然后针对要调用的从业务服务，主业务活动先向业务活动管理器注册从业务活动，然后调用从业务服务的 Try 接口；</li>
<li>当所有从业务服务的 Try 接口调用成功，主业务服务提交本地事务；若调用失败，主业务服务回滚本地事务；</li>
<li>若主业务服务提交本地事务，则 TCC 模型分别调用所有从业务服务的 Confirm 接口；若主业务服务回滚本地事务，则分别调用 Cancel 接口；</li>
<li>所有从业务服务的 Confirm 或 Cancel 操作完成后，全局事务结束。</li>
</ol>
<h3 id="原子性-1"><a href="#原子性-1" class="headerlink" title="原子性"></a>原子性</h3><p>TCC 模型也使用 2PC 原子提交协议来保证事务原子性。Try 操作对应2PC 的一阶段准备（Prepare）；Confirm 对应 2PC 的二阶段提交（Commit），Cancel 对应 2PC 的二阶段回滚（Rollback），可以说 TCC 就是应用层的 2PC。</p>
<h3 id="隔离性-1"><a href="#隔离性-1" class="headerlink" title="隔离性"></a>隔离性</h3><p>TCC 分布式事务模型仅提供两阶段原子提交协议，保证分布式事务原子性。事务的隔离交给业务逻辑来实现。</p>
<p>隔离的本质是控制并发，防止并发事务操作相同资源而引起的结果错乱。</p>
<p>举个例子，比如金融行业里管理用户资金，当用户发起交易时，一般会先检查用户资金，如果资金充足，则扣除相应交易金额，增加卖家资金，完成交易。如果没有事务隔离，用户同时发起两笔交易，两笔交易的检查都认为资金充足，实际上却只够支付一笔交易，结果两笔交易都支付成功，导致资损。</p>
<p>可以发现，并发控制是业务逻辑执行正确的保证，但是像两阶段锁这样的并发访问控制技术要求一直持有数据库资源锁直到整个事务执行结束，特别是在分布式事务架构下，要求持有锁到分布式事务第二阶段执行结束，也就是说，分布式事务会加长资源锁的持有时间，导致并发性能进一步下降。</p>
<p>因此，TCC 模型的隔离性思想就是通过业务的改造，在第一阶段结束之后，从底层数据库资源层面的加锁过渡为上层业务层面的加锁，从而释放底层数据库锁资源，放宽分布式事务锁协议，提高业务并发性能。</p>
<p>还是以上面的例子举例：</p>
<ol>
<li>第一阶段：检查用户资金，如果资金充足，冻结用户本次交易资金，这笔资金被业务隔离，不允许除本事务之外的其它并发事务动用。</li>
<li>第二阶段：扣除第一阶段预冻结的用户资金，增加卖家资金，完成交易。 采用业务加锁的方式，隔离用户冻结资金，在第一阶段结束后直接释放底层资源锁，该用户和卖家的其他交易都可以立刻并发执行，而不用等到整个分布式事务结束，可以获得更高的并发交易能力。</li>
</ol>
<h3 id="一致性-1"><a href="#一致性-1" class="headerlink" title="一致性"></a>一致性</h3><p>再来看看 TCC 分布式事务模型下的一致性实现。与 XA 协议实现一致性第一层语义类似，通过原子性保证事务的原子提交、业务隔离性控制事务的并发访问，实现分布式事务的一致性状态转变。</p>
<p>至于第二层语义：事务的中间状态不能被观察到。我们来看看，在 SOA分布式应用环境下是否是必须的。</p>
<p>还是以账务服务举例。转账业务（用户 A  用户 B），由交易服务和账务服务组成分布式事务，交易服务作为主业务服务，账务服务作为从业务服务，账务服务的 Try 操作预冻结用户 A 的资金；Commit 操作扣除用户 A 的预冻结资金，增加用户 B 的可用资金；Cancel 操作解冻用户 A 的预冻结资金。</p>
<p>当账务服务执行完 Try 阶段后，交易主业务就可以 Commit 了，然后由TCC 框架调用账务的 Commit 阶段。在账务 Commit 阶段还没执行结束的时候，用户 A 可以查询到自己的余额已扣除，但是，此时用户 B 的可用资金还没增加。</p>
<p>从系统的角度来看，确实有问题与不确定性。在第一阶段执行结束到第二阶段执行结束之间，有一段时间的延时，在这段时间内，看似任何用户都不享有这笔资产。</p>
<p>但是，从用户的角度来考虑这个问题的话，这个时间间隔可能就无所谓或者根本就不存在。特别是当这个时间间隔仅仅是几秒钟，对于具体沟通资产转移的用户来讲，这个过程是隐蔽的或确实可以接受的，且保证了结果的最终一致性。</p>
<p>当然，对于这样的系统，如果确实需要查看系统的某个一致性状态，可以采用额外的方法实现。</p>
<p>一般来讲，服务之间的一致性比服务内部的一致性要更加容易弱化，这也是为什么 XA 等直接在资源层面上实现通用分布式事务的模型会注重一致性的保证，而当上升到服务层面，服务与服务之间已经实现了功能的划分，逻辑的解耦，也就更容易弱化一致性，这就是 SOA 架构下 BASE 理论的最终一致性思想。</p>
<p>BASE 理论是指 BA（Basic Availability，基本业务可用性）；S（Soft state，柔性状态）；E（Eventual consistency，最终一致性）。该理论认为为了可用性、性能与降级服务的需要，可以适当降低一点一致性的要求，即“基本可用，最终一致”。</p>
<p>业内通常把严格遵循 ACID 的事务称为刚性事务；而基于 BASE 思想实现的事务称为柔性事务。柔性事务并不是完全放弃了 ACID，仅仅是放宽了一致性要求：事务完成后的一致性严格遵循，事务中的一致性可适当放宽；</p>
<h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><p>TCC 分布式事务模型的业务实现特性决定了其可以跨 DB、跨服务实现资源管理，将对不同的 DB 访问、不同的业务操作通过 TCC 模型协调为一个原子操作，解决了分布式应用架构场景下的事务问题。</p>
<p>TCC 模型通过 2PC 原子提交协议保证分布式事务的的原子性，把资源层的隔离性上升到业务层，交给业务逻辑来实现。TCC 的每个操作对于资源层来说，就是单个本地事务的使用，操作结束则本地事务结束，规避了资源层在 2PC 和 2PL 下对资源占用导致的性能低下问题。</p>
<p>同时，TCC 模型也可以根据业务需要，做一些定制化的功能，比如交易异步化实现削峰填谷等。</p>
<p>但是，业务接入 TCC 模型需要拆分业务逻辑成两个阶段，并实现 Try、Confirm、Cancel 三个接口，定制化程度高，开发成本高。</p>
<h1 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h1><h2 id="本地消息表（异步确保）"><a href="#本地消息表（异步确保）" class="headerlink" title="本地消息表（异步确保）"></a>本地消息表（异步确保）</h2><p>本地消息表这种实现方式应该是业界使用最多的，其核心思想是将分布式事务拆分成本地事务进行处理，这种思路是来源于ebay。我们可以从下面的流程图中看出其中的一些细节：</p>
<p><a href="http://idiotsky.top/images3/dt-12.png"><img src="http://idiotsky.top/images3/dt-12.png" alt=""></a></p>
<p>基本思路就是：</p>
<p>消息生产方，需要额外建一个消息表，并记录消息发送状态。消息表和业务数据要在一个事务里提交，也就是说他们要在一个数据库里面。然后消息会经过MQ发送到消息的消费方。如果消息发送失败，会进行重试发送。</p>
<p>消息消费方，需要处理这个消息，并完成自己的业务逻辑。此时如果本地事务处理成功，表明已经处理成功了，如果处理失败，那么就会重试执行。如果是业务上面的失败，可以给生产方发送一个业务补偿消息，通知生产方进行回滚等操作。</p>
<p>生产方和消费方定时扫描本地消息表，把还没处理完成的消息或者失败的消息再发送一遍。如果有靠谱的自动对账补账逻辑，这种方案还是非常实用的。</p>
<p>这种方案遵循BASE理论，采用的是最终一致性，笔者认为是这几种方案里面比较适合实际业务场景的，即不会出现像2PC那样复杂的实现(当调用链很长的时候，2PC的可用性是非常低的)，也不会像TCC那样可能出现确认或者回滚不了的情况。</p>
<ul>
<li>优点： 一种非常经典的实现，避免了分布式事务，实现了最终一致性。</li>
<li>缺点： 消息表会耦合到业务系统中，如果没有封装好的解决方案，会有很多杂活需要处理。</li>
</ul>
<h2 id="MQ-事务消息"><a href="#MQ-事务消息" class="headerlink" title="MQ 事务消息"></a>MQ 事务消息</h2><p>有一些第三方的MQ是支持事务消息的，比如RocketMQ，他们支持事务消息的方式也是类似于采用的二阶段提交，但是市面上一些主流的MQ都是不支持事务消息的，比如 RabbitMQ 和 Kafka 都不支持。</p>
<p>以阿里的 RocketMQ 中间件为例，其思路大致为：</p>
<p>第一阶段Prepared消息，会拿到消息的地址。<br>第二阶段执行本地事务，第三阶段通过第一阶段拿到的地址去访问消息，并修改状态。</p>
<p>也就是说在业务方法内要向消息队列提交两次请求，一次发送消息和一次确认消息。如果确认消息发送失败了RocketMQ会定期扫描消息集群中的事务消息，这时候发现了Prepared消息，它会向消息发送者确认，所以生产方需要实现一个check接口，RocketMQ会根据发送端设置的策略来决定是回滚还是继续发送确认消息。这样就保证了消息发送与本地事务同时成功或同时失败。</p>
<p><a href="http://idiotsky.top/images3/dt-13.png"><img src="http://idiotsky.top/images3/dt-13.png" alt=""></a></p>
<ul>
<li>优点： 实现了最终一致性，不需要依赖本地数据库事务。</li>
<li>缺点： 实现难度大，主流MQ不支持，RocketMQ事务消息部分代码也未开源。</li>
</ul>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本文首先介绍了典型的分布式事务的架构场景。分布式事务刚开始是为解决单服务多数据库资源的场景而诞生的。随着技术的发展，特别是 SOA 分布式应用架构以及微服务时代的到来，服务变成了基本业务单元。因此，又产生了跨服务的分布式事务需求。然后从 XA 和 TCC 两种常用的分布式事务模型入手，介绍了其实现机制，着重分析了各模型是如何实现分布式事务 ACID 特性的。还讲解了现实中常用的两种分布式事务的解决方案：本地消息表和MQ 事务消息</p>
<p>参考</p>
<p><a href="https://zhuanlan.zhihu.com/p/38388143" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/38388143</a><br><a href="https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html" target="_blank" rel="noopener">https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;👿mark之&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;分布式事务是企业集成中的一个技术难点，也是每一个分布式系统架构中都会涉及到的一个东西，特别是在这几年越来越火的微服务架构中，几乎可以说是无法避免，本文就围绕分布式事务各方面与大家进行介绍。&lt;/p&gt;
&lt;h1 id=&quot;事务&quot;&gt;&lt;a href=&quot;#事务&quot; class=&quot;headerlink&quot; title=&quot;事务&quot;&gt;&lt;/a&gt;事务&lt;/h1&gt;&lt;h2 id=&quot;什么是事务&quot;&gt;&lt;a href=&quot;#什么是事务&quot; class=&quot;headerlink&quot; title=&quot;什么是事务&quot;&gt;&lt;/a&gt;什么是事务&lt;/h2&gt;&lt;p&gt;数据库事务（简称：事务，Transaction）是指数据库执行过程中的一个逻辑单位，由一个有限的数据库操作序列构成。&lt;/p&gt;
&lt;p&gt;事务拥有以下四个特性，习惯上被称为ACID特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;原子性（Atomicity）：事务作为一个整体被执行，包含在其中的对数据库的操作要么全部被执行，要么都不执行。&lt;/li&gt;
&lt;li&gt;一致性（Consistency）：事务应确保数据库的状态从一个一致状态转变为另一个一致状态。一致状态是指数据库中的数据应满足完整性约束。除此之外，一致性还有另外一层语义，就是事务的中间状态不能被观察到（这层语义也有说应该属于原子性）。&lt;/li&gt;
&lt;li&gt;隔离性（Isolation）：多个事务并发执行时，一个事务的执行不应影响其他事务的执行，如同只有这一个操作在被数据库所执行一样。&lt;/li&gt;
&lt;li&gt;持久性（Durability）：已被提交的事务对数据库的修改应该永久保存在数据库中。在事务结束时，此操作将不可逆转。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="分布式" scheme="http://idiotsky.top/categories/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    
      <category term="分布式事务" scheme="http://idiotsky.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    
  </entry>
  
</feed>
